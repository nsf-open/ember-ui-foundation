{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/ui-bread-crumbs-test.js","dummy/tests/helpers/define-component.js","dummy/tests/helpers/lookup-component.js","dummy/tests/helpers/silence-exceptions.js","dummy/tests/helpers/wait.js","dummy/tests/integration/components/ui-alert-block-test.js","dummy/tests/integration/components/ui-alert-test.js","dummy/tests/integration/components/ui-async-block-test.js","dummy/tests/integration/components/ui-button-test.js","dummy/tests/integration/components/ui-collapse-test.js","dummy/tests/integration/components/ui-filter-test.js","dummy/tests/integration/components/ui-heading-test.js","dummy/tests/integration/components/ui-icon-test.js","dummy/tests/integration/components/ui-inline-text-icon-layout-test.js","dummy/tests/integration/components/ui-load-indicator-test.js","dummy/tests/integration/components/ui-lorem-test.js","dummy/tests/integration/components/ui-menu-test.js","dummy/tests/integration/components/ui-modal-test.js","dummy/tests/integration/components/ui-pager-test.js","dummy/tests/integration/components/ui-panel-test.js","dummy/tests/integration/components/ui-popover-test.js","dummy/tests/integration/components/ui-popper-test.js","dummy/tests/integration/components/ui-progress-bar-test.js","dummy/tests/integration/components/ui-sorter-test.js","dummy/tests/integration/components/ui-stepflow-test.js","dummy/tests/integration/components/ui-tabs-test.js","dummy/tests/integration/components/ui-tooltip-attachment-test.js","dummy/tests/integration/components/ui-tooltip-test.js","dummy/tests/integration/helpers/in-array-test.js","dummy/tests/integration/helpers/perform-unlinked-test.js","dummy/tests/test-helper.js","dummy/tests/unit/aria-attributes-test.js","dummy/tests/unit/computed-macros-test.js","dummy/tests/unit/extract-error-messages-test.js","dummy/tests/unit/font-awesome-test.js","dummy/tests/unit/key-navigator-test.js","dummy/tests/unit/kinda-looks-plural-test.js","dummy/tests/unit/message-manager-test.js","dummy/tests/unit/optional-service-test.js","dummy/tests/unit/outside-click-handler-test.js","dummy/tests/unit/progress-manager-test.js","dummy/tests/unit/query-parser-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/acceptance/ui-bread-crumbs-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Acceptance | Component | ui-bread-crumbs', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    function lookupController(owner, fullName) {\n      return owner.lookup(fullName);\n    }\n    function nthCrumb(idx) {\n      let anchor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return `.breadcrumb li:nth-child(${idx})${anchor ? ' a' : ''}`;\n    }\n    (0, _qunit.test)('it generates hyperlinks based on controller configuration', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.dom('.breadcrumb').exists();\n      assert.dom(nthCrumb(1)).hasText('Home');\n      assert.dom(nthCrumb(1, true)).doesNotExist();\n      assert.dom(nthCrumb(2)).doesNotExist();\n      await (0, _testHelpers.visit)('/artists');\n      assert.dom(nthCrumb(1, true)).hasText('Home');\n      assert.dom(nthCrumb(1, true)).hasAttribute('href', '/');\n      assert.dom(nthCrumb(2)).hasText('Artists');\n      assert.dom(nthCrumb(2, true)).doesNotExist();\n      await (0, _testHelpers.visit)('/artists/queen/a-night-at-the-opera');\n      assert.dom(nthCrumb(1, true)).hasText('Home');\n      assert.dom(nthCrumb(1, true)).hasAttribute('href', '/');\n      assert.dom(nthCrumb(2, true)).hasText('Artists');\n      assert.dom(nthCrumb(2, true)).hasAttribute('href', '/artists');\n      assert.dom(nthCrumb(3, true)).hasText('Queen');\n      assert.dom(nthCrumb(3, true)).hasAttribute('href', '/artists/queen');\n      assert.dom(nthCrumb(4, true)).hasText('Albums');\n      assert.dom(nthCrumb(4, true)).hasAttribute('href', '/artists/queen/discography');\n      assert.dom(nthCrumb(5)).hasText('A Night At The Opera');\n      assert.dom(nthCrumb(5, true)).doesNotExist();\n    });\n    (0, _qunit.test)('it does not render an empty ordered list', async function (assert) {\n      lookupController(this.owner, 'controller:application').breadCrumb = undefined;\n      await (0, _testHelpers.visit)('/');\n      assert.dom('.breadcrumb').doesNotExist();\n    });\n    (0, _qunit.test)('it filters out breadcrumbs with no label text', async function (assert) {\n      lookupController(this.owner, 'controller:playground').breadCrumb = {\n        label: ''\n      };\n      await (0, _testHelpers.visit)('/playground');\n      assert.dom(nthCrumb(1)).hasText('Home');\n      assert.dom(nthCrumb(2)).doesNotExist();\n    });\n    (0, _qunit.test)('it supports a breadcrumb being able to \"rewind\", to remove, prior crumbs', async function (assert) {\n      lookupController(this.owner, 'controller:playground').breadCrumb = {\n        label: 'Foobar',\n        rewind: 1\n      };\n      await (0, _testHelpers.visit)('/playground');\n      assert.dom(nthCrumb(1)).hasText('Foobar');\n      assert.dom(nthCrumb(2)).doesNotExist();\n      lookupController(this.owner, 'controller:artists.artist').breadCrumb = {\n        label: 'Baz',\n        rewind: -1\n      };\n      await (0, _testHelpers.visit)('/artists/queen');\n      assert.dom(nthCrumb(1)).hasText('Baz');\n      assert.dom(nthCrumb(2)).doesNotExist();\n    });\n    (0, _qunit.test)('it support a breadcrumb with fully custom href and target', async function (assert) {\n      lookupController(this.owner, 'controller:playground').breadCrumb = undefined;\n      lookupController(this.owner, 'controller:playground').breadCrumbs = [{\n        label: 'Search',\n        href: 'https://www.google.com'\n      }, {\n        label: 'Playground'\n      }];\n      await (0, _testHelpers.visit)('/playground');\n      assert.dom(nthCrumb(2)).hasText('Search');\n      assert.dom(nthCrumb(2, true)).hasAttribute('href', 'https://www.google.com');\n      assert.dom(nthCrumb(2, true)).hasAttribute('target', '_self');\n      assert.dom(nthCrumb(4)).doesNotExist();\n      lookupController(this.owner, 'controller:artists').breadCrumb = {\n        label: 'Search More',\n        href: 'https://www.bing.com',\n        target: '_blank'\n      };\n      await (0, _testHelpers.visit)('/artists/queen');\n      assert.dom(nthCrumb(2)).hasText('Search More');\n      assert.dom(nthCrumb(2, true)).hasAttribute('href', 'https://www.bing.com');\n      assert.dom(nthCrumb(2, true)).hasAttribute('target', '_blank');\n      assert.dom(nthCrumb(4)).doesNotExist();\n    });\n  });\n});","define(\"dummy/tests/helpers/define-component\", [\"exports\", \"@ember/component\"], function (_exports, _component) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = defineComponent;\n  0; //eaimeta@70e063a35619d71f0,\"@ember/component\"eaimeta@70e063a35619d71f\n  function defineComponent(id, layout) {\n    // eslint-disable-next-line ember/no-classic-classes\n    return _component.default.extend({\n      layout,\n      elementId: id\n    });\n  }\n});","define(\"dummy/tests/helpers/lookup-component\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = lookupComponent;\n  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f\n  /**\n   * Returns an active component instance with the provided id from\n   * the view registry.\n   */\n  function lookupComponent(context, id) {\n    const registry = context.owner.lookup('-view-registry:main');\n    return registry[id];\n  }\n});","define(\"dummy/tests/helpers/silence-exceptions\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = silenceExceptions;\n  0; //eaimeta@70e063a35619d71f0,\"@ember/test-helpers\"eaimeta@70e063a35619d71f\n  /**\n   * Sets Ember.onerror to a no-op for the duration of the callback, cleaning\n   * up when it completes.\n   */\n  async function silenceExceptions(callback) {\n    let tryCatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    (0, _testHelpers.setupOnerror)(function () {\n      /* Don't look sweet child! */\n    });\n    if (tryCatch) {\n      try {\n        await callback();\n      } catch (e) {\n        /* We're intending for this to throw. */\n      }\n    } else {\n      await callback();\n    }\n    await (0, _testHelpers.settled)();\n    (0, _testHelpers.resetOnerror)();\n  }\n});","define(\"dummy/tests/helpers/wait\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = wait;\n  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f\n  /**\n   * Creates a promise that will take the given number of milliseconds to\n   * settle, returning the provided payload. Optionally, it can be told\n   * to fail with the same payload.\n   */\n  function wait(milliseconds, payload) {\n    let reject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return new Promise(function (resolveFn, rejectFn) {\n      const settle = reject ? rejectFn : resolveFn;\n      setTimeout(() => settle(payload), milliseconds);\n    });\n  }\n});","define(\"dummy/tests/integration/components/ui-alert-block-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@nsf-open/ember-ui-foundation/lib/MessageManager\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _MessageManager) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\",0,\"@nsf-open/ember-ui-foundation/lib/MessageManager\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-alert-block', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    const rootSelector = '[data-test-ident=\"context-message-block\"]';\n    const errorBlockSelector = '[data-test-ident=\"context-message-danger\"]';\n    const warningBlockSelector = '[data-test-ident=\"context-message-warning\"]';\n    const successBlockSelector = '[data-test-ident=\"context-message-success\"]';\n    const infoBlockSelector = '[data-test-ident=\"context-message-secondary\"]';\n    const mutedBlockSelector = '[data-test-ident=\"context-message-muted\"]';\n    const labelSelector = '[data-test-id=\"label\"]';\n    const itemSelector = '[data-test-ident=\"context-message-item\"]';\n    (0, _qunit.test)('it generates an ordered list of alert blocks based on the input of a message manager', async function (assert) {\n      const manager = new _MessageManager.default();\n      this.set('manager', manager);\n\n      // language=hbs\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiAlertBlock @manager={{this.manager}} />\n      */\n      {\n        \"id\": \"S8ZX4yRM\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@manager\\\"],[[30,0,[\\\"manager\\\"]]]],null]],[],false,[\\\"ui-alert-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom(rootSelector).exists();\n      assert.dom(errorBlockSelector).doesNotExist();\n      assert.dom(warningBlockSelector).doesNotExist();\n      assert.dom(successBlockSelector).doesNotExist();\n      assert.dom(infoBlockSelector).doesNotExist();\n      assert.dom(mutedBlockSelector).doesNotExist();\n      manager.addInfoMessages('Info Message A');\n      await (0, _testHelpers.settled)();\n      assert.dom(infoBlockSelector).isVisible();\n      assert.dom(`${infoBlockSelector} ${labelSelector}`).hasText('INFORMATION:');\n      assert.dom(`${infoBlockSelector} ${itemSelector}`).hasText('Info Message A');\n      const [successMessageId] = manager.addSuccessMessages('Success Message A');\n      manager.addWarningMessages('Warning Message A');\n      manager.addErrorMessages('Error Message A');\n      await (0, _testHelpers.settled)();\n      assert.dom(successBlockSelector).isVisible();\n      assert.dom(`${successBlockSelector} ${labelSelector}`).hasText('SUCCESS:');\n      assert.dom(`${successBlockSelector} ${itemSelector}`).hasText('Success Message A');\n      assert.dom(warningBlockSelector).isVisible();\n      assert.dom(`${warningBlockSelector} ${labelSelector}`).hasText('WARNING:');\n      assert.dom(`${warningBlockSelector} ${itemSelector}`).hasText('Warning Message A');\n      assert.dom(errorBlockSelector).isVisible();\n      assert.dom(`${errorBlockSelector} ${labelSelector}`).hasText('ERROR:');\n      assert.dom(`${errorBlockSelector} ${itemSelector}`).hasText('Error Message A');\n      const blocks = (0, _testHelpers.findAll)(`${rootSelector} > div.alert`);\n      const order = blocks.map(block => block.className.match(/alert-(\\w+)/)).map(matches => matches ? matches[1] : '');\n      assert.deepEqual(order, ['danger', 'warning', 'secondary', 'success'], 'The alert block order is correct');\n      manager.addWarningMessages('Warning Message B');\n      await (0, _testHelpers.settled)();\n      assert.dom(`${warningBlockSelector} ${labelSelector}`).hasText('WARNINGS:');\n      assert.dom(`${warningBlockSelector} ${itemSelector}:nth-child(1)`).hasText('Warning Message A');\n      assert.dom(`${warningBlockSelector} ${itemSelector}:nth-child(2)`).hasText('Warning Message B');\n      manager.updateMessage(successMessageId, 'Success Message B');\n      await (0, _testHelpers.settled)();\n      assert.dom(`${successBlockSelector} ${labelSelector}`).hasText('SUCCESS:');\n      assert.dom(`${successBlockSelector} ${itemSelector}`).hasText('Success Message B');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-alert-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@nsf-open/ember-ui-foundation/lib/MessageManager\", \"@nsf-open/ember-ui-foundation/constants\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _MessageManager, _constants) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\",0,\"@nsf-open/ember-ui-foundation/lib/MessageManager\",0,\"@nsf-open/ember-ui-foundation/constants\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-alert', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('its title text and iconography are correct for the supported alert types', function (assert) {\n      assert.expect(4);\n      assert.deepEqual(_constants.AlertGroups[_constants.AlertLevel.ERROR], {\n        singular: 'ERROR:',\n        plural: 'ERRORS:',\n        icon: 'fa fa-exclamation-triangle'\n      }, 'Correct for ERROR');\n      assert.deepEqual(_constants.AlertGroups[_constants.AlertLevel.WARNING], {\n        singular: 'WARNING:',\n        plural: 'WARNINGS:',\n        icon: 'fa fa-exclamation-triangle'\n      }, 'Correct for WARNING');\n      assert.deepEqual(_constants.AlertGroups[_constants.AlertLevel.SUCCESS], {\n        singular: 'SUCCESS:',\n        plural: 'SUCCESS:',\n        icon: 'fa fa-check-circle-o'\n      }, 'Correct for SUCCESS');\n      assert.deepEqual(_constants.AlertGroups[_constants.AlertLevel.INFO], {\n        singular: 'INFORMATION:',\n        plural: 'INFORMATION:',\n        icon: 'fa fa-info-circle'\n      }, 'Correct for INFORMATION');\n    });\n    (0, _qunit.test)('it will map numerous variant names to the supported types', function (assert) {\n      assert.expect(11);\n      assert.strictEqual(_constants.AlertLevel.ERROR, (0, _MessageManager.getCorrectedAlertLevel)('danger'));\n      assert.strictEqual(_constants.AlertLevel.ERROR, (0, _MessageManager.getCorrectedAlertLevel)('errors'));\n      assert.strictEqual(_constants.AlertLevel.ERROR, (0, _MessageManager.getCorrectedAlertLevel)('error'));\n      assert.strictEqual(_constants.AlertLevel.WARNING, (0, _MessageManager.getCorrectedAlertLevel)('warnings'));\n      assert.strictEqual(_constants.AlertLevel.WARNING, (0, _MessageManager.getCorrectedAlertLevel)('warning'));\n      assert.strictEqual(_constants.AlertLevel.SUCCESS, (0, _MessageManager.getCorrectedAlertLevel)('successes'));\n      assert.strictEqual(_constants.AlertLevel.SUCCESS, (0, _MessageManager.getCorrectedAlertLevel)('success'));\n      assert.strictEqual(_constants.AlertLevel.INFO, (0, _MessageManager.getCorrectedAlertLevel)('secondary'));\n      assert.strictEqual(_constants.AlertLevel.INFO, (0, _MessageManager.getCorrectedAlertLevel)('info'));\n      assert.strictEqual(_constants.AlertLevel.INFO, (0, _MessageManager.getCorrectedAlertLevel)('information'));\n      assert.strictEqual(_constants.AlertLevel.INFO, (0, _MessageManager.getCorrectedAlertLevel)('informationals'));\n    });\n    (0, _qunit.test)('it allows the default title text and iconography to be customized', async function (assert) {\n      this.set('variant', 'success');\n      this.set('alertGroups', {\n        [_constants.AlertLevel.WARNING]: {\n          singular: 'DANGER WILL ROBINSON:'\n        }\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n              <UiAlert\n                @variant={{this.variant}}\n                @alertGroups={{this.alertGroups}}\n                @content=\"Lorem Ipsum\"\n              />\n          \n      */\n      {\n        \"id\": \"pIkt7QT+\",\n        \"block\": \"[[[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@variant\\\",\\\"@alertGroups\\\",\\\"@content\\\"],[[30,0,[\\\"variant\\\"]],[30,0,[\\\"alertGroups\\\"]],\\\"Lorem Ipsum\\\"]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-alert\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"label\"]').hasText('SUCCESS:');\n      this.set('variant', 'warning');\n      assert.dom('[data-test-id=\"label\"]').hasText('DANGER WILL ROBINSON:');\n    });\n    (0, _qunit.test)('it renders a single string message', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        {{ui-alert \"error\" \"This is an error message\"}}\n      */\n      {\n        \"id\": \"OV3QQys0\",\n        \"block\": \"[[[1,[28,[35,0],[\\\"error\\\",\\\"This is an error message\\\"],null]]],[],false,[\\\"ui-alert\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"label\"]').hasText('ERROR:');\n      assert.dom('[data-test-ident=\"context-message-item\"]').hasTagName('span');\n      assert.dom('[data-test-ident=\"context-message-item\"]').hasText('This is an error message');\n    });\n    (0, _qunit.test)('it renders an array with one string message', async function (assert) {\n      this.set('messages', ['This is an error message']);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        {{ui-alert \"error\" this.messages}}\n      */\n      {\n        \"id\": \"Y8iCYrHa\",\n        \"block\": \"[[[1,[28,[35,0],[\\\"error\\\",[30,0,[\\\"messages\\\"]]],null]]],[],false,[\\\"ui-alert\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"label\"]').hasText('ERROR:');\n      assert.dom('[data-test-ident=\"context-message-item\"]').hasTagName('span');\n      assert.dom('[data-test-ident=\"context-message-item\"]').hasText('This is an error message');\n    });\n    (0, _qunit.test)('it renders an array with multiple string messages', async function (assert) {\n      this.set('messages', ['This is an error message', 'This is another error message']);\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        {{ui-alert \"error\" this.messages}}\n      */\n      {\n        \"id\": \"Y8iCYrHa\",\n        \"block\": \"[[[1,[28,[35,0],[\\\"error\\\",[30,0,[\\\"messages\\\"]]],null]]],[],false,[\\\"ui-alert\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"label\"]').hasText('ERRORS:');\n      assert.dom('[data-test-ident=\"context-message-item\"]:nth-child(1)').hasTagName('li');\n      assert.dom('[data-test-ident=\"context-message-item\"]:nth-child(1)').hasText('This is an error message');\n      assert.dom('[data-test-ident=\"context-message-item\"]:nth-child(2)').hasTagName('li');\n      assert.dom('[data-test-ident=\"context-message-item\"]:nth-child(2)').hasText('This is another error message');\n    });\n    (0, _qunit.test)('it supports generic block content', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n      \t\t\t{{#ui-alert \"error\" as |alert|}}\n      \t\t\t\t<p>{{alert.title}} <span data-test-ident=\"context-message-item\">This is a custom error message</span></p>\n      \t\t\t{{/ui-alert}}\n      \t\t\n      */\n      {\n        \"id\": \"wqEvHVJy\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],[\\\"error\\\"],null,[[\\\"default\\\"],[[[[1,\\\"\\\\t\\\\t\\\\t\\\\t\\\"],[10,2],[12],[1,[30,1,[\\\"title\\\"]]],[1,\\\" \\\"],[10,1],[14,\\\"data-test-ident\\\",\\\"context-message-item\\\"],[12],[1,\\\"This is a custom error message\\\"],[13],[13],[1,\\\"\\\\n\\\"]],[1]]]]],[1,\\\"\\\\t\\\\t\\\"]],[\\\"alert\\\"],false,[\\\"ui-alert\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"label\"]').hasText('ERROR:');\n      assert.dom('[data-test-ident=\"context-message-item\"]').hasTagName('span');\n      assert.dom('[data-test-ident=\"context-message-item\"]').hasText('This is a custom error message');\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n      \t\t\t{{#ui-alert \"error\" as |alert|}}\n      \t\t\t\t{{alert.title plural=true}}\n      \t\t\t\t<ul>\n      \t\t\t\t\t<li data-test-ident=\"context-message-item\">This is a custom error message</li>\n      \t\t\t\t\t<li data-test-ident=\"context-message-item\">This is another custom error message</li>\n      \t\t\t\t</ul>\n      \t\t\t{{/ui-alert}}\n      \t\t\n      */\n      {\n        \"id\": \"WL7Oa+3j\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],[\\\"error\\\"],null,[[\\\"default\\\"],[[[[1,\\\"\\\\t\\\\t\\\\t\\\\t\\\"],[1,[28,[30,1,[\\\"title\\\"]],null,[[\\\"plural\\\"],[true]]]],[1,\\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\"],[10,\\\"ul\\\"],[12],[1,\\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\"],[10,\\\"li\\\"],[14,\\\"data-test-ident\\\",\\\"context-message-item\\\"],[12],[1,\\\"This is a custom error message\\\"],[13],[1,\\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\"],[10,\\\"li\\\"],[14,\\\"data-test-ident\\\",\\\"context-message-item\\\"],[12],[1,\\\"This is another custom error message\\\"],[13],[1,\\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\"],[13],[1,\\\"\\\\n\\\"]],[1]]]]],[1,\\\"\\\\t\\\\t\\\"]],[\\\"alert\\\"],false,[\\\"ui-alert\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"label\"]').hasText('ERRORS:');\n      assert.dom('[data-test-ident=\"context-message-item\"]:nth-child(1)').hasText('This is a custom error message');\n      assert.dom('[data-test-ident=\"context-message-item\"]:nth-child(2)').hasText('This is another custom error message');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-async-block-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"rsvp\", \"dummy/tests/helpers/silence-exceptions\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _rsvp, _silenceExceptions, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"htmlbars-inline-precompile\",0,\"rsvp\",0,\"dummy/tests/helpers/silence-exceptions\",0,\"@ember/test-helpers\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-async-block', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    function resolvingPromise() {\n      let ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      let payload = arguments.length > 1 ? arguments[1] : undefined;\n      return new _rsvp.Promise(resolve => setTimeout(() => resolve(payload), ms));\n    }\n    function rejectingPromise() {\n      let ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      let payload = arguments.length > 1 ? arguments[1] : undefined;\n      return new _rsvp.Promise((_, reject) => setTimeout(() => reject(payload), ms));\n    }\n    (0, _qunit.test)('it renders content when not given a promise', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#ui-async-block}}\n              <p data-test-content>Hello World</p>\n            {{/ui-async-block}}\n          \n      */\n      {\n        \"id\": \"7/Or4zhZ\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"    \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-content]').isVisible();\n      assert.dom('[data-test-content]').hasText('Hello World');\n    });\n    (0, _qunit.test)('it handles a resolved promised', async function (assert) {\n      const promise = this.set('promise', resolvingPromise());\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiAsyncBlock @promise={{this.promise}}>\n              <p data-test-content>Hello World</p>\n            </UiAsyncBlock>\n          \n      */\n      {\n        \"id\": \"zWH7EYT2\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@promise\\\"],[[30,0,[\\\"promise\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').isVisible();\n      assert.dom('[data-test-id=\"load-indicator\"]').hasText('Loading...');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-content]').isVisible();\n      assert.dom('[data-test-content]').hasText('Hello World');\n    });\n    (0, _qunit.test)('it yields the resolved result to its content block', async function (assert) {\n      const promise = this.set('promise', resolvingPromise(50, '1234'));\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n      \t\t\t{{#ui-async-block promise=this.promise as |promiseResult|}}\n      \t\t\t\t<p data-test-content>{{promiseResult}}</p>\n      \t\t\t{{/ui-async-block}}\n      \t\t\n      */\n      {\n        \"id\": \"ggywc+Le\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],null,[[\\\"promise\\\"],[[30,0,[\\\"promise\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\t\\\\t\\\\t\\\\t\\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,[30,1]],[13],[1,\\\"\\\\n\\\"]],[1]]]]],[1,\\\"\\\\t\\\\t\\\"]],[\\\"promiseResult\\\"],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-content]').isVisible();\n      assert.dom('[data-test-content]').hasText('1234');\n    });\n    (0, _qunit.test)('it handles a rejected promise', async function (assert) {\n      const promise = this.set('promise', rejectingPromise());\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n      \t\t\t{{#ui-async-block promise=this.promise}}\n      \t\t\t\t<p data-test-content>Hello World</p>\n      \t\t\t{{/ui-async-block}}\n      \t\t\n      */\n      {\n        \"id\": \"iyDjko4s\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],null,[[\\\"promise\\\"],[[30,0,[\\\"promise\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\t\\\\t\\\\t\\\\t\\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"\\\\t\\\\t\\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').isVisible();\n      assert.dom('[data-test-id=\"load-indicator\"]').hasText('Loading...');\n      await (0, _silenceExceptions.default)(async () => {\n        await promise;\n      });\n      assert.dom('[data-test-id=\"error-block\"]').isVisible();\n      assert.dom('[data-test-id=\"error-block\"]').hasText('An Error Has Occurred');\n      assert.dom('[data-test-id=\"error-block\"] p:nth-child(1) span').hasClass('fa-exclamation-triangle');\n    });\n    (0, _qunit.test)('it handles a promise that resolves something \"empty\"', async function (assert) {\n      const promise = this.set('promise', resolvingPromise());\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#ui-async-block promise=this.promise noResults=true}}\n              <p data-test-content>Hello World</p>\n            {{/ui-async-block}}\n          \n      */\n      {\n        \"id\": \"aqy51Pws\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],null,[[\\\"promise\\\",\\\"noResults\\\"],[[30,0,[\\\"promise\\\"]],true]],[[\\\"default\\\"],[[[[1,\\\"        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"    \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').isVisible();\n      assert.dom('[data-test-id=\"load-indicator\"]').hasText('Loading...');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"no-results-block\"]').isVisible();\n      assert.dom('[data-test-id=\"no-results-block\"]').hasText('No Content Is Available');\n    });\n    (0, _qunit.test)('it generates customized messages based on a provided \"name\"', async function (assert) {\n      let promise = this.set('promise', resolvingPromise());\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#ui-async-block \"Witty Catchphrases\" promise=this.promise noResults=true}}\n              <p data-test-content>Hello World</p>\n            {{/ui-async-block}}\n          \n      */\n      {\n        \"id\": \"SYdjdShX\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],[\\\"Witty Catchphrases\\\"],[[\\\"promise\\\",\\\"noResults\\\"],[[30,0,[\\\"promise\\\"]],true]],[[\\\"default\\\"],[[[[1,\\\"        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"    \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').hasText('Loading Witty Catchphrases');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"no-results-block\"]').hasText('No Witty Catchphrases have been added');\n      await (0, _testHelpers.clearRender)();\n      promise = this.set('promise', rejectingPromise());\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#ui-async-block \"Witty Catchphrases\" promise=this.promise}}\n              <p data-test-content>Hello World</p>\n            {{/ui-async-block}}\n          \n      */\n      {\n        \"id\": \"MN2Etm32\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],[\\\"Witty Catchphrases\\\"],[[\\\"promise\\\"],[[30,0,[\\\"promise\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"    \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await (0, _silenceExceptions.default)(async () => {\n        await promise;\n      });\n      assert.dom('[data-test-id=\"error-block\"]').hasText('Could not retrieve Witty Catchphrases');\n    });\n    (0, _qunit.test)('it shows fully custom message strings when provided', async function (assert) {\n      let promise = this.set('promise', resolvingPromise());\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#ui-async-block \"Witty Catchphrases\"\n              promise          = this.promise\n              noResults        = true\n              pendingMessage   = \"Foo\"\n              noResultsMessage = \"Bar\"\n              rejectedMessage  = \"Baz\"\n            }}\n              <p data-test-content>Hello World</p>\n            {{/ui-async-block}}\n           \n      */\n      {\n        \"id\": \"XFA1/HgV\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],[\\\"Witty Catchphrases\\\"],[[\\\"promise\\\",\\\"noResults\\\",\\\"pendingMessage\\\",\\\"noResultsMessage\\\",\\\"rejectedMessage\\\"],[[30,0,[\\\"promise\\\"]],true,\\\"Foo\\\",\\\"Bar\\\",\\\"Baz\\\"]],[[\\\"default\\\"],[[[[1,\\\"        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"     \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').hasText('Foo');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"no-results-block\"]').hasText('Bar');\n      await (0, _testHelpers.clearRender)();\n      promise = this.set('promise', rejectingPromise());\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#ui-async-block \"Witty Catchphrases\"\n              promise          = this.promise\n              pendingMessage   = \"Foo\"\n              rejectedMessage  = \"Baz\"\n            }}\n              <p data-test-content>Hello World</p>\n            {{/ui-async-block}}\n          \n      */\n      {\n        \"id\": \"9yDbt13l\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],[\\\"Witty Catchphrases\\\"],[[\\\"promise\\\",\\\"pendingMessage\\\",\\\"rejectedMessage\\\"],[[30,0,[\\\"promise\\\"]],\\\"Foo\\\",\\\"Baz\\\"]],[[\\\"default\\\"],[[[[1,\\\"        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n\\\"]],[]]]]],[1,\\\"    \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await (0, _silenceExceptions.default)(async () => {\n        await promise;\n      });\n      assert.dom('[data-test-id=\"error-block\"]').hasText('Baz');\n    });\n    (0, _qunit.test)('it shows fully custom messages via function when provided', async function (assert) {\n      let promise = this.set('promise', resolvingPromise());\n      this.set('pendingMessageFunction', function (name) {\n        return `Pending a response for ${name}`;\n      });\n      this.set('rejectedMessageFunction', function (name) {\n        return `The request for ${name} failed`;\n      });\n      this.set('noResultsMessageFunction', function (name) {\n        return `No results returned for ${name}`;\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiAsyncBlock\n              @name=\"Witty Catchphrases\"\n              @promise={{this.promise}}\n              @noResults={{true}}\n              @pendingMessage={{this.pendingMessageFunction}}\n              @noResultsMessage={{this.noResultsMessageFunction}}\n              @rejectedMessage={{this.rejectedMessageFunction}}\n            >\n              <p data-test-content>Hello World</p>\n            </ UiAsyncBlock>\n          \n      */\n      {\n        \"id\": \"GYzzzE3a\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@name\\\",\\\"@promise\\\",\\\"@noResults\\\",\\\"@pendingMessage\\\",\\\"@noResultsMessage\\\",\\\"@rejectedMessage\\\"],[\\\"Witty Catchphrases\\\",[30,0,[\\\"promise\\\"]],true,[30,0,[\\\"pendingMessageFunction\\\"]],[30,0,[\\\"noResultsMessageFunction\\\"]],[30,0,[\\\"rejectedMessageFunction\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').hasText('Pending a response for Witty Catchphrases');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"no-results-block\"]').hasText('No results returned for Witty Catchphrases');\n      await (0, _testHelpers.clearRender)();\n      promise = this.set('promise', rejectingPromise());\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiAsyncBlock\n              @name=\"Witty Catchphrases\"\n              @promise={{this.promise}}\n              @pendingMessage={{this.pendingMessageFunction}}\n              @rejectedMessage={{this.rejectedMessageFunction}}\n            >\n              <p data-test-content>Hello World</p>\n            </ UiAsyncBlock>\n          \n      */\n      {\n        \"id\": \"ci4PRbCF\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@name\\\",\\\"@promise\\\",\\\"@pendingMessage\\\",\\\"@rejectedMessage\\\"],[\\\"Witty Catchphrases\\\",[30,0,[\\\"promise\\\"]],[30,0,[\\\"pendingMessageFunction\\\"]],[30,0,[\\\"rejectedMessageFunction\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[14,\\\"data-test-content\\\",\\\"\\\"],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-async-block\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await (0, _silenceExceptions.default)(async () => {\n        await promise;\n      });\n      assert.dom('[data-test-id=\"error-block\"]').hasText('The request for Witty Catchphrases failed');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-button-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a button in a variety of fun styles', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiButton @text=\"Hello World\" @variant=\"primary\" @testId=\"btn\" />\n      */\n      {\n        \"id\": \"UfLtjvmh\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@variant\\\",\\\"@testId\\\"],[\\\"Hello World\\\",\\\"primary\\\",\\\"btn\\\"]],null]],[],false,[\\\"ui-button\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"btn\"]').isVisible();\n      assert.dom('[data-test-id=\"btn\"]').hasText('Hello World');\n      assert.dom('[data-test-id=\"btn\"]').isEnabled();\n      assert.dom('[data-test-id=\"btn\"]').hasClass('btn');\n      assert.dom('[data-test-id=\"btn\"]').hasClass('btn-primary');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiButton @variant=\"secondary\" @size=\"lg\" @block={{true}}>Foo Bar</UiButton>\n      */\n      {\n        \"id\": \"8ExsD5l7\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@variant\\\",\\\"@size\\\",\\\"@block\\\"],[\\\"secondary\\\",\\\"lg\\\",true]],[[\\\"default\\\"],[[[[1,\\\"Foo Bar\\\"]],[]]]]]],[],false,[\\\"ui-button\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('button').isVisible();\n      assert.dom('button').hasText('Foo Bar');\n      assert.dom('button').isEnabled();\n      assert.dom('button').hasClass('btn-secondary');\n      assert.dom('button').hasClass('btn-block');\n      assert.dom('button').hasClass('btn-lg');\n    });\n    (0, _qunit.test)('it handles click events', async function (assert) {\n      this.set('clickAction', function () {\n        assert.step('click');\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n              <UiButton @text=\"Hello World\" @variant=\"primary\" @onClick={{action this.clickAction}} />\n          \n      */\n      {\n        \"id\": \"5YWOPbod\",\n        \"block\": \"[[[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@text\\\",\\\"@variant\\\",\\\"@onClick\\\"],[\\\"Hello World\\\",\\\"primary\\\",[28,[37,1],[[30,0],[30,0,[\\\"clickAction\\\"]]],null]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-button\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)('button');\n      assert.verifySteps(['click']);\n    });\n    (0, _qunit.test)('it cannot be clicked on when disabled', async function (assert) {\n      this.setProperties({\n        disabled: false,\n        clickAction() {\n          assert.step('click A');\n        }\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n              <UiButton\n                @text=\"Hello World\"\n                @variant=\"primary\"\n                @disabled={{this.disabled}}\n                @onClick={{action this.clickAction}}\n              />\n          \n      */\n      {\n        \"id\": \"/BO/SlHt\",\n        \"block\": \"[[[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@text\\\",\\\"@variant\\\",\\\"@disabled\\\",\\\"@onClick\\\"],[\\\"Hello World\\\",\\\"primary\\\",[30,0,[\\\"disabled\\\"]],[28,[37,1],[[30,0],[30,0,[\\\"clickAction\\\"]]],null]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-button\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)('button');\n      this.setProperties({\n        disabled: true,\n        clickAction() {\n          assert.step('I should not be ran');\n        }\n      });\n      try {\n        await (0, _testHelpers.click)('button');\n      } catch (e) {\n        // Noop. @ember/test-helpers throws and error if the button is\n        // disabled when you try to click on it.\n      }\n      this.setProperties({\n        disabled: false,\n        clickAction() {\n          assert.step('click B');\n        }\n      });\n      await (0, _testHelpers.click)('button');\n      assert.verifySteps(['click A', 'click B']);\n    });\n    (0, _qunit.test)('it goes into a \"pending\" state when a promise is returned from the onClick action', async function (assert) {\n      const promise = new Promise(resolve => setTimeout(resolve, 100));\n      this.set('clickAction', function () {\n        return promise;\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiButton @text=\"Hello World\" @onClick={{action this.clickAction}} />\n      */\n      {\n        \"id\": \"O8KsylKP\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@onClick\\\"],[\\\"Hello World\\\",[28,[37,1],[[30,0],[30,0,[\\\"clickAction\\\"]]],null]]],null]],[],false,[\\\"ui-button\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)('button');\n      assert.dom('button').isDisabled();\n      assert.dom('button span:first-child').hasClass('fa-spinner');\n      assert.dom('button span:first-child').hasClass('fa-spin');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('button').isEnabled();\n      assert.dom('button span').doesNotExist();\n    });\n    (0, _qunit.test)('it goes into a \"pending\" state when a promise is provided as an attribute', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiButton @text=\"Hello World\" @promise={{this.promise}} />\n      */\n      {\n        \"id\": \"PelXgVQh\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@promise\\\"],[\\\"Hello World\\\",[30,0,[\\\"promise\\\"]]]],null]],[],false,[\\\"ui-button\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const promise = new Promise(resolve => setTimeout(resolve, 100));\n      this.set('promise', promise);\n      await (0, _testHelpers.settled)();\n      assert.dom('button').isDisabled();\n      assert.dom('button span:first-child').hasClass('fa-spinner');\n      assert.dom('button span:first-child').hasClass('fa-spin');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('button').isEnabled();\n      assert.dom('button span').doesNotExist();\n    });\n    (0, _qunit.test)('it renders icons', async function (assert) {\n      this.set('iconPlacement', 'left');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiButton @text=\"Hello World\" @icon=\"search\" @iconPlacement={{this.iconPlacement}} />\n      */\n      {\n        \"id\": \"sYnwZ2LM\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@icon\\\",\\\"@iconPlacement\\\"],[\\\"Hello World\\\",\\\"search\\\",[30,0,[\\\"iconPlacement\\\"]]]],null]],[],false,[\\\"ui-button\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('button span:nth-child(1)').hasClass('fa-search');\n      this.set('iconPlacement', 'right');\n      assert.dom('button span:nth-child(2)').hasClass('fa-search');\n    });\n    (0, _qunit.test)('it can be disabled', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiButton @text=\"Hello World\" @disabled={{true}} />\n      */\n      {\n        \"id\": \"mfVvbfaQ\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@disabled\\\"],[\\\"Hello World\\\",true]],null]],[],false,[\\\"ui-button\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('button').isDisabled();\n    });\n    (0, _qunit.test)('it has numerous other attribute bindings', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiButton @text=\"Hello World\"\n              @title=\"Foo\"\n              @type=\"submit\"\n              @ariaExpanded=\"true\"\n              @ariaLabel=\"Bar\"\n              @ariaLabelledBy=\"123\"\n              @ariaDescribedBy=\"456\"\n              @ariaControls=\"789\"\n              @ariaSelected=\"false\"\n              @ariaHasPopup=\"000\"\n              @tabIndex=\"-1\"\n            />\n          \n      */\n      {\n        \"id\": \"yvH2lELD\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@text\\\",\\\"@title\\\",\\\"@type\\\",\\\"@ariaExpanded\\\",\\\"@ariaLabel\\\",\\\"@ariaLabelledBy\\\",\\\"@ariaDescribedBy\\\",\\\"@ariaControls\\\",\\\"@ariaSelected\\\",\\\"@ariaHasPopup\\\",\\\"@tabIndex\\\"],[\\\"Hello World\\\",\\\"Foo\\\",\\\"submit\\\",\\\"true\\\",\\\"Bar\\\",\\\"123\\\",\\\"456\\\",\\\"789\\\",\\\"false\\\",\\\"000\\\",\\\"-1\\\"]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-button\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('button').hasAttribute('title', 'Foo');\n      assert.dom('button').hasAttribute('type', 'submit');\n      assert.dom('button').hasAttribute('aria-expanded', 'true');\n      assert.dom('button').hasAttribute('aria-label', 'Bar');\n      assert.dom('button').hasAttribute('aria-labelledby', '123');\n      assert.dom('button').hasAttribute('aria-describedby', '456');\n      assert.dom('button').hasAttribute('aria-controls', '789');\n      assert.dom('button').hasAttribute('aria-selected', 'false');\n      assert.dom('button').hasAttribute('aria-haspopup', '000');\n      assert.dom('button').hasAttribute('tabindex', '-1');\n    });\n    (0, _qunit.test)('it can display a tooltip while being \"disabled\"', async function (assert) {\n      this.set('disabled', false);\n      this.set('handleClick', () => {\n        throw new Error('onClick should be disabled');\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n              <UiButton\n                @text=\"Hello World\"\n                @disabledTooltip=\"Lorem Ipsum\"\n                @disabled={{this.disabled}}\n                @onClick={{this.handleClick}}\n              />\n          \n      */\n      {\n        \"id\": \"l6oyU/I9\",\n        \"block\": \"[[[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@text\\\",\\\"@disabledTooltip\\\",\\\"@disabled\\\",\\\"@onClick\\\"],[\\\"Hello World\\\",\\\"Lorem Ipsum\\\",[30,0,[\\\"disabled\\\"]],[30,0,[\\\"handleClick\\\"]]]],null],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-button\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('button').isNotDisabled().hasText('Hello World').doesNotHaveAttribute('aria-disabled').doesNotHaveAttribute('tabindex').doesNotHaveClass('disabled');\n      assert.dom('button .fa').doesNotExist();\n      this.set('disabled', true);\n      assert.dom('button').isNotDisabled().hasAttribute('aria-disabled', 'true').hasAttribute('tabindex', '-1').hasClass('disabled');\n      assert.dom('button .fa').doesNotExist();\n      assert.dom('.tooltip').exists().isNotVisible();\n      await (0, _testHelpers.focus)('button');\n      assert.dom('.tooltip').isVisible();\n      await (0, _testHelpers.click)('button');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-collapse-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  // // @ts-expect-error - Testing testing 1, 2, 3\n  // window.__WAIT_FOR_TRANSITION_END__ = true;\n\n  (0, _qunit.module)('Integration | Component | ui-collapse', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it vertically expands a block element', async function (assert) {\n      this.set('collapsed', true);\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiCollapse @collapsed={{this.collapsed}}>\n                <div style=\"border: solid 1px #000; padding: 20px; background: #fff;\">\n                    Hello World\n                </div>\n            </UiCollapse>\n      */\n      {\n        \"id\": \"TeoxOtu4\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@collapsed\\\"],[[30,0,[\\\"collapsed\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,0],[14,5,\\\"border: solid 1px #000; padding: 20px; background: #fff;\\\"],[12],[1,\\\"\\\\n              Hello World\\\\n          \\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-collapse\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.ui-collapse').exists();\n      assert.dom('.ui-collapse').hasClass('collapse');\n      assert.dom('.ui-collapse').doesNotHaveClass('show');\n      assert.dom('.ui-collapse').isNotVisible();\n      assert.dom('.ui-collapse').hasStyle({\n        height: 'auto'\n      });\n      this.set('collapsed', false);\n      await (0, _testHelpers.waitFor)('.ui-collapse.collapsing');\n      await (0, _testHelpers.waitFor)('.ui-collapse.show');\n      assert.dom('.ui-collapse').hasClass('show');\n      assert.dom('.ui-collapse').isVisible();\n      assert.dom('.ui-collapse').hasStyle({\n        height: `${(0, _testHelpers.find)('.ui-collapse')?.scrollHeight}px`\n      });\n      this.set('collapsed', true);\n      await (0, _testHelpers.waitFor)('.ui-collapse.collapsing');\n      await (0, _testHelpers.waitFor)('.ui-collapse.collapse');\n      assert.dom('.ui-collapse').doesNotHaveClass('show');\n      assert.dom('.ui-collapse').isNotVisible();\n      assert.dom('.ui-collapse').hasStyle({\n        height: 'auto'\n      });\n    });\n    (0, _qunit.test)('it can start in the expanded state', async function (assert) {\n      this.set('collapsed', false);\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiCollapse @collapsed={{this.collapsed}}>\n                <div style=\"border: solid 1px #000; padding: 20px; background: #fff;\">\n                    Hello World\n                </div>\n            </UiCollapse>\n      */\n      {\n        \"id\": \"TeoxOtu4\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@collapsed\\\"],[[30,0,[\\\"collapsed\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,0],[14,5,\\\"border: solid 1px #000; padding: 20px; background: #fff;\\\"],[12],[1,\\\"\\\\n              Hello World\\\\n          \\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-collapse\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.ui-collapse').hasClass('show');\n      assert.dom('.ui-collapse').isVisible();\n      assert.dom('.ui-collapse').hasStyle({\n        height: `${(0, _testHelpers.find)('.ui-collapse')?.scrollHeight}px`\n      });\n      this.set('collapsed', true);\n      await (0, _testHelpers.waitFor)('.ui-collapse.collapsing');\n      await (0, _testHelpers.waitFor)('.ui-collapse.collapse');\n      assert.dom('.ui-collapse').doesNotHaveClass('show');\n      assert.dom('.ui-collapse').isNotVisible();\n      assert.dom('.ui-collapse').hasStyle({\n        height: 'auto'\n      });\n    });\n    (0, _qunit.test)('it runs provided callback actions', async function (assert) {\n      this.set('collapsed', true);\n      this.set('handleOnShow', function () {\n        assert.step('onShow');\n      });\n      this.set('handleOnShown', function () {\n        assert.step('onShown');\n      });\n      this.set('handleOnHide', function () {\n        assert.step('onHide');\n      });\n      this.set('handleOnHidden', function () {\n        assert.step('onHidden');\n      });\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiCollapse\n                    @collapsed={{this.collapsed}}\n                    @onShow={{this.handleOnShow}}\n                    @onShown={{this.handleOnShown}}\n                    @onHide={{this.handleOnHide}}\n                    @onHidden={{this.handleOnHidden}}\n            >\n                <div style=\"border: solid 1px #000; padding: 20px; background: #fff;\">\n                    Hello World\n                </div>\n            </UiCollapse>\n      */\n      {\n        \"id\": \"6Bk1X3zf\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@collapsed\\\",\\\"@onShow\\\",\\\"@onShown\\\",\\\"@onHide\\\",\\\"@onHidden\\\"],[[30,0,[\\\"collapsed\\\"]],[30,0,[\\\"handleOnShow\\\"]],[30,0,[\\\"handleOnShown\\\"]],[30,0,[\\\"handleOnHide\\\"]],[30,0,[\\\"handleOnHidden\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,0],[14,5,\\\"border: solid 1px #000; padding: 20px; background: #fff;\\\"],[12],[1,\\\"\\\\n              Hello World\\\\n          \\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-collapse\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      this.set('collapsed', false);\n      await (0, _testHelpers.waitFor)('.ui-collapse.show');\n      this.set('collapsed', true);\n      await (0, _testHelpers.waitFor)('.ui-collapse.collapse');\n      assert.verifySteps(['onShow', 'onShown', 'onHide', 'onHidden']);\n    });\n    (0, _qunit.test)('it can have its expanded and collapsed size explicitly set', async function (assert) {\n      this.set('collapsed', true);\n      this.set('expandedSize', 40);\n      this.set('collapsedSize', 10);\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiCollapse\n                    @collapsed={{this.collapsed}}\n                    @expandedSize={{this.expandedSize}}\n                    @collapsedSize={{this.collapsedSize}}\n                    @resetSizeBetweenTransitions={{false}}\n            >\n                <div style=\"border: solid 1px #000; padding: 20px; background: #fff;\">\n                    Hello World\n                </div>\n            </UiCollapse>\n      */\n      {\n        \"id\": \"N7zTNsVp\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@collapsed\\\",\\\"@expandedSize\\\",\\\"@collapsedSize\\\",\\\"@resetSizeBetweenTransitions\\\"],[[30,0,[\\\"collapsed\\\"]],[30,0,[\\\"expandedSize\\\"]],[30,0,[\\\"collapsedSize\\\"]],false]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,0],[14,5,\\\"border: solid 1px #000; padding: 20px; background: #fff;\\\"],[12],[1,\\\"\\\\n              Hello World\\\\n          \\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-collapse\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      this.set('collapsed', false);\n      await (0, _testHelpers.waitFor)('.ui-collapse.show');\n      assert.dom('.ui-collapse').hasAttribute('style', 'height: 40px;');\n      this.set('expandedSize', 30);\n      await (0, _testHelpers.settled)();\n      assert.dom('.ui-collapse').hasAttribute('style', 'height: 30px;');\n      this.set('collapsed', true);\n      await (0, _testHelpers.waitFor)('.ui-collapse.collapse');\n      assert.dom('.ui-collapse').hasAttribute('style', 'height: 10px;');\n      this.set('collapsedSize', 20);\n      await (0, _testHelpers.settled)();\n      assert.dom('.ui-collapse').hasAttribute('style', 'height: 20px;');\n    });\n    (0, _qunit.test)('it waits for rendering to finish before moving past \"onShow\"', async function (assert) {\n      // It is a fairly common pattern to have the onShow action doing something that\n      // causes the content of the ui-collapse component to change. Those changes need\n      // to occur before the final size to expand to is calculated so there isn't an abrupt\n      // visual jerk at the end of the animation.\n\n      // The way that this works is to capture an initial size of the expanded block.\n      // Collapse it. Expand it again, and in doing so trigger some additional content to be\n      // rendered. The new size that it has calculated as what it needs to transition to\n      // should be larger than the original.\n\n      function fromPx(str) {\n        return typeof str === 'string' ? parseInt(str.replace(/\\D/g, ''), 10) : undefined;\n      }\n      this.set('collapsed', false);\n      this.set('showMore', false);\n      this.set('handleOnShow', () => {\n        this.set('showMore', true);\n      });\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiCollapse\n                    @collapsed={{this.collapsed}}\n                    @onShow={{action this.handleOnShow}}\n            >\n                <div style=\"border: solid 1px #000; padding: 20px; background: #fff;\">\n                    Hello World\n                    {{#if this.showMore}}<p>Foo Bar Baz</p>{{/if}}\n                </div>\n            </UiCollapse>\n      */\n      {\n        \"id\": \"Y+51P9ez\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@collapsed\\\",\\\"@onShow\\\"],[[30,0,[\\\"collapsed\\\"]],[28,[37,1],[[30,0],[30,0,[\\\"handleOnShow\\\"]]],null]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,0],[14,5,\\\"border: solid 1px #000; padding: 20px; background: #fff;\\\"],[12],[1,\\\"\\\\n              Hello World\\\\n              \\\"],[41,[30,0,[\\\"showMore\\\"]],[[[10,2],[12],[1,\\\"Foo Bar Baz\\\"],[13]],[]],null],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-collapse\\\",\\\"action\\\",\\\"if\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const originalHeight = (0, _testHelpers.find)('.ui-collapse')?.scrollHeight || 0;\n      this.set('collapsed', true);\n      await (0, _testHelpers.settled)();\n      this.set('collapsed', false);\n      await (0, _testHelpers.waitUntil)(() => fromPx((0, _testHelpers.find)('.ui-collapse')?.getAttribute('style')) || 0 > 0);\n      const newHeight = fromPx((0, _testHelpers.find)('.ui-collapse')?.getAttribute('style')) || 0;\n      assert.ok(newHeight > originalHeight, `The new block height (${newHeight}px) is greater than the original (${originalHeight}px)`);\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-filter-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-filter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    const recordSet = [{\n      name: 'Herbert Labadie',\n      email: 'Rashad.Littel63@gmail.com',\n      isAdmin: false,\n      age: 37,\n      hobbies: []\n    }, {\n      name: 'Caleb Welch DDS',\n      email: 'Christelle.Schroeder97@hotmail.com',\n      isAdmin: true,\n      age: 51,\n      hobbies: []\n    }, {\n      name: 'Ms. Lila Yundt',\n      email: 'Eryn.Barton@yahoo.com',\n      isAdmin: true,\n      age: 31,\n      hobbies: 'camping'\n    }, {\n      name: 'Mr. Brittany Kuhic',\n      email: 'Amelia51@yahoo.com',\n      isAdmin: false,\n      age: 20,\n      hobbies: ['camping', 'hiking']\n    }, {\n      name: 'Terence Brakus',\n      email: 'Jovany.Ferry82@hotmail.com',\n      isAdmin: false,\n      age: 41,\n      hobbies: 'knitting'\n    }, {\n      name: 'Iris Feil',\n      email: 'Raleigh_Mills5@yahoo.com',\n      isAdmin: false,\n      age: 37,\n      hobbies: ['fishing']\n    }, {\n      name: 'Homer Dietrich',\n      email: 'Hershel_Barrows48@gmail.com',\n      isAdmin: true,\n      age: 24,\n      hobbies: ['archery']\n    }, {\n      name: 'Karla Hayes',\n      email: 'Daisy18@gmail.com',\n      isAdmin: false,\n      age: 19,\n      hobbies: ['camping', 'cooking']\n    }, {\n      name: 'Stacy Moen',\n      email: 'Keeley.Wolf60@yahoo.com',\n      isAdmin: false,\n      age: 36,\n      hobbies: null\n    }, {\n      name: 'Clifton Koelpin',\n      email: 'Erick.Herzog49@gmail.com',\n      isAdmin: false,\n      age: undefined,\n      hobbies: undefined\n    }, {\n      name: 'Olive Debra Abernathy',\n      email: 'Nellie39@gmail.com',\n      isAdmin: false,\n      age: null,\n      hobbies: false\n    }, {\n      name: 'Debra Feil',\n      email: 'Roberta26@hotmail.com',\n      isAdmin: true,\n      age: 33,\n      hobbies: ['baseball']\n    }, {\n      name: 'Ms. Melody Kreiger',\n      email: 'Toni85@gmail.com',\n      isAdmin: false,\n      age: 29,\n      hobbies: ['LARP', 'D&D']\n    }, {\n      name: 'Lyle Halvorson II',\n      email: 'Rose9@gmail.com',\n      isAdmin: false,\n      age: 37,\n      hobbies: ['water polo']\n    }, {\n      name: 'Mr. Belinda Emard Sr.',\n      email: 'Jared.Kuhn@hotmail.com',\n      isAdmin: false,\n      age: 35,\n      hobbies: ['photography']\n    }];\n    async function renderComponent() {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiFilter\n              @records={{this.recordSet}}\n              @filterRules={{this.filterRules}}\n              @filterMethod={{this.filterMethod}}\n              @updateDelay={{16}}\n              @advancedQueryUpdateDelay={{16}}\n            as |Filter|>\n              <Filter.Input\n                @filters={{this.filters}}\n                @showClearButton={{this.showClearButton}}\n              />\n      \n              <table>\n                <tbody>\n                  {{#each Filter.filteredRecords as |record|}}\n                    <tr>\n                      <td>{{record.name}}</td>\n                      <td>{{record.email}}</td>\n                      <td>{{if record.isAdmin 'Admin' 'Non-Admin'}}</td>\n                    </tr>\n                  {{/each}}\n                </tbody>\n              </table>\n            </UiFilter>\n          \n      */\n      {\n        \"id\": \"duOHHXTM\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\",\\\"@filterRules\\\",\\\"@filterMethod\\\",\\\"@updateDelay\\\",\\\"@advancedQueryUpdateDelay\\\"],[[30,0,[\\\"recordSet\\\"]],[30,0,[\\\"filterRules\\\"]],[30,0,[\\\"filterMethod\\\"]],16,16]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Input\\\"]],null,[[\\\"@filters\\\",\\\"@showClearButton\\\"],[[30,0,[\\\"filters\\\"]],[30,0,[\\\"showClearButton\\\"]]]],null],[1,\\\"\\\\n\\\\n        \\\"],[10,\\\"table\\\"],[12],[1,\\\"\\\\n          \\\"],[10,\\\"tbody\\\"],[12],[1,\\\"\\\\n\\\"],[42,[28,[37,2],[[28,[37,2],[[30,1,[\\\"filteredRecords\\\"]]],null]],null],null,[[[1,\\\"              \\\"],[10,\\\"tr\\\"],[12],[1,\\\"\\\\n                \\\"],[10,\\\"td\\\"],[12],[1,[30,2,[\\\"name\\\"]]],[13],[1,\\\"\\\\n                \\\"],[10,\\\"td\\\"],[12],[1,[30,2,[\\\"email\\\"]]],[13],[1,\\\"\\\\n                \\\"],[10,\\\"td\\\"],[12],[1,[52,[30,2,[\\\"isAdmin\\\"]],\\\"Admin\\\",\\\"Non-Admin\\\"]],[13],[1,\\\"\\\\n              \\\"],[13],[1,\\\"\\\\n\\\"]],[2]],null],[1,\\\"          \\\"],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Filter\\\",\\\"record\\\"],false,[\\\"ui-filter\\\",\\\"each\\\",\\\"-track-array\\\",\\\"if\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n    }\n    (0, _qunit.test)('it filters an array using string filter rules', async function (assert) {\n      this.set('recordSet', recordSet);\n      this.set('filterRules', ['name', 'email', 'doesNotExist']);\n      await renderComponent();\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom('input[type=\"text\"]').hasNoValue();\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', '@hotmail.com');\n      assert.dom('table tbody tr').exists({\n        count: 4\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', '@noexist.com');\n      assert.dom('table tbody tr').doesNotExist();\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', '');\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n    });\n    (0, _qunit.test)('it filters an array using object filter rules', async function (assert) {\n      this.set('recordSet', recordSet);\n      this.set('filterRules', [{\n        propertyName: 'name',\n        startsWith: true,\n        caseSensitive: true\n      }, {\n        propertyName: 'email',\n        exactMatch: true\n      }, {\n        propertyName: 'isAdmin',\n        exactMatch: true,\n        booleanMap: ['Admin', 'Non-Admin']\n      }, 'age']);\n      await renderComponent();\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom('input[type=\"text\"]').hasNoValue();\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', '@hotmail.com');\n      assert.dom('table tbody tr').doesNotExist();\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'Hershel_Barrows48@gmail.com');\n      assert.dom('table tbody tr').exists({\n        count: 1\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'Mr.');\n      assert.dom('table tbody tr').exists({\n        count: 2\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'debra');\n      assert.dom('table tbody tr').doesNotExist();\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'Debra');\n      assert.dom('table tbody tr').exists({\n        count: 1\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', '37');\n      assert.dom('table tbody tr').exists({\n        count: 3\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'Admin');\n      assert.dom('table tbody tr').exists({\n        count: 4\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'Non-Admin');\n      assert.dom('table tbody tr').exists({\n        count: 11\n      });\n    });\n    (0, _qunit.test)('it filters an array using a custom method', async function (assert) {\n      this.set('recordSet', recordSet);\n      this.set('filterMethod', function (term, records) {\n        const regex = new RegExp(term, 'i');\n        return records.filter(record => {\n          return regex.test(record.name) || regex.test(record.age?.toString() ?? '');\n        });\n      });\n      await renderComponent();\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom('input[type=\"text\"]').hasNoValue();\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', '37');\n      assert.dom('table tbody tr').exists({\n        count: 3\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'Mr.');\n      assert.dom('table tbody tr').exists({\n        count: 2\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'Non-Admin');\n      assert.dom('table tbody tr').doesNotExist();\n    });\n    (0, _qunit.test)('it filters an array using the query parser', async function (assert) {\n      this.set('recordSet', recordSet);\n      await renderComponent();\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom('input[type=\"text\"]').hasNoValue();\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: age EQUALS 37');\n      assert.dom('table tbody tr').exists({\n        count: 3\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: name DOES NOT START WITH \"Lyle\"');\n      assert.dom('table tbody tr').exists({\n        count: 14\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: age EQUALS null OR age EQUALS undefined');\n      assert.dom('table tbody tr').exists({\n        count: 2\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: name DOES NOT END WITH \"Feil\"');\n      assert.dom('table tbody tr').exists({\n        count: 13\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: age EQUALS 37 AND name STARTS WITH \"Lyle\"');\n      assert.dom('table tbody tr').exists({\n        count: 1\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: email INCLUDES \"hotmail\"');\n      assert.dom('table tbody tr').exists({\n        count: 4\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: hobbies INCLUDES \"cooking\"');\n      assert.dom('table tbody tr').exists({\n        count: 1\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: (isAdmin EQUALS true AND name ENDS WITH \"Yundt\") OR isAdmin DOES NOT EQUAL true');\n      assert.dom('table tbody tr').exists({\n        count: 12\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: (isAdmin EQUALS true AND (name ENDS WITH \"Yundt\" OR name INCLUDES \"ebra Fei\")) OR isAdmin DOES NOT EQUAL true');\n      assert.dom('table tbody tr').exists({\n        count: 13\n      });\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: (age EQUALS 37');\n      assert.dom('.tooltip-danger').containsText('does not have a closing brace');\n      await (0, _testHelpers.fillIn)('input[type=\"text\"]', 'QUERY: age FOO 37');\n      assert.dom('.tooltip-danger').containsText('Unexpected value \"FOO\"');\n    });\n    (0, _qunit.test)('it can be given pre-determined filter values', async function (assert) {\n      this.set('recordSet', recordSet);\n      this.set('filterRules', ['name', 'email']);\n      this.set('showClearButton', true);\n      this.set('filters', [{\n        label: 'People Named Homer',\n        value: 'Homer'\n      }, {\n        label: 'Non-Hotmail Addresses',\n        value: 'QUERY: email DOES NOT END WITH \"@hotmail.com\"'\n      }]);\n      await renderComponent();\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom('input[type=\"text\"]').hasNoValue();\n      const menuId = `#${(0, _testHelpers.find)('.input-group button')?.getAttribute('aria-controls')}`;\n      assert.dom('.input-group button').hasText('Filters');\n      assert.dom(menuId).exists().isNotVisible();\n      await (0, _testHelpers.click)('.input-group button');\n      assert.dom(menuId).isVisible();\n      assert.dom(`${menuId} button`).exists({\n        count: 2\n      });\n      assert.dom(`${menuId} button:nth-child(1)`).hasText('People Named Homer');\n      assert.dom(`${menuId} button:nth-child(2)`).hasText('Non-Hotmail Addresses');\n      await (0, _testHelpers.click)(`${menuId} button:nth-child(2)`);\n      assert.dom(menuId).exists().isNotVisible();\n      assert.dom('input[type=\"text\"]').isFocused().hasValue('QUERY: email DOES NOT END WITH \"@hotmail.com\"');\n      assert.dom('table tbody tr').exists({\n        count: 11\n      });\n      assert.dom('.input-group .input-group-btn:last-child button').hasAria('label', 'Reset Filter Input Field');\n      await (0, _testHelpers.click)('.input-group .input-group-btn:last-child button');\n      assert.dom('input[type=\"text\"]').hasNoValue();\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-heading-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@nsf-open/ember-ui-foundation/constants\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _constants) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\",0,\"@nsf-open/ember-ui-foundation/constants\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-heading', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it will render the heading levels H1 - H6', async function (assert) {\n      this.set('level', _constants.HeadingLevels.H1);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiHeading @level={{this.level}} @text=\"Hello World\" @class=\"a-heading-class\" />\n      */\n      {\n        \"id\": \"E3K5E1Y8\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@level\\\",\\\"@text\\\",\\\"@class\\\"],[[30,0,[\\\"level\\\"]],\\\"Hello World\\\",\\\"a-heading-class\\\"]],null]],[],false,[\\\"ui-heading\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('h1').hasText('Hello World');\n      assert.dom('h1').hasClass('a-heading-class');\n      this.set('level', _constants.HeadingLevels.H2);\n      assert.dom('h2').hasText('Hello World');\n      this.set('level', _constants.HeadingLevels.H3);\n      assert.dom('h3').hasText('Hello World');\n      this.set('level', _constants.HeadingLevels.H4);\n      assert.dom('h4').hasText('Hello World');\n      this.set('level', _constants.HeadingLevels.H5);\n      assert.dom('h5').hasText('Hello World');\n      this.set('level', _constants.HeadingLevels.H6);\n      assert.dom('h6').hasText('Hello World');\n    });\n    (0, _qunit.test)('it will render the heading levels H1 - H6 with a content block', async function (assert) {\n      this.set('level', _constants.HeadingLevels.H1);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiHeading @level={{this.level}} @class=\"a-heading-class\">Hello World</UiHeading>\n      */\n      {\n        \"id\": \"ZjKzrZO+\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@level\\\",\\\"@class\\\"],[[30,0,[\\\"level\\\"]],\\\"a-heading-class\\\"]],[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]]],[],false,[\\\"ui-heading\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('h1').hasText('Hello World');\n      assert.dom('h1').hasClass('a-heading-class');\n      this.set('level', _constants.HeadingLevels.H2);\n      assert.dom('h2').hasText('Hello World');\n      this.set('level', _constants.HeadingLevels.H3);\n      assert.dom('h3').hasText('Hello World');\n      this.set('level', _constants.HeadingLevels.H4);\n      assert.dom('h4').hasText('Hello World');\n      this.set('level', _constants.HeadingLevels.H5);\n      assert.dom('h5').hasText('Hello World');\n      this.set('level', _constants.HeadingLevels.H6);\n      assert.dom('h6').hasText('Hello World');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-icon-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-icon', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a span element with Font Awesome class names', async function (assert) {\n      this.set('iconName', 'superpowers');\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiIcon @name=\"{{this.iconName}}\" />\n      */\n      {\n        \"id\": \"i3gM33cW\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@name\\\"],[[29,[[30,0,[\\\"iconName\\\"]]]]]],null]],[],false,[\\\"ui-icon\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span').exists();\n      assert.dom('span').hasAria('hidden', 'true');\n      assert.dom('span').hasClass('fa');\n      assert.dom('span').hasClass('fa-superpowers');\n      this.set('iconName', 'mail');\n      assert.dom('span').hasClass('fa-mail');\n    });\n    (0, _qunit.test)('it supports fixed width icons', async function (assert) {\n      this.set('iconName', 'superpowers');\n      this.set('fixedWidth', false);\n      await (0, _testHelpers.render)( // language=Handlebars\n      (0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiIcon @name=\"{{this.iconName}}\" @fw={{this.fixedWidth}} />\n      */\n      {\n        \"id\": \"cDsxx/tb\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@name\\\",\\\"@fw\\\"],[[29,[[30,0,[\\\"iconName\\\"]]]],[30,0,[\\\"fixedWidth\\\"]]]],null]],[],false,[\\\"ui-icon\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span').hasClass('fa');\n      assert.dom('span').hasClass('fa-superpowers');\n      assert.dom('span').doesNotHaveClass('fa-fw');\n      this.set('fixedWidth', true);\n      assert.dom('span').hasClass('fa-superpowers');\n      assert.dom('span').hasClass('fa-fw');\n      this.set('iconName', 'mail');\n      assert.dom('span').hasClass('fa-mail');\n      assert.dom('span').hasClass('fa-fw');\n    });\n    (0, _qunit.test)('it supports spinning icons', async function (assert) {\n      this.set('iconName', 'superpowers');\n      this.set('spin', false);\n      await (0, _testHelpers.render)( // language=Handlebars\n      (0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiIcon @name=\"{{this.iconName}}\" @spin={{this.spin}} />\n      */\n      {\n        \"id\": \"UJKGh/4r\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@name\\\",\\\"@spin\\\"],[[29,[[30,0,[\\\"iconName\\\"]]]],[30,0,[\\\"spin\\\"]]]],null]],[],false,[\\\"ui-icon\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span').hasClass('fa');\n      assert.dom('span').hasClass('fa-superpowers');\n      assert.dom('span').doesNotHaveClass('fa-spin');\n      this.set('spin', true);\n      assert.dom('span').hasClass('fa-superpowers');\n      assert.dom('span').hasClass('fa-spin');\n      this.set('iconName', 'mail');\n      assert.dom('span').hasClass('fa-mail');\n      assert.dom('span').hasClass('fa-spin');\n    });\n    (0, _qunit.test)('it has a special pending style that will always show a loading spinner', async function (assert) {\n      this.set('iconName', 'superpowers');\n      this.set('pending', false);\n      await (0, _testHelpers.render)( // language=Handlebars\n      (0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiIcon @name=\"{{this.iconName}}\" @pending={{this.pending}} />\n      */\n      {\n        \"id\": \"5ylFKsYX\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@name\\\",\\\"@pending\\\"],[[29,[[30,0,[\\\"iconName\\\"]]]],[30,0,[\\\"pending\\\"]]]],null]],[],false,[\\\"ui-icon\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span').hasClass('fa');\n      assert.dom('span').hasClass('fa-superpowers');\n      assert.dom('span').doesNotHaveClass('fa-spin');\n      assert.dom('span').doesNotHaveClass('fa-spinner');\n      this.set('pending', true);\n      assert.dom('span').doesNotHaveClass('fa-superpowers');\n      assert.dom('span').hasClass('fa-spin');\n      assert.dom('span').hasClass('fa-spinner');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-inline-text-icon-layout-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-inline-text-icon-layout', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders text', async function (assert) {\n      this.set('text', 'Hello World');\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiInlineTextIconLayout @text=\"{{this.text}}\" />\n      */\n      {\n        \"id\": \"UqUP5JpK\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\"],[[29,[[30,0,[\\\"text\\\"]]]]]],null]],[],false,[\\\"ui-inline-text-icon-layout\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom().hasText('Hello World');\n      assert.dom('span').doesNotExist();\n      this.set('text', 'foobar');\n      assert.dom().hasText('foobar');\n    });\n    (0, _qunit.test)('it renders an icon followed by text', async function (assert) {\n      this.set('icon', 'superpowers');\n\n      // Inline\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiInlineTextIconLayout @text=\"Hello World\" @icon=\"{{this.icon}}\" />\n      */\n      {\n        \"id\": \"22nu6xuR\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@icon\\\"],[\\\"Hello World\\\",[29,[[30,0,[\\\"icon\\\"]]]]]],null]],[],false,[\\\"ui-inline-text-icon-layout\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span:nth-child(1)').hasClass('fa');\n      assert.dom('span:nth-child(1)').hasClass('fa-superpowers');\n      assert.dom('span:nth-child(2)').hasText('Hello World');\n      assert.dom('span:nth-child(2)').hasClass('ml-5px');\n      this.set('icon', 'mail');\n      assert.dom('span:nth-child(1)').hasClass('fa-mail');\n    });\n    (0, _qunit.test)('it renders text followed by an icon', async function (assert) {\n      this.set('icon', 'superpowers');\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiInlineTextIconLayout @text=\"Hello World\" @icon=\"{{this.icon}}\" @iconPlacement=\"right\" />\n      */\n      {\n        \"id\": \"9dc0AX8I\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@icon\\\",\\\"@iconPlacement\\\"],[\\\"Hello World\\\",[29,[[30,0,[\\\"icon\\\"]]]],\\\"right\\\"]],null]],[],false,[\\\"ui-inline-text-icon-layout\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span:nth-child(1)').hasText('Hello World');\n      assert.dom('span:nth-child(1)').hasClass('mr-5px');\n      assert.dom('span:nth-child(2)').hasClass('fa');\n      assert.dom('span:nth-child(2)').hasClass('fa-superpowers');\n      this.set('icon', 'mail');\n      assert.dom('span:nth-child(2)').hasClass('fa-mail');\n    });\n    (0, _qunit.test)('it will not render an empty text span next to an icon', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiInlineTextIconLayout @icon=\"superpowers\" />\n      */\n      {\n        \"id\": \"PiiGBeiS\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@icon\\\"],[\\\"superpowers\\\"]],null]],[],false,[\\\"ui-inline-text-icon-layout\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span:nth-child(1)').hasClass('fa');\n      assert.dom('span:nth-child(2)').doesNotExist();\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiInlineTextIconLayout @icon=\"superpowers\"></UiInlineTextIconLayout>\n      */\n      {\n        \"id\": \"Qo8/ksmV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@icon\\\"],[\\\"superpowers\\\"]],[[\\\"default\\\"],[[[],[]]]]]],[],false,[\\\"ui-inline-text-icon-layout\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span:nth-child(1)').hasClass('fa');\n      assert.dom('span:nth-child(2)').exists();\n    });\n    (0, _qunit.test)('it will provide a responsive class name to hide text when required', async function (assert) {\n      this.set('icon', 'superpowers');\n      this.set('responsive', false);\n      await (0, _testHelpers.render)( // language=Handlebars\n      (0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiInlineTextIconLayout @text=\"Hello World\" @icon=\"{{this.icon}}\" @responsive={{this.responsive}} />\n      */\n      {\n        \"id\": \"JamFhiWT\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@icon\\\",\\\"@responsive\\\"],[\\\"Hello World\\\",[29,[[30,0,[\\\"icon\\\"]]]],[30,0,[\\\"responsive\\\"]]]],null]],[],false,[\\\"ui-inline-text-icon-layout\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n\n      // With icon but not responsive flag\n      assert.dom('span:nth-child(2)').hasText('Hello World');\n      assert.dom('span:nth-child(2)').hasClass('ml-5px');\n      assert.dom('span:nth-child(2)').doesNotHaveClass('hidden-sm-down');\n\n      // With icon and responsive flag\n      this.set('responsive', true);\n      assert.dom('span:nth-child(2)').hasClass('ml-5px');\n      assert.dom('span:nth-child(2)').hasClass('hidden-sm-down');\n\n      // Without an icon, responsiveness would just mean the text disappearing\n      this.set('icon', undefined);\n      assert.dom('span:nth-child(1)').doesNotExist();\n      assert.dom('span:nth-child(2)').doesNotExist();\n    });\n    (0, _qunit.test)('it has a special tooltip style that will always show a tip icon', async function (assert) {\n      this.set('icon', 'superpowers');\n      this.set('responsive', true);\n      this.set('tooltip', undefined);\n      await (0, _testHelpers.render)( // language=Handlebars\n      (0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiInlineTextIconLayout\n                      @text=\"Foo\"\n                      @icon=\"{{this.icon}}\"\n                      @responsive={{this.responsive}}\n                      @tooltip=\"{{this.tooltip}}\"\n              />\n      */\n      {\n        \"id\": \"VZVto6NX\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\",\\\"@icon\\\",\\\"@responsive\\\",\\\"@tooltip\\\"],[\\\"Foo\\\",[29,[[30,0,[\\\"icon\\\"]]]],[30,0,[\\\"responsive\\\"]],[29,[[30,0,[\\\"tooltip\\\"]]]]]],null]],[],false,[\\\"ui-inline-text-icon-layout\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('span:nth-child(1)').hasClass('fa-superpowers');\n      assert.dom('span:nth-child(2)').hasText('Foo');\n      assert.dom('span:nth-child(2)').hasClass('ml-5px');\n      assert.dom('span:nth-child(2)').hasClass('hidden-sm-down');\n\n      // The tooltip icon should always come after the text content\n      this.set('tooltip', 'Hello World');\n      assert.dom('span:nth-child(2)').hasClass('fa-question-circle');\n      assert.dom('span:nth-child(1)').hasText('Foo');\n      assert.dom('span:nth-child(1)').hasClass('mr-5px');\n      // Don't hide tooltip icon text\n      assert.dom('span:nth-child(1)').doesNotHaveClass('hidden-sm-down');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-load-indicator-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-load-indicator', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a spinner', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiLoadIndicator />\n      */\n      {\n        \"id\": \"clf1YF75\",\n        \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"ui-load-indicator\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').isVisible();\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(1)').hasClass('text-center');\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(1) span').hasClass('fa');\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(1) span').hasClass('fa-spinner');\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(1) span').hasClass('fa-4x');\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(2)').hasClass('text-center');\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(2)').hasText('Loading...');\n    });\n    (0, _qunit.test)('it shows custom loading text', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiLoadIndicator @text=\"Heavy lifting in progress\" />\n      */\n      {\n        \"id\": \"Y4sxq4CH\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@text\\\"],[\\\"Heavy lifting in progress\\\"]],null]],[],false,[\\\"ui-load-indicator\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(2)').hasText('Heavy lifting in progress');\n    });\n    (0, _qunit.test)('it shows multiple animation styles', async function (assert) {\n      this.set('animation', 'spin');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiLoadIndicator @animation={{this.animation}} />\n      */\n      {\n        \"id\": \"zWhaKzE6\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@animation\\\"],[[30,0,[\\\"animation\\\"]]]],null]],[],false,[\\\"ui-load-indicator\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(1) span').hasClass('fa-spin');\n      this.set('animation', 'pulse');\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(1) span').hasClass('fa-pulse');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-lorem-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-lorem', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it will generate the given number of words', async function (assert) {\n      this.set('count', 4);\n      this.set('units', 'word');\n\n      // language=hbs\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiLorem @count={{this.count}} @units={{this.units}} />\n      */\n      {\n        \"id\": \"ZscHAM6X\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@count\\\",\\\"@units\\\"],[[30,0,[\\\"count\\\"]],[30,0,[\\\"units\\\"]]]],null]],[],false,[\\\"ui-lorem\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _testHelpers.getRootElement)().textContent?.split(' ').length, 4, 'it generated 4 words');\n      this.set('count', 10);\n      assert.strictEqual((0, _testHelpers.getRootElement)().textContent?.split(' ').length, 10, 'it generated 10 words');\n    });\n    (0, _qunit.test)('it will generate the given number of sentences', async function (assert) {\n      this.set('count', 4);\n      this.set('units', 'sentence');\n\n      // language=hbs\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiLorem @count={{this.count}} @units={{this.units}} />\n      */\n      {\n        \"id\": \"ZscHAM6X\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@count\\\",\\\"@units\\\"],[[30,0,[\\\"count\\\"]],[30,0,[\\\"units\\\"]]]],null]],[],false,[\\\"ui-lorem\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _testHelpers.getRootElement)().textContent?.split('. ').length, 4, 'it generated 4 sentences');\n      this.set('count', 10);\n      assert.strictEqual((0, _testHelpers.getRootElement)().textContent?.split('. ').length, 10, 'it generated 10 sentences');\n    });\n    (0, _qunit.test)('it will generate the given number of paragraphs', async function (assert) {\n      this.set('count', 4);\n      this.set('units', 'paragraph');\n\n      // language=hbs\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiLorem @count={{this.count}} @units={{this.units}} />\n      */\n      {\n        \"id\": \"ZscHAM6X\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@count\\\",\\\"@units\\\"],[[30,0,[\\\"count\\\"]],[30,0,[\\\"units\\\"]]]],null]],[],false,[\\\"ui-lorem\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _testHelpers.findAll)('p').length, 4, 'it generated 4 paragraphs');\n      this.set('count', 10);\n      assert.strictEqual((0, _testHelpers.findAll)('p').length, 10, 'it generated 10 paragraphs');\n    });\n    (0, _qunit.test)('the number of words in a sentence can be controlled', async function (assert) {\n      this.set('count', 1);\n      this.set('units', 'sentence');\n      this.set('wordsPerSentence', {\n        min: 8,\n        max: 8\n      });\n\n      // language=hbs\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiLorem @count={{this.count}} @units={{this.units}} @wordsPerSentence={{this.wordsPerSentence}} />\n      */\n      {\n        \"id\": \"BPDixcDE\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@count\\\",\\\"@units\\\",\\\"@wordsPerSentence\\\"],[[30,0,[\\\"count\\\"]],[30,0,[\\\"units\\\"]],[30,0,[\\\"wordsPerSentence\\\"]]]],null]],[],false,[\\\"ui-lorem\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _testHelpers.getRootElement)().textContent?.split(' ').length, 8, 'it generated 8 words');\n    });\n    (0, _qunit.test)('the number of sentences in a paragraph can be controlled', async function (assert) {\n      this.set('count', 1);\n      this.set('units', 'paragraph');\n      this.set('sentencesPerParagraph', {\n        min: 8,\n        max: 8\n      });\n\n      // language=hbs\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiLorem @count={{this.count}} @units={{this.units}} @sentencesPerParagraph={{this.sentencesPerParagraph}} />\n      */\n      {\n        \"id\": \"IqmtqgeV\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@count\\\",\\\"@units\\\",\\\"@sentencesPerParagraph\\\"],[[30,0,[\\\"count\\\"]],[30,0,[\\\"units\\\"]],[30,0,[\\\"sentencesPerParagraph\\\"]]]],null]],[],false,[\\\"ui-lorem\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _testHelpers.getRootElement)().textContent?.split('. ').length, 8, 'it generated 8 sentences');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-menu-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-menu', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it opens and closes a flyout menu', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#ui-menu \"Align\" testId=\"menu\" as |Menu|}}\n              {{Menu.Item \"Left\"}}\n              {{Menu.Item \"Right\"}}\n              {{Menu.Item \"Center\"}}\n            {{/ui-menu}}\n          \n      */\n      {\n        \"id\": \"kWHo9Ob7\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],[\\\"Align\\\"],[[\\\"testId\\\"],[\\\"menu\\\"]],[[\\\"default\\\"],[[[[1,\\\"        \\\"],[1,[28,[30,1,[\\\"Item\\\"]],[\\\"Left\\\"],null]],[1,\\\"\\\\n        \\\"],[1,[28,[30,1,[\\\"Item\\\"]],[\\\"Right\\\"],null]],[1,\\\"\\\\n        \\\"],[1,[28,[30,1,[\\\"Item\\\"]],[\\\"Center\\\"],null]],[1,\\\"\\\\n\\\"]],[1]]]]],[1,\\\"    \\\"]],[\\\"Menu\\\"],false,[\\\"ui-menu\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const trigger = (0, _testHelpers.find)('button[data-test-id=\"menu\"]');\n      const overlay = (0, _testHelpers.find)('div[data-test-id=\"menu\"]');\n      assert.dom(trigger).isVisible();\n      assert.dom(trigger).hasText('Align');\n      assert.dom(trigger).hasAttribute('aria-haspopup', 'true');\n      assert.dom(trigger).hasAttribute('aria-expanded', 'false');\n      assert.dom(trigger).hasAttribute('aria-controls', overlay.id);\n      assert.dom(overlay).isNotVisible();\n      await (0, _testHelpers.click)(trigger);\n      assert.dom(trigger).hasAttribute('aria-expanded', 'true');\n      assert.dom(overlay).isVisible();\n      assert.dom('button:nth-child(1)', overlay).isFocused();\n      await (0, _testHelpers.click)(trigger);\n      assert.dom(trigger).hasAttribute('aria-expanded', 'false');\n      assert.dom(overlay).isNotVisible();\n    });\n    (0, _qunit.test)('it can be navigated by keyboard', async function (assert) {\n      this.set('handleClick', function (name) {\n        assert.step(name);\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#ui-menu \"Align\" testId=\"menu\" as |Menu|}}\n              {{Menu.Item \"Left\" onClick=(action this.handleClick \"left\")}}\n              {{Menu.Item \"Right\" disabled=true}}\n              {{Menu.Item \"Center\" onClick=(action this.handleClick \"right\")}}\n            {{/ui-menu}}\n          \n      */\n      {\n        \"id\": \"9awHLMpt\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[6,[39,0],[\\\"Align\\\"],[[\\\"testId\\\"],[\\\"menu\\\"]],[[\\\"default\\\"],[[[[1,\\\"        \\\"],[1,[28,[30,1,[\\\"Item\\\"]],[\\\"Left\\\"],[[\\\"onClick\\\"],[[28,[37,1],[[30,0],[30,0,[\\\"handleClick\\\"]],\\\"left\\\"],null]]]]],[1,\\\"\\\\n        \\\"],[1,[28,[30,1,[\\\"Item\\\"]],[\\\"Right\\\"],[[\\\"disabled\\\"],[true]]]],[1,\\\"\\\\n        \\\"],[1,[28,[30,1,[\\\"Item\\\"]],[\\\"Center\\\"],[[\\\"onClick\\\"],[[28,[37,1],[[30,0],[30,0,[\\\"handleClick\\\"]],\\\"right\\\"],null]]]]],[1,\\\"\\\\n\\\"]],[1]]]]],[1,\\\"    \\\"]],[\\\"Menu\\\"],false,[\\\"ui-menu\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const trigger = (0, _testHelpers.find)('button[data-test-id=\"menu\"]');\n      const overlay = (0, _testHelpers.find)('div[data-test-id=\"menu\"]');\n      assert.dom(overlay).isNotVisible();\n      await (0, _testHelpers.focus)(trigger);\n\n      // Should open an focus on first option\n      await (0, _testHelpers.triggerKeyEvent)(trigger, 'keyup', 'ArrowDown');\n      assert.dom(overlay).isVisible();\n      assert.dom('button:nth-child(1)', overlay).isFocused();\n\n      // Second option is disabled, should move to third\n      await (0, _testHelpers.triggerKeyEvent)(overlay, 'keyup', 'ArrowDown');\n      assert.dom('button:nth-child(3)', overlay).isFocused();\n\n      // Should loop back to first option\n      await (0, _testHelpers.triggerKeyEvent)(overlay, 'keyup', 'ArrowDown');\n      assert.dom('button:nth-child(1)', overlay).isFocused();\n\n      // Should loop back to third option\n      await (0, _testHelpers.triggerKeyEvent)(overlay, 'keyup', 'ArrowUp');\n      assert.dom('button:nth-child(3)', overlay).isFocused();\n\n      // Second option is disabled, should move to first\n      await (0, _testHelpers.triggerKeyEvent)(overlay, 'keyup', 'ArrowUp');\n      assert.dom('button:nth-child(1)', overlay).isFocused();\n\n      // Should close and return focus to trigger\n      await (0, _testHelpers.triggerKeyEvent)(overlay, 'keyup', 'Escape');\n      assert.dom(overlay).isNotVisible();\n      assert.dom(trigger).isFocused();\n\n      // Should close after clicking an option\n      await (0, _testHelpers.triggerKeyEvent)(trigger, 'keyup', 'ArrowDown');\n      assert.dom('button:nth-child(1)', overlay).isFocused();\n      await (0, _testHelpers.click)(overlay.querySelector('button:nth-child(1)') || '');\n      assert.dom(overlay).isNotVisible();\n      assert.dom(trigger).isFocused();\n\n      // Should close when focus in on the trigger and the up arrow is typed\n      await (0, _testHelpers.click)(trigger);\n      assert.dom(overlay).isVisible();\n      await (0, _testHelpers.focus)(trigger);\n      await (0, _testHelpers.triggerKeyEvent)(trigger, 'keyup', 'ArrowUp');\n      assert.dom(overlay).isNotVisible();\n\n      // Should close when focus is on the trigger and the escape key is typed\n      await (0, _testHelpers.click)(trigger);\n      assert.dom(overlay).isVisible();\n      await (0, _testHelpers.focus)(trigger);\n      await (0, _testHelpers.triggerKeyEvent)(trigger, 'keyup', 'Escape');\n      assert.dom(overlay).isNotVisible();\n      assert.verifySteps(['left']);\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-modal-test\", [\"@ember/template-factory\", \"@ember/object\", \"qunit\", \"ember-qunit\", \"ember-concurrency\", \"@ember/test-helpers\", \"@nsf-open/ember-ui-foundation/lib/MessageManager\"], function (_templateFactory, _object, _qunit, _emberQunit, _emberConcurrency, _testHelpers, _MessageManager) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"@ember/object\",0,\"qunit\",0,\"ember-qunit\",0,\"ember-cli-htmlbars\",0,\"ember-concurrency\",0,\"@ember/test-helpers\",0,\"@nsf-open/ember-ui-foundation/lib/MessageManager\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-modal', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a modal window that can be opened and closed', async function (assert) {\n      this.set('isOpen', false);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @title=\"Hello World\" @testId=\"modal\" @open={{this.isOpen}}>\n              <p>Content Goes Here</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"6Y9iC8Su\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\"],[\\\"Hello World\\\",\\\"modal\\\",[30,0,[\\\"isOpen\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.modal-backdrop').doesNotExist();\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n      this.set('isOpen', true);\n      await (0, _testHelpers.waitFor)('.modal-backdrop');\n      assert.dom('.modal-backdrop').hasClass('fade');\n      assert.dom('.modal-backdrop').hasClass('in');\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n      await (0, _testHelpers.waitFor)('[data-test-id=\"modal\"]');\n      assert.dom('[data-test-id=\"modal\"]').hasClass('fade');\n      assert.dom('[data-test-id=\"modal\"]').hasStyle({\n        opacity: '0'\n      });\n      await (0, _testHelpers.waitFor)('[data-test-id=\"modal\"].fade.in');\n      assert.dom('[data-test-id=\"modal\"]').hasClass('in');\n      assert.dom('[data-test-id=\"modal\"] .modal-dialog').exists();\n      await (0, _testHelpers.waitUntil)(() => getComputedStyle((0, _testHelpers.find)('[data-test-id=\"modal\"]')).opacity === '1');\n      assert.dom('[data-test-id=\"modal\"]').hasAttribute('role', 'dialog');\n      assert.dom('[data-test-id=\"modal\"]').hasAttribute('tabindex', '-1');\n      assert.dom('[data-test-id=\"modal\"]').hasAttribute('aria-labelledby', (0, _testHelpers.find)('.modal-header')?.id || '');\n      assert.dom('[data-test-id=\"modal\"] .modal-dialog').isVisible();\n      assert.dom('[data-test-id=\"modal\"] .modal-dialog').hasAttribute('role', 'document');\n      assert.dom('[data-test-id=\"modal\"] .modal-dialog').hasClass('modal-md');\n      assert.dom('[data-test-id=\"modal\"] .modal-title').hasText('Hello World');\n      assert.dom('[data-test-id=\"modal\"] .modal-header button.close').isFocused();\n      assert.dom('[data-test-id=\"modal\"] .modal-body').hasText('Content Goes Here');\n      this.set('isOpen', false);\n      await (0, _testHelpers.settled)();\n      assert.dom('.modal-backdrop').doesNotExist();\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n    });\n    (0, _qunit.test)('it can be rendered directly into the open state', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @title=\"Hello World\" @testId=\"modal\" @open={{true}}>\n              <p>Content Goes Here</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"nzH7DtUC\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\"],[\\\"Hello World\\\",\\\"modal\\\",true]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"modal\"] .modal-dialog').isVisible();\n      assert.dom('[data-test-id=\"modal\"] .modal-title').hasText('Hello World');\n      assert.dom('[data-test-id=\"modal\"] .modal-header button.close').isFocused();\n      assert.dom('[data-test-id=\"modal\"] .modal-body').hasText('Content Goes Here');\n    });\n    (0, _qunit.test)('it can be closed via the close button in the dialog header', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @title=\"Hello World\" @testId=\"modal\" @open={{true}}>\n              <p>Content Goes Here</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"nzH7DtUC\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\"],[\\\"Hello World\\\",\\\"modal\\\",true]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"modal\"] .modal-dialog').isVisible();\n      await (0, _testHelpers.click)('[data-test-id=\"modal\"] .modal-header button.close');\n      assert.dom('.modal-backdrop').doesNotExist();\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n    });\n    (0, _qunit.test)('it can be opened and closed via the modal service', async function (assert) {\n      const modal = this.owner.lookup('service:modal');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @title=\"Hello World\" @testId=\"modal\" @name=\"testModal\">\n              <p>Content Goes Here</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"+KmS0vkf\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@name\\\"],[\\\"Hello World\\\",\\\"modal\\\",\\\"testModal\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.modal-backdrop').doesNotExist();\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n      modal.open('testModal');\n      await (0, _testHelpers.settled)();\n      assert.dom('.modal-backdrop').isVisible();\n      assert.dom('[data-test-id=\"modal\"]').isVisible();\n      modal.close();\n      await (0, _testHelpers.settled)();\n      assert.dom('.modal-backdrop').doesNotExist();\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n    });\n    (0, _qunit.test)('it can be dynamically passed data and a title via the modal service', async function (assert) {\n      const modal = this.owner.lookup('service:modal');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @testId=\"modal\" @name=\"testModal\" as |modal|>\n              <p>{{modal.data}}</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"UAGbLRT6\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@testId\\\",\\\"@name\\\"],[\\\"modal\\\",\\\"testModal\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,[30,1,[\\\"data\\\"]]],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      modal.open('testModal', 'Test modal content', 'Test modal title');\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"modal\"] .modal-title').hasText('Test modal title');\n      assert.dom('[data-test-id=\"modal\"] .modal-body').hasText('Test modal content');\n    });\n    (0, _qunit.test)('it will close one modal when another is requested to be opened', async function (assert) {\n      const modal = this.owner.lookup('service:modal');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @testId=\"modalA\" @name=\"testModalA\" as |modal|>\n              <p>{{modal.data}}</p>\n            </UiModal>\n      \n            <UiModal @testId=\"modalB\" @name=\"testModalB\" as |modal|>\n                <p>{{modal.data}}</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"yxcDyqiR\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@testId\\\",\\\"@name\\\"],[\\\"modalA\\\",\\\"testModalA\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,[30,1,[\\\"data\\\"]]],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n\\\\n      \\\"],[8,[39,0],null,[[\\\"@testId\\\",\\\"@name\\\"],[\\\"modalB\\\",\\\"testModalB\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,2],[12],[1,[30,2,[\\\"data\\\"]]],[13],[1,\\\"\\\\n      \\\"]],[2]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\",\\\"modal\\\"],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.modal-backdrop').doesNotExist();\n      assert.dom('[data-test-id=\"modalA\"]').doesNotExist();\n      assert.dom('[data-test-id=\"modalB\"]').doesNotExist();\n      modal.open('testModalA', 'Test Modal A Content', 'Test modal A Title');\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"modalA\"] .modal-title').hasText('Test modal A Title');\n      assert.dom('[data-test-id=\"modalA\"] .modal-body').hasText('Test Modal A Content');\n      assert.dom('.modal-backdrop').isVisible();\n      assert.dom('[data-test-id=\"modalB\"]').doesNotExist();\n      modal.open('testModalB', 'Test Modal B Content', 'Test modal B Title');\n      await (0, _testHelpers.waitUntil)(() => !document.querySelector('[data-test-id=\"modalA\"]'));\n\n      // The backdrop should never go away when transitioning between modals\n      assert.dom('.modal-backdrop').isVisible();\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"modalB\"] .modal-title').hasText('Test modal B Title');\n      assert.dom('[data-test-id=\"modalB\"] .modal-body').hasText('Test Modal B Content');\n      modal.close();\n      await (0, _testHelpers.settled)();\n      assert.dom('.modal-backdrop').doesNotExist();\n      assert.dom('[data-test-id=\"modalA\"]').doesNotExist();\n      assert.dom('[data-test-id=\"modalB\"]').doesNotExist();\n    });\n    (0, _qunit.test)('it allows an open modal to cancel the opening of a new modal', async function (assert) {\n      const modal = this.owner.lookup('service:modal');\n      this.set('canHideModal', function () {\n        assert.step('blocking');\n        return false;\n      });\n      this.set('showModalBlocked', function () {\n        assert.step('blocked');\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @testId=\"modalA\" @name=\"testModalA\" @onCanHide={{action this.canHideModal}} as |modal|>\n              <p>{{modal.data}}</p>\n            </UiModal>\n      \n            <UiModal @testId=\"modalB\" @name=\"testModalB\" @onHideBlocked={{action this.showModalBlocked}} as |modal|>\n                <p>{{modal.data}}</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"79uGzGpq\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@testId\\\",\\\"@name\\\",\\\"@onCanHide\\\"],[\\\"modalA\\\",\\\"testModalA\\\",[28,[37,1],[[30,0],[30,0,[\\\"canHideModal\\\"]]],null]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,[30,1,[\\\"data\\\"]]],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n\\\\n      \\\"],[8,[39,0],null,[[\\\"@testId\\\",\\\"@name\\\",\\\"@onHideBlocked\\\"],[\\\"modalB\\\",\\\"testModalB\\\",[28,[37,1],[[30,0],[30,0,[\\\"showModalBlocked\\\"]]],null]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,2],[12],[1,[30,2,[\\\"data\\\"]]],[13],[1,\\\"\\\\n      \\\"]],[2]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\",\\\"modal\\\"],false,[\\\"ui-modal\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      modal.open('testModalA', 'Test Modal A Content', 'Test modal A Title');\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"modalA\"]').isVisible();\n      assert.dom('[data-test-id=\"modalB\"]').doesNotExist();\n      modal.open('testModalB', 'Test Modal B Content', 'Test modal B Title');\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-id=\"modalA\"]').isVisible();\n      assert.dom('[data-test-id=\"modalB\"]').doesNotExist();\n      assert.verifySteps(['blocking', 'blocked']);\n    });\n    (0, _qunit.test)('it will clean up after itself if destroyed without being properly closed', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @title=\"Hello World\" @testId=\"modal\" @open={{true}}>\n              <p>Content Goes Here</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"nzH7DtUC\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\"],[\\\"Hello World\\\",\\\"modal\\\",true]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.modal-backdrop').isVisible();\n      assert.dom('[data-test-id=\"modal\"]').isVisible();\n      await (0, _testHelpers.clearRender)();\n      assert.dom('.modal-backdrop').isNotVisible();\n    });\n    (0, _qunit.test)('it can be opened with the \"open-modal\" helper', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <button\n              type=\"button\"\n              id=\"openModal\"\n              onclick={{open-modal \"testModal\" \"Test Modal Content\" \"Test Modal Title\"}}\n            >\n              Open Modal\n            </button>\n      \n            <UiModal @name=\"testModal\" @testId=\"modal\" as |modal|>\n              <p>{{modal.data}}</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"gw+l0iu9\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"openModal\\\"],[15,\\\"onclick\\\",[28,[37,0],[\\\"testModal\\\",\\\"Test Modal Content\\\",\\\"Test Modal Title\\\"],null]],[14,4,\\\"button\\\"],[12],[1,\\\"\\\\n        Open Modal\\\\n      \\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[8,[39,1],null,[[\\\"@name\\\",\\\"@testId\\\"],[\\\"testModal\\\",\\\"modal\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,[30,1,[\\\"data\\\"]]],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"open-modal\\\",\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.modal-backdrop').doesNotExist();\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n      await (0, _testHelpers.click)('#openModal');\n      assert.dom('.modal-backdrop').isVisible();\n      assert.dom('[data-test-id=\"modal\"]').isVisible();\n      assert.dom('[data-test-id=\"modal\"] .modal-title').hasText('Test Modal Title');\n      assert.dom('[data-test-id=\"modal\"] .modal-body').hasText('Test Modal Content');\n    });\n    (0, _qunit.test)('it traps focus inside the dialog', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @title=\"Hello World\" @testId=\"modal\" @open={{true}}>\n              <button type=\"button\" id=\"buttonA\">Button A</button>\n              <button type=\"button\" id=\"buttonB\">Button B</button>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"ZQi/zvSi\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\"],[\\\"Hello World\\\",\\\"modal\\\",true]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,\\\"button\\\"],[14,1,\\\"buttonA\\\"],[14,4,\\\"button\\\"],[12],[1,\\\"Button A\\\"],[13],[1,\\\"\\\\n        \\\"],[10,\\\"button\\\"],[14,1,\\\"buttonB\\\"],[14,4,\\\"button\\\"],[12],[1,\\\"Button B\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n\n      // See https://github.com/emberjs/ember-test-helpers/issues/738\n      // Some keyboard interaction are particularly difficult to fake with Javascript,\n      // and tabbing through focusable elements is one of them. For this, we only\n      // _really_ want to make sure that focus gets wrapped between first <-> last\n      // elements in the modal. Going out on a limb here that the browser is capable\n      // of handing everything in-between.\n\n      assert.dom('.modal-header button.close').isFocused();\n      await (0, _testHelpers.focus)('#buttonB');\n      assert.dom('#buttonB').isFocused();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-id=\"modal\"]', 'keydown', 'Tab');\n      assert.dom('.modal-header button.close').isFocused();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-id=\"modal\"]', 'keydown', 'Tab', {\n        shiftKey: true\n      });\n      assert.dom('#buttonB').isFocused();\n    });\n    (0, _qunit.test)('it supports the generic \"submission\" workflow by accepting a promise', async function (assert) {\n      this.set('handleSubmit', async function () {\n        assert.step('promise');\n        return (0, _emberConcurrency.timeout)(10);\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @title=\"Hello World\" @testId=\"modal\" @open={{true}} @onSubmit={{this.handleSubmit}} as |modal|>\n              <p>Content Goes Here</p>\n              {{modal.submitButton}}\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"bDe1nwSm\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\",\\\"@onSubmit\\\"],[\\\"Hello World\\\",\\\"modal\\\",true,[30,0,[\\\"handleSubmit\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n        \\\"],[1,[30,1,[\\\"submitButton\\\"]]],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.modal-body button.btn').isVisible();\n      assert.dom('.modal-body button.btn').hasText('Submit');\n      const clickPromise = (0, _testHelpers.click)('.modal-body button.btn');\n      await (0, _testHelpers.waitFor)('.modal-body button.btn:disabled');\n      assert.dom('.modal-body button.btn span:nth-child(1)').hasClass('fa-spinner');\n      assert.dom('.modal-body button.btn span:nth-child(1)').hasClass('fa-spin');\n      assert.dom('.modal-header button.close').isDisabled();\n      await clickPromise;\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n      assert.verifySteps(['promise']);\n    });\n    (0, _qunit.test)('it supports the generic \"submission\" workflow by accepting a concurrency task', async function (assert) {\n      this.set('taskWrapper',\n      // eslint-disable-next-line ember/no-classic-classes\n      _object.default.extend({\n        handleSubmit: (0, _emberConcurrency.task)(function* () {\n          assert.step('task');\n          yield (0, _emberConcurrency.timeout)(10);\n          return true;\n        })\n      }).create());\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal\n              @title=\"Hello World\"\n              @testId=\"modal\"\n              @open={{true}}\n              @onSubmit={{this.taskWrapper.handleSubmit}}\n            as |modal|>\n              <p>Content Goes Here</p>\n              {{modal.submitButton}}\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"U7FGM8z/\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\",\\\"@onSubmit\\\"],[\\\"Hello World\\\",\\\"modal\\\",true,[30,0,[\\\"taskWrapper\\\",\\\"handleSubmit\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n        \\\"],[1,[30,1,[\\\"submitButton\\\"]]],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.modal-body button.btn').isVisible();\n      assert.dom('.modal-body button.btn').hasText('Submit');\n      const clickPromise = (0, _testHelpers.click)('.modal-body button.btn');\n      await (0, _testHelpers.waitFor)('.modal-body button.btn:disabled');\n      assert.dom('.modal-body button.btn span:nth-child(1)').hasClass('fa-spinner');\n      assert.dom('.modal-body button.btn span:nth-child(1)').hasClass('fa-spin');\n      assert.dom('.modal-header button.close').isDisabled();\n      await clickPromise;\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n      assert.verifySteps(['task']);\n    });\n    (0, _qunit.test)('it runs a \"submission\" workflow concurrency task as unlinked so it continues running even if the modal is destroyed', async function (assert) {\n      this.set('taskWrapper',\n      // eslint-disable-next-line ember/no-classic-classes\n      _object.default.extend({\n        handleSubmit: (0, _emberConcurrency.task)(function* () {\n          yield (0, _emberConcurrency.timeout)(10);\n          assert.step('task');\n          return true;\n        })\n      }).create());\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n              <UiModal\n                @title=\"Hello World\"\n                @testId=\"modal\"\n                @open={{true}}\n                @onSubmit={{this.taskWrapper.handleSubmit}}\n              as |modal|>\n                <p>Content Goes Here</p>\n                {{modal.submitButton}}\n              </UiModal>\n            \n      */\n      {\n        \"id\": \"4wpqOelb\",\n        \"block\": \"[[[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\",\\\"@onSubmit\\\"],[\\\"Hello World\\\",\\\"modal\\\",true,[30,0,[\\\"taskWrapper\\\",\\\"handleSubmit\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n          \\\"],[1,[30,1,[\\\"submitButton\\\"]]],[1,\\\"\\\\n        \\\"]],[1]]]]],[1,\\\"\\\\n      \\\"]],[\\\"modal\\\"],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const clickPromise = (0, _testHelpers.click)('.modal-body button.btn');\n      await (0, _testHelpers.waitFor)('.modal-body button.btn:disabled');\n      await (0, _testHelpers.clearRender)();\n      await clickPromise;\n      assert.verifySteps(['task']);\n    });\n    (0, _qunit.test)('it renders a ui-alert-block if provided a MessageManager instance', async function (assert) {\n      const manager = new _MessageManager.default();\n      this.set('manager', manager);\n      manager.addSuccessMessages('Success Message A');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal @title=\"Hello World\" @testId=\"modal\" @open={{true}} @messageManager={{this.manager}} as |modal|>\n              <p>Content Goes Here</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"pLcSbavz\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\",\\\"@messageManager\\\"],[\\\"Hello World\\\",\\\"modal\\\",true,[30,0,[\\\"manager\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-success\"]').isVisible();\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-item\"]').hasText('Success Message A');\n    });\n    (0, _qunit.test)('it clears its ui-alert-block when closed', async function (assert) {\n      const manager = new _MessageManager.default();\n      this.set('manager', manager);\n      manager.addSuccessMessages('Success Message A');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <button data-test-modal-toggle onclick={{open-modal \"test-modal\"}}>Open Modal</button>\n            <UiModal\n              @title=\"Hello World\"\n              @testId=\"modal\"\n              @name=\"test-modal\"\n              @open={{true}}\n              @messageManager={{this.manager}}\n            as |modal|>\n              <p>Content Goes Here</p>\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"o4S0zOEc\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[14,\\\"data-test-modal-toggle\\\",\\\"\\\"],[15,\\\"onclick\\\",[28,[37,0],[\\\"test-modal\\\"],null]],[12],[1,\\\"Open Modal\\\"],[13],[1,\\\"\\\\n      \\\"],[8,[39,1],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@name\\\",\\\"@open\\\",\\\"@messageManager\\\"],[\\\"Hello World\\\",\\\"modal\\\",\\\"test-modal\\\",true,[30,0,[\\\"manager\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"open-modal\\\",\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-item\"]').hasText('Success Message A');\n      await (0, _testHelpers.click)('.modal-header button.close');\n      assert.dom('[data-test-id=\"modal\"]').doesNotExist();\n      await (0, _testHelpers.click)('button[data-test-modal-toggle]');\n      assert.dom('[data-test-id=\"modal\"]').isVisible();\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-item\"]').doesNotExist();\n    });\n    (0, _qunit.test)('it adds error messages to its ui-alert-block when an exception is thrown from its onSubmit method', async function (assert) {\n      const manager = new _MessageManager.default();\n      this.set('manager', manager);\n      this.set('handleSubmit', async function () {\n        throw new Error('Thrown Error Message');\n      });\n      manager.addSuccessMessages('Success Message A');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal\n              @title=\"Hello World\"\n              @testId=\"modal\"\n              @open={{true}}\n              @onSubmit={{this.handleSubmit}}\n              @messageManager={{this.manager}}\n            as |modal|>\n              <p>Content Goes Here</p>\n              {{modal.submitButton}}\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"AOdd7W2m\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\",\\\"@onSubmit\\\",\\\"@messageManager\\\"],[\\\"Hello World\\\",\\\"modal\\\",true,[30,0,[\\\"handleSubmit\\\"]],[30,0,[\\\"manager\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n        \\\"],[1,[30,1,[\\\"submitButton\\\"]]],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-success\"]').isVisible();\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-danger\"]').doesNotExist();\n      await (0, _testHelpers.click)('.modal-body button.btn');\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-success\"]').doesNotExist();\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-danger\"]').isVisible();\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-danger\"] [data-test-ident=\"context-message-item\"]').hasText('Thrown Error Message');\n    });\n    (0, _qunit.test)('it creates its own MessageManager if needed to display error messages thrown from onSubmit', async function (assert) {\n      this.set('handleSubmit', async function () {\n        throw new Error('Thrown Error Message');\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiModal\n              @title=\"Hello World\"\n              @testId=\"modal\"\n              @open={{true}}\n              @onSubmit={{this.handleSubmit}}\n            as |modal|>\n              <p>Content Goes Here</p>\n              {{modal.submitButton}}\n            </UiModal>\n          \n      */\n      {\n        \"id\": \"bDe1nwSm\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@title\\\",\\\"@testId\\\",\\\"@open\\\",\\\"@onSubmit\\\"],[\\\"Hello World\\\",\\\"modal\\\",true,[30,0,[\\\"handleSubmit\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n        \\\"],[1,[30,1,[\\\"submitButton\\\"]]],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"ui-modal\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-danger\"]').doesNotExist();\n      await (0, _testHelpers.click)('.modal-body button.btn');\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-danger\"]').isVisible();\n      assert.dom('[data-test-id=\"modal\"] [data-test-ident=\"context-message-danger\"] [data-test-ident=\"context-message-item\"]').hasText('Thrown Error Message');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-pager-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@faker-js/faker\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _faker) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"ember-cli-htmlbars\",0,\"@ember/test-helpers\",0,\"@faker-js/faker\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-pager', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    /**\n     * Create all the test records you'll ever need.\n     */\n    function generateRecordSet() {\n      let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 99;\n      const records = [];\n      for (let i = 0; i < count; i += 1) {\n        records.push({\n          id: i,\n          firstName: _faker.faker.name.firstName(),\n          lastName: _faker.faker.name.lastName()\n        });\n      }\n      return records;\n    }\n\n    /**\n     * Returns a pair of query selectors for a specific navbar button.\n     */\n    function getNavbarButtonSelector(index) {\n      return {\n        li: `nav li:nth-child(${index})`,\n        a: `nav li:nth-child(${index}) a`\n      };\n    }\n\n    /**\n     * All navbar buttons have the same structure with only a couple of possible\n     * variations. This tests it all. Makes 9 assertions.\n     */\n    function testNavbarButton(assert, index, _ref) {\n      let {\n        label = '',\n        icon = '',\n        text = '',\n        isDisabled = false,\n        isActive = false\n      } = _ref;\n      const {\n        li,\n        a\n      } = getNavbarButtonSelector(index);\n      assert.dom(li)[isDisabled ? 'hasClass' : 'doesNotHaveClass']('disabled');\n      assert.dom(li)[isActive ? 'hasClass' : 'doesNotHaveClass']('active');\n      assert.dom(a).hasAttribute('aria-disabled', isDisabled.toString()).hasAttribute('aria-current', isActive ? 'page' : 'false').hasAttribute('role', 'button').hasAttribute('title', label).hasAttribute('aria-label', label).hasText(text);\n      if (icon) {\n        assert.dom(`${a} span[aria-hidden=\"true\"]`).hasClass(icon);\n      } else {\n        assert.dom(`${a} span[aria-hidden=\"true\"]`).doesNotExist();\n      }\n    }\n\n    // ******************************\n    // Start of tests\n    // ******************************\n\n    (0, _qunit.test)('it generates a navigation bar', async function (assert) {\n      assert.expect(460);\n      this.set('records', generateRecordSet());\n      this.set('showPageLinks', true);\n      this.set('showPageLinkRangeLabels', false);\n      this.set('pageLinkCount', 5);\n      this.set('responsive', true);\n      this.set('ariaLabel', 'Test navigation bar');\n      this.set('disabled', false);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPager @records={{this.records}} @disabled={{this.disabled}} as |Pager|>\n              <Pager.Navbar\n                @showPageLinks={{this.showPageLinks}}\n                @showPageLinkRangeLabels={{this.showPageLinkRangeLabels}}\n                @pageLinkCount={{this.pageLinkCount}}\n                @responsive={{this.responsive}}\n                @ariaLabel={{this.ariaLabel}}\n              />\n            </UiPager>\n          \n      */\n      {\n        \"id\": \"cyxJqZoY\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\",\\\"@disabled\\\"],[[30,0,[\\\"records\\\"]],[30,0,[\\\"disabled\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Navbar\\\"]],null,[[\\\"@showPageLinks\\\",\\\"@showPageLinkRangeLabels\\\",\\\"@pageLinkCount\\\",\\\"@responsive\\\",\\\"@ariaLabel\\\"],[[30,0,[\\\"showPageLinks\\\"]],[30,0,[\\\"showPageLinkRangeLabels\\\"]],[30,0,[\\\"pageLinkCount\\\"]],[30,0,[\\\"responsive\\\"]],[30,0,[\\\"ariaLabel\\\"]]]],null],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Pager\\\"],false,[\\\"ui-pager\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('nav').hasAttribute('aria-label', 'Test navigation bar');\n      testNavbarButton(assert, '1', {\n        isDisabled: true,\n        label: 'Go to first page',\n        icon: 'fa-angle-double-left'\n      });\n      testNavbarButton(assert, '2', {\n        isDisabled: true,\n        label: 'Go to previous page',\n        icon: 'fa-angle-left'\n      });\n      testNavbarButton(assert, '3', {\n        isActive: true,\n        label: 'Current page, page 1',\n        text: '1'\n      });\n      testNavbarButton(assert, '4', {\n        label: 'Go to page 2',\n        text: '2'\n      });\n      testNavbarButton(assert, '5', {\n        label: 'Go to page 3',\n        text: '3'\n      });\n      testNavbarButton(assert, '6', {\n        label: 'Go to page 4',\n        text: '4'\n      });\n      testNavbarButton(assert, '7', {\n        label: 'Go to page 5',\n        text: '5'\n      });\n      testNavbarButton(assert, '8', {\n        label: 'Go to next page',\n        icon: 'fa-angle-right'\n      });\n      testNavbarButton(assert, '9', {\n        label: 'Go to last page',\n        icon: 'fa-angle-double-right'\n      });\n\n      // Remember, everything is offset because there are first and previous\n      // buttons at the beginning of the navbar.\n\n      // Clicks on page 3\n      await (0, _testHelpers.click)(getNavbarButtonSelector('5').a);\n      testNavbarButton(assert, '1', {\n        label: 'Go to first page',\n        icon: 'fa-angle-double-left'\n      });\n      testNavbarButton(assert, '2', {\n        label: 'Go to previous page',\n        icon: 'fa-angle-left'\n      });\n      testNavbarButton(assert, '3', {\n        label: 'Go to page 1',\n        text: '1'\n      });\n      testNavbarButton(assert, '5', {\n        isActive: true,\n        label: 'Current page, page 3',\n        text: '3'\n      });\n\n      // Clicks on previous\n      await (0, _testHelpers.click)(getNavbarButtonSelector('2').a);\n      testNavbarButton(assert, '5', {\n        label: 'Go to page 3',\n        text: '3'\n      });\n      testNavbarButton(assert, '4', {\n        isActive: true,\n        label: 'Current page, page 2',\n        text: '2'\n      });\n\n      // Clicks on first\n      await (0, _testHelpers.click)(getNavbarButtonSelector('1').a);\n      testNavbarButton(assert, '4', {\n        label: 'Go to page 2',\n        text: '2'\n      });\n      testNavbarButton(assert, '3', {\n        isActive: true,\n        label: 'Current page, page 1',\n        text: '1'\n      });\n\n      // Clicks on next\n      await (0, _testHelpers.click)(getNavbarButtonSelector('8').a);\n      testNavbarButton(assert, '3', {\n        label: 'Go to page 1',\n        text: '1'\n      });\n      testNavbarButton(assert, '4', {\n        isActive: true,\n        label: 'Current page, page 2',\n        text: '2'\n      });\n\n      // Clicks on last\n      await (0, _testHelpers.click)(getNavbarButtonSelector('9').a);\n      testNavbarButton(assert, '3', {\n        label: 'Go to page 6',\n        text: '6'\n      });\n      testNavbarButton(assert, '4', {\n        label: 'Go to page 7',\n        text: '7'\n      });\n      testNavbarButton(assert, '5', {\n        label: 'Go to page 8',\n        text: '8'\n      });\n      testNavbarButton(assert, '6', {\n        label: 'Go to page 9',\n        text: '9'\n      });\n      testNavbarButton(assert, '7', {\n        isActive: true,\n        label: 'Current page, page 10',\n        text: '10'\n      });\n      testNavbarButton(assert, '8', {\n        isDisabled: true,\n        label: 'Go to next page',\n        icon: 'fa-angle-right'\n      });\n      testNavbarButton(assert, '9', {\n        isDisabled: true,\n        label: 'Go to last page',\n        icon: 'fa-angle-double-right'\n      });\n\n      // Clicks on page 7\n      await (0, _testHelpers.click)(getNavbarButtonSelector('4').a);\n      testNavbarButton(assert, '1', {\n        label: 'Go to first page',\n        icon: 'fa-angle-double-left'\n      });\n      testNavbarButton(assert, '2', {\n        label: 'Go to previous page',\n        icon: 'fa-angle-left'\n      });\n      testNavbarButton(assert, '3', {\n        label: 'Go to page 5',\n        text: '5'\n      });\n      testNavbarButton(assert, '4', {\n        label: 'Go to page 6',\n        text: '6'\n      });\n      testNavbarButton(assert, '5', {\n        isActive: true,\n        label: 'Current page, page 7',\n        text: '7'\n      });\n      testNavbarButton(assert, '6', {\n        label: 'Go to page 8',\n        text: '8'\n      });\n      testNavbarButton(assert, '7', {\n        label: 'Go to page 9',\n        text: '9'\n      });\n      testNavbarButton(assert, '8', {\n        label: 'Go to next page',\n        icon: 'fa-angle-right'\n      });\n      testNavbarButton(assert, '9', {\n        label: 'Go to last page',\n        icon: 'fa-angle-double-right'\n      });\n\n      // No page links\n      this.set('showPageLinks', false);\n      testNavbarButton(assert, '1', {\n        label: 'Go to first page',\n        icon: 'fa-angle-double-left'\n      });\n      testNavbarButton(assert, '2', {\n        label: 'Go to previous page',\n        icon: 'fa-angle-left'\n      });\n      testNavbarButton(assert, '3', {\n        label: 'Go to next page',\n        icon: 'fa-angle-right'\n      });\n      testNavbarButton(assert, '4', {\n        label: 'Go to last page',\n        icon: 'fa-angle-double-right'\n      });\n\n      // A much more limited number of page links\n      this.set('pageLinkCount', 1);\n      this.set('showPageLinks', true);\n      testNavbarButton(assert, '1', {\n        label: 'Go to first page',\n        icon: 'fa-angle-double-left'\n      });\n      testNavbarButton(assert, '2', {\n        label: 'Go to previous page',\n        icon: 'fa-angle-left'\n      });\n      testNavbarButton(assert, '3', {\n        isActive: true,\n        label: 'Current page, page 7',\n        text: '7'\n      });\n      testNavbarButton(assert, '4', {\n        label: 'Go to next page',\n        icon: 'fa-angle-right'\n      });\n      testNavbarButton(assert, '5', {\n        label: 'Go to last page',\n        icon: 'fa-angle-double-right'\n      });\n\n      // More details link text\n      this.set('showPageLinkRangeLabels', true);\n      testNavbarButton(assert, '3', {\n        isActive: true,\n        label: 'Current page, page 7',\n        text: '61 - 70'\n      });\n\n      // Disable everything\n      this.set('disabled', true);\n      testNavbarButton(assert, '1', {\n        isDisabled: true,\n        label: 'Go to first page',\n        icon: 'fa-angle-double-left'\n      });\n      testNavbarButton(assert, '2', {\n        isDisabled: true,\n        label: 'Go to previous page',\n        icon: 'fa-angle-left'\n      });\n      testNavbarButton(assert, '3', {\n        isDisabled: true,\n        isActive: true,\n        label: 'Current page, page 7',\n        text: '61 - 70'\n      });\n      testNavbarButton(assert, '4', {\n        isDisabled: true,\n        label: 'Go to next page',\n        icon: 'fa-angle-right'\n      });\n      testNavbarButton(assert, '5', {\n        isDisabled: true,\n        label: 'Go to last page',\n        icon: 'fa-angle-double-right'\n      });\n\n      // Clicks on first, when disabled nothing should change\n      await (0, _testHelpers.click)(getNavbarButtonSelector('1').a);\n      testNavbarButton(assert, '3', {\n        isDisabled: true,\n        isActive: true,\n        label: 'Current page, page 7',\n        text: '61 - 70'\n      });\n    });\n    (0, _qunit.test)('it generates descriptive text', async function (assert) {\n      this.set('records', generateRecordSet());\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPager @records={{this.records}} as |Pager|>\n              <Pager.Navbar />\n              <div data-test-desc>{{Pager.description}}</div>\n            </UiPager>\n          \n      */\n      {\n        \"id\": \"JusoR7FP\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\"],[[30,0,[\\\"records\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Navbar\\\"]],null,null,null],[1,\\\"\\\\n        \\\"],[10,0],[14,\\\"data-test-desc\\\",\\\"\\\"],[12],[1,[30,1,[\\\"description\\\"]]],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Pager\\\"],false,[\\\"ui-pager\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-desc]').hasText('1 - 10 of 99');\n\n      // Clicks on last\n      await (0, _testHelpers.click)(getNavbarButtonSelector('9').a);\n      assert.dom('[data-test-desc]').hasText('91 - 99 of 99');\n\n      // It still works with a recordset that is smaller than the page size\n      this.set('records', generateRecordSet(3));\n      assert.dom('[data-test-desc]').hasText('1 - 3 of 3');\n\n      // Make sure it does not break when no recordset is provided\n      this.set('records', []);\n      assert.dom('[data-test-desc]').hasText('0 - 0 of 0');\n      this.set('records', undefined);\n      assert.dom('[data-test-desc]').hasText('0 - 0 of 0');\n      this.set('records', generateRecordSet());\n\n      // Update with a custom description builder\n      this.set('createDescription', function (page, start, end, total) {\n        return `Page ${page}, records ${start} through ${end} of ${total}`;\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPager @records={{this.records}} @createDescription={{this.createDescription}} as |Pager|>\n              <Pager.Navbar />\n              <div data-test-desc>{{Pager.description}}</div>\n            </UiPager>\n          \n      */\n      {\n        \"id\": \"4otOD1nh\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\",\\\"@createDescription\\\"],[[30,0,[\\\"records\\\"]],[30,0,[\\\"createDescription\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Navbar\\\"]],null,null,null],[1,\\\"\\\\n        \\\"],[10,0],[14,\\\"data-test-desc\\\",\\\"\\\"],[12],[1,[30,1,[\\\"description\\\"]]],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Pager\\\"],false,[\\\"ui-pager\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-desc]').hasText('Page 1, records 1 through 10 of 99');\n\n      // Clicks on last\n      await (0, _testHelpers.click)(getNavbarButtonSelector('9').a);\n      assert.dom('[data-test-desc]').hasText('Page 10, records 91 through 99 of 99');\n\n      // Remove the builder function, if that's your jam.\n      this.set('createDescription', undefined);\n      assert.dom('[data-test-desc]').hasText('');\n    });\n    (0, _qunit.test)('the size of its pages can be controlled', async function (assert) {\n      this.set('records', generateRecordSet());\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPager @records={{this.records}} as |Pager|>\n              <Pager.SizeOptions />\n              <ul>\n                {{#each Pager.pageRecords as |record|}}\n                  <li>{{record.id}} - {{record.firstName}} {{record.lastName}}</li>\n                {{/each}}\n              </ul>\n            </UiPager>\n          \n      */\n      {\n        \"id\": \"aS+C5SXx\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\"],[[30,0,[\\\"records\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"SizeOptions\\\"]],null,null,null],[1,\\\"\\\\n        \\\"],[10,\\\"ul\\\"],[12],[1,\\\"\\\\n\\\"],[42,[28,[37,2],[[28,[37,2],[[30,1,[\\\"pageRecords\\\"]]],null]],null],null,[[[1,\\\"            \\\"],[10,\\\"li\\\"],[12],[1,[30,2,[\\\"id\\\"]]],[1,\\\" - \\\"],[1,[30,2,[\\\"firstName\\\"]]],[1,\\\" \\\"],[1,[30,2,[\\\"lastName\\\"]]],[13],[1,\\\"\\\\n\\\"]],[2]],null],[1,\\\"        \\\"],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Pager\\\",\\\"record\\\"],false,[\\\"ui-pager\\\",\\\"each\\\",\\\"-track-array\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('select').hasAttribute('aria-label', 'Items to show per page');\n      assert.dom('select option').exists({\n        count: 3\n      });\n      assert.dom('select').hasValue('10');\n      assert.dom('ul li').exists({\n        count: 10\n      });\n      await (0, _testHelpers.select)('select', '50');\n      assert.dom('ul li').exists({\n        count: 50\n      });\n      await (0, _testHelpers.select)('select', '-1');\n      assert.dom('ul li').exists({\n        count: 99\n      });\n\n      // Customizable sizes\n      this.set('pageSizes', [{\n        value: '20',\n        label: '20 Records'\n      }, {\n        value: '75',\n        label: '75 Records'\n      }]);\n      this.set('pageSize', '75');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPager @records={{this.records}} @pageSize={{this.pageSize}} @pageSizes={{this.pageSizes}} as |Pager|>\n              <Pager.SizeOptions />\n              <ul>\n                {{#each Pager.pageRecords as |record|}}\n                  <li>{{record.id}} - {{record.firstName}} {{record.lastName}}</li>\n                {{/each}}\n              </ul>\n            </UiPager>\n          \n      */\n      {\n        \"id\": \"0tCZYEnT\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\",\\\"@pageSize\\\",\\\"@pageSizes\\\"],[[30,0,[\\\"records\\\"]],[30,0,[\\\"pageSize\\\"]],[30,0,[\\\"pageSizes\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"SizeOptions\\\"]],null,null,null],[1,\\\"\\\\n        \\\"],[10,\\\"ul\\\"],[12],[1,\\\"\\\\n\\\"],[42,[28,[37,2],[[28,[37,2],[[30,1,[\\\"pageRecords\\\"]]],null]],null],null,[[[1,\\\"            \\\"],[10,\\\"li\\\"],[12],[1,[30,2,[\\\"id\\\"]]],[1,\\\" - \\\"],[1,[30,2,[\\\"firstName\\\"]]],[1,\\\" \\\"],[1,[30,2,[\\\"lastName\\\"]]],[13],[1,\\\"\\\\n\\\"]],[2]],null],[1,\\\"        \\\"],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Pager\\\",\\\"record\\\"],false,[\\\"ui-pager\\\",\\\"each\\\",\\\"-track-array\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('select option').exists({\n        count: 2\n      });\n      assert.dom('select').hasValue('75');\n      assert.dom('ul li').exists({\n        count: 75\n      });\n      assert.dom('select option:nth-child(1)').hasText('20 Records');\n      assert.dom('select option:nth-child(2)').hasText('75 Records');\n\n      // It takes numbers too, for convenience\n      this.set('pageSize', 20);\n      assert.dom('select').hasValue('20');\n      assert.dom('ul li').exists({\n        count: 20\n      });\n\n      // It should default back to 10\n      this.set('pageSize', undefined);\n      assert.dom('ul li').exists({\n        count: 10\n      });\n\n      // Other configurable options\n      this.set('disabled', true);\n      this.set('selected', undefined);\n      this.set('ariaLabel', 'Hello World');\n      this.set('ariaControls', 'Foo');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPager @records={{this.records}} as |Pager|>\n              <Pager.SizeOptions\n                @disabled={{this.disabled}}\n                @selected={{this.selected}}\n                @ariaLabel={{this.ariaLabel}}\n                @ariaControls={{this.ariaControls}}\n              />\n            </UiPager>\n          \n      */\n      {\n        \"id\": \"IAWusv2R\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\"],[[30,0,[\\\"records\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"SizeOptions\\\"]],null,[[\\\"@disabled\\\",\\\"@selected\\\",\\\"@ariaLabel\\\",\\\"@ariaControls\\\"],[[30,0,[\\\"disabled\\\"]],[30,0,[\\\"selected\\\"]],[30,0,[\\\"ariaLabel\\\"]],[30,0,[\\\"ariaControls\\\"]]]],null],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Pager\\\"],false,[\\\"ui-pager\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('select').hasAttribute('aria-label', 'Hello World').hasAttribute('aria-controls', 'Foo').isDisabled().hasValue('10');\n    });\n    (0, _qunit.test)('it can limit its page size options based on the length of the record set', async function (assert) {\n      this.set('records', generateRecordSet(25));\n      this.set('trimSizeOptions', false);\n      this.set('pageSize', '25');\n      this.set('pageSizes', [{\n        value: '20',\n        label: '20 Records'\n      }, {\n        value: '25',\n        label: '25 Records'\n      }, {\n        value: '75',\n        label: '75 Records'\n      }, {\n        value: '-1',\n        label: 'Show All'\n      }]);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPager\n              @records={{this.records}}\n              @pageSizes={{this.pageSizes}}\n              @pageSize={{this.pageSize}}\n              @trimSizeOptions={{this.trimSizeOptions}}\n            as |Pager|>\n              <Pager.SizeOptions />\n            </UiPager>\n          \n      */\n      {\n        \"id\": \"87zOKXmT\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\",\\\"@pageSizes\\\",\\\"@pageSize\\\",\\\"@trimSizeOptions\\\"],[[30,0,[\\\"records\\\"]],[30,0,[\\\"pageSizes\\\"]],[30,0,[\\\"pageSize\\\"]],[30,0,[\\\"trimSizeOptions\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"SizeOptions\\\"]],null,null,null],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Pager\\\"],false,[\\\"ui-pager\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('select').hasValue('25');\n      assert.dom('select option').exists({\n        count: 4\n      });\n      this.set('trimSizeOptions', true);\n      assert.dom('select option').exists({\n        count: 2\n      });\n      assert.dom('select').hasValue('-1');\n      this.set('records', generateRecordSet(26));\n      assert.dom('select option').exists({\n        count: 3\n      });\n      assert.dom('select').hasValue('25');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-panel-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/wait\", \"@nsf-open/ember-ui-foundation/components/ui-async-block/component\", \"@nsf-open/ember-ui-foundation/lib/MessageManager\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _wait, _component, _MessageManager) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\",0,\"dummy/tests/helpers/wait\",0,\"@nsf-open/ember-ui-foundation/components/ui-async-block/component\",0,\"@nsf-open/ember-ui-foundation/lib/MessageManager\"eaimeta@70e063a35619d71f\n  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n  function _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n  function _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n  (0, _qunit.module)('Integration | Component | ui-panel', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it creates a panel with heading', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @heading=\"Hello World\" @testId=\"panel\">Foo Bar</UiPanel>\n      */\n      {\n        \"id\": \"ss7TEpe1\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@testId\\\"],[\\\"Hello World\\\",\\\"panel\\\"]],[[\\\"default\\\"],[[[[1,\\\"Foo Bar\\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"panel\"]').isVisible();\n      assert.dom('[data-test-id=\"panel\"]').hasTagName('section');\n      assert.dom('[data-test-id=\"panel\"]').hasClass('panel');\n      assert.dom('[data-test-id=\"panel\"]').hasClass('panel-default');\n      assert.dom('[data-test-id=\"panel\"] .panel-heading').isVisible();\n      assert.dom('[data-test-id=\"panel\"] .panel-heading').hasTagName('header');\n      assert.dom('[data-test-id=\"panel\"] .panel-heading .panel-title').isVisible();\n      assert.dom('[data-test-id=\"panel\"] .panel-heading .panel-title').hasTagName('h2');\n      assert.dom('[data-test-id=\"panel\"] .panel-heading .panel-title').hasText('Hello World');\n      assert.dom('[data-test-id=\"panel\"] .panel-body').isVisible();\n      assert.dom('[data-test-id=\"panel\"] .panel-body').hasText('Foo Bar');\n    });\n    (0, _qunit.test)('it can create a panel without a heading', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @testId=\"panel\">Foo Bar</UiPanel>\n      */\n      {\n        \"id\": \"UK+BsSy/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@testId\\\"],[\\\"panel\\\"]],[[\\\"default\\\"],[[[[1,\\\"Foo Bar\\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"panel\"]').isVisible();\n      assert.dom('[data-test-id=\"panel\"]').hasTagName('section');\n      assert.dom('[data-test-id=\"panel\"]').hasClass('panel');\n      assert.dom('[data-test-id=\"panel\"]').hasClass('panel-default');\n      assert.dom('[data-test-id=\"panel\"] .panel-heading').doesNotExist();\n      assert.dom('[data-test-id=\"panel\"] .panel-body').isVisible();\n      assert.dom('[data-test-id=\"panel\"] .panel-body').hasText('Foo Bar');\n    });\n    (0, _qunit.test)('it can create a panel in different variants', async function (assert) {\n      this.set('variant', 'primary');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @heading=\"Hello World\" @variant={{this.variant}} @testId=\"panel\">Foo Bar</UiPanel>\n      */\n      {\n        \"id\": \"vehh8U/f\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@variant\\\",\\\"@testId\\\"],[\\\"Hello World\\\",[30,0,[\\\"variant\\\"]],\\\"panel\\\"]],[[\\\"default\\\"],[[[[1,\\\"Foo Bar\\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"panel\"].panel-primary').isVisible();\n      this.set('variant', 'secondary');\n      assert.dom('[data-test-id=\"panel\"].panel-secondary').isVisible();\n      this.set('variant', 'success');\n      assert.dom('[data-test-id=\"panel\"].panel-success').isVisible();\n    });\n    (0, _qunit.test)('is can create a panel heading with different heading level (H1, H2, etc)', async function (assert) {\n      this.set('headingLevel', 'h1');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @heading=\"Hello World\" @headingLevel={{this.headingLevel}} @testId=\"panel\">Foo Bar</UiPanel>\n      */\n      {\n        \"id\": \"IFhkzeA3\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@headingLevel\\\",\\\"@testId\\\"],[\\\"Hello World\\\",[30,0,[\\\"headingLevel\\\"]],\\\"panel\\\"]],[[\\\"default\\\"],[[[[1,\\\"Foo Bar\\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"panel\"] .panel-heading .panel-title').hasTagName('h1');\n      this.set('headingLevel', 'h3');\n      assert.dom('[data-test-id=\"panel\"] .panel-heading .panel-title').hasTagName('h3');\n      this.set('headingLevel', 'h4');\n      assert.dom('[data-test-id=\"panel\"] .panel-heading .panel-title').hasTagName('h4');\n    });\n    (0, _qunit.test)('it can yield provided content back without being wrapped in a panel', async function (assert) {\n      this.set('renderPanel', true);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @heading=\"Hello World\" @renderPanel={{this.renderPanel}}>Foo Bar</UiPanel>\n      */\n      {\n        \"id\": \"I9pL7Xlr\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@renderPanel\\\"],[\\\"Hello World\\\",[30,0,[\\\"renderPanel\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"Foo Bar\\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.panel .panel-heading').isVisible();\n      assert.dom('.panel .panel-body').isVisible();\n      assert.dom('.panel .panel-body').hasText('Foo Bar');\n      this.set('renderPanel', false);\n      assert.dom('.panel .panel-heading').doesNotExist();\n      assert.dom('.panel .panel-body').doesNotExist();\n      assert.dom().hasText('Foo Bar');\n    });\n    (0, _qunit.test)('it will provide a ui-async-block instance when given a promise', async function (assert) {\n      const promise = (0, _wait.default)(500, 'Hello World');\n      this.set('promise', promise);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel\n              @heading=\"Information\"\n              @name=\"Infotainment\"\n              @promise={{this.promise}}\n            as |content|>\n                {{content}}\n            </UiPanel>\n      */\n      {\n        \"id\": \"EelH2VuN\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@name\\\",\\\"@promise\\\"],[\\\"Information\\\",\\\"Infotainment\\\",[30,0,[\\\"promise\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[1,[30,1]],[1,\\\"\\\\n      \\\"]],[1]]]]]],[\\\"content\\\"],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').isVisible();\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(2)').hasText('Loading Infotainment');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('.panel-body').hasText('Hello World');\n    });\n    (0, _qunit.test)('it will use the heading if a name is not provided for the ui-async-block', async function (assert) {\n      const promise = (0, _wait.default)(500, 'Hello World');\n      this.set('promise', promise);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel\n              @heading=\"Information\"\n              @promise={{this.promise}}\n            as |content|>\n                {{content}}\n            </UiPanel>\n      */\n      {\n        \"id\": \"9n8XlawC\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@promise\\\"],[\\\"Information\\\",[30,0,[\\\"promise\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[1,[30,1]],[1,\\\"\\\\n      \\\"]],[1]]]]]],[\\\"content\\\"],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').isVisible();\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(2)').hasText('Loading Information');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('.panel-body').hasText('Hello World');\n    });\n    (0, _qunit.test)('it can be provided a ui-async-block class to customize everything possible', async function (assert) {\n      class TestAsyncBlock extends _component.default {\n        constructor() {\n          super(...arguments);\n          _defineProperty(this, \"pendingMessage\", 'Loading Foo and a bit of Bar');\n        }\n      }\n      this.owner.register('component:test-async-block', TestAsyncBlock);\n      const promise = (0, _wait.default)(500, 'Hello World');\n      this.set('promise', promise);\n      this.set('uiAsyncBlock', 'test-async-block');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel\n              @heading=\"Information\"\n              @promise={{this.promise}}\n              @uiAsyncBlock={{this.uiAsyncBlock}}\n            as |content|>\n                {{content}}\n            </UiPanel>\n      */\n      {\n        \"id\": \"Sy1K++ku\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@promise\\\",\\\"@uiAsyncBlock\\\"],[\\\"Information\\\",[30,0,[\\\"promise\\\"]],[30,0,[\\\"uiAsyncBlock\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[1,[30,1]],[1,\\\"\\\\n      \\\"]],[1]]]]]],[\\\"content\\\"],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"load-indicator\"]').isVisible();\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(2)').hasText('Loading Foo and a bit of Bar');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('.panel-body').hasText('Hello World');\n    });\n    (0, _qunit.test)('it renders a ui-alert-block if provided a MessageManager instance', async function (assert) {\n      const manager = new _MessageManager.default();\n      this.set('manager', manager);\n      manager.addSuccessMessages('Success Message A');\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPanel @heading=\"Hello World\" @testId=\"panel\" @messageManager={{this.manager}} as |modal|>\n              <p>Content Goes Here</p>\n            </UiPanel>\n          \n      */\n      {\n        \"id\": \"mlrVocrV\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@heading\\\",\\\"@testId\\\",\\\"@messageManager\\\"],[\\\"Hello World\\\",\\\"panel\\\",[30,0,[\\\"manager\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Content Goes Here\\\"],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"modal\\\"],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('[data-test-id=\"panel\"] [data-test-ident=\"context-message-success\"]').isVisible();\n      assert.dom('[data-test-id=\"panel\"] [data-test-ident=\"context-message-item\"]').hasText('Success Message A');\n    });\n    (0, _qunit.test)('it can be made collapsible', async function (assert) {\n      this.set('collapsed', false);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @collapsed={{this.collapsed}}>\n              <p>Hello World</p>\n            </UiPanel>\n      */\n      {\n        \"id\": \"IJBrFMDr\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@collapsed\\\"],[[30,0,[\\\"collapsed\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const btnSelector = '.panel-heading button';\n      assert.dom(btnSelector).isVisible();\n      assert.dom(btnSelector).hasText('Collapse');\n      assert.dom(btnSelector).hasAttribute('aria-label', 'collapse section');\n      assert.dom(btnSelector).hasAttribute('aria-expanded', 'true');\n      assert.dom(btnSelector).hasAttribute('aria-controls', (0, _testHelpers.find)('.panel-body')?.parentElement?.id ?? '');\n      assert.dom('.panel-body').isVisible();\n      await (0, _testHelpers.click)(btnSelector);\n      assert.dom(btnSelector).hasText('Expand');\n      assert.dom(btnSelector).hasAttribute('aria-label', 'expand section');\n      assert.dom(btnSelector).hasAttribute('aria-expanded', 'false');\n      assert.dom('.panel-body').isNotVisible();\n\n      // eslint-disable-next-line ember/no-get\n      assert.true(this.get('collapsed'), 'The \"collapsed\" property is true');\n      this.set('collapsed', false);\n      await (0, _testHelpers.settled)();\n      assert.dom(btnSelector).hasText('Collapse');\n      assert.dom('.panel-body').isVisible();\n    });\n    (0, _qunit.test)('it can be initially rendered in the collapsed state', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @startCollapsed={{true}}>\n              <p>Hello World</p>\n            </UiPanel>\n      */\n      {\n        \"id\": \"px8wrixa\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@startCollapsed\\\"],[true]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const btnSelector = '.panel-heading button';\n      assert.dom(btnSelector).isVisible();\n      assert.dom('.panel-body').isNotVisible();\n      await (0, _testHelpers.click)(btnSelector);\n      assert.dom('.panel-body').isVisible();\n    });\n    (0, _qunit.test)('its onShow and onHidden callbacks are run when its collapsed state changes', async function (assert) {\n      this.set('onShow', function () {\n        assert.step('onShow');\n      });\n      this.set('onHidden', function () {\n        assert.step('onHidden');\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @startCollapsed={{false}} @onHidden={{action this.onHidden}} @onShow={{action this.onShow}}>\n              <p>Hello World</p>\n            </UiPanel>\n      */\n      {\n        \"id\": \"s6Ol3GV/\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@startCollapsed\\\",\\\"@onHidden\\\",\\\"@onShow\\\"],[false,[28,[37,1],[[30,0],[30,0,[\\\"onHidden\\\"]]],null],[28,[37,1],[[30,0],[30,0,[\\\"onShow\\\"]]],null]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[12],[1,\\\"Hello World\\\"],[13],[1,\\\"\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-panel\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const btnSelector = '.panel-heading button';\n      assert.dom('.panel-body').isVisible();\n      await (0, _testHelpers.click)(btnSelector);\n      assert.dom('.panel-body').isNotVisible();\n      await (0, _testHelpers.click)(btnSelector);\n      assert.dom('.panel-body').isVisible();\n      assert.verifySteps(['onHidden', 'onShow']);\n    });\n    (0, _qunit.test)('a promise returned from the onShow callback will be given to the ui-async-block', async function (assert) {\n      let promise;\n      this.set('onShow', function () {\n        promise = (0, _wait.default)(500, 'Hello World');\n        return promise;\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @heading=\"Information\" @startCollapsed={{true}} @onShow={{action this.onShow}} as |content|>\n                {{content}}\n            </UiPanel>\n      */\n      {\n        \"id\": \"JRzOqrTA\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@startCollapsed\\\",\\\"@onShow\\\"],[\\\"Information\\\",true,[28,[37,1],[[30,0],[30,0,[\\\"onShow\\\"]]],null]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[1,[30,1]],[1,\\\"\\\\n      \\\"]],[1]]]]]],[\\\"content\\\"],false,[\\\"ui-panel\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.click)('.panel-heading button');\n      assert.dom('[data-test-id=\"load-indicator\"]').isVisible();\n      assert.dom('[data-test-id=\"load-indicator\"] p:nth-child(2)').hasText('Loading Information');\n      await promise;\n      await (0, _testHelpers.settled)();\n      assert.dom('.panel-body').hasText('Hello World');\n    });\n    (0, _qunit.test)('the headerButtons array can be used to create button elements in the header', async function (assert) {\n      function handleClick(event) {\n        const btn = event.target;\n        assert.step(`${btn.textContent?.trim()} clicked`);\n      }\n      this.set('headerButtons', [{\n        text: 'Button A',\n        variant: 'info',\n        onClick: handleClick\n      }, {\n        text: 'Button B',\n        class: 'test-classname',\n        disabled: true,\n        icon: 'superpowers'\n      }]);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @heading=\"Panel Heading\" @headerButtons={{this.headerButtons}}>\n              Hello World\n            </UiPanel>\n      */\n      {\n        \"id\": \"k4+avtD3\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@headerButtons\\\"],[\\\"Panel Heading\\\",[30,0,[\\\"headerButtons\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        Hello World\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const btnA = '.panel-heading button:nth-child(1)';\n      const btnB = '.panel-heading button:nth-child(2)';\n      assert.dom(btnA).hasText('Button A');\n      assert.dom(btnA).hasClass('btn-info');\n      assert.dom(btnA).isNotDisabled();\n      await (0, _testHelpers.click)(btnA);\n      assert.dom(btnB).hasText('Button B');\n      assert.dom(btnB).hasClass('test-classname');\n      assert.dom(btnB).isDisabled();\n      assert.dom(`${btnB} .fa-superpowers`).exists();\n      assert.verifySteps(['Button A clicked']);\n    });\n    (0, _qunit.test)('the headerButtons array can be used to create button elements in the header next to a collapse toggle', async function (assert) {\n      this.set('headerButtons', [{\n        text: 'Button A',\n        variant: 'info'\n      }, {\n        text: 'Button B',\n        variant: 'info'\n      }]);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiPanel @heading=\"Panel Heading\" @headerButtons={{this.headerButtons}} @startCollapsed={{true}}>\n              Hello World\n            </UiPanel>\n      */\n      {\n        \"id\": \"uH0taASY\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@heading\\\",\\\"@headerButtons\\\",\\\"@startCollapsed\\\"],[\\\"Panel Heading\\\",[30,0,[\\\"headerButtons\\\"]],true]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        Hello World\\\\n      \\\"]],[]]]]]],[],false,[\\\"ui-panel\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const btnA = '.panel-heading button:nth-child(1)';\n      const btnB = '.panel-heading button:nth-child(2)';\n      const btnC = '.panel-heading button:nth-child(3)';\n      assert.dom(btnA).hasText('Button A');\n      assert.dom(btnB).hasText('Button B');\n      assert.dom(btnC).hasText('Expand');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-popover-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-popover', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it attaches event listeners to its parent element', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <button id=\"toggle\">\n              Foo <UiPopover>Hello World</UiPopover>\n            </button>\n          \n      */\n      {\n        \"id\": \"72wdRlGw\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"toggle\\\"],[12],[1,\\\"\\\\n        Foo \\\"],[8,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popover\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const overlay = (0, _testHelpers.find)('.popover');\n      assert.dom('#toggle').hasAttribute('aria-controls', overlay.id).hasAttribute('aria-expanded', 'false');\n      assert.dom('.popover').isNotVisible();\n      await (0, _testHelpers.click)('#toggle');\n      assert.dom('#toggle').hasAttribute('aria-expanded', 'true');\n      assert.dom('.popover .popover-content').isVisible().hasText('Hello World');\n      await (0, _testHelpers.click)('#toggle');\n      assert.dom('.popover').isNotVisible();\n    });\n    (0, _qunit.test)('it is not closed by outside interactions', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <button id=\"toggle\">\n              Foo <UiPopover>Hello World</UiPopover>\n            </button>\n      \n            <button id=\"other-button\">Click Me</button>\n          \n      */\n      {\n        \"id\": \"sqb22vwC\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"toggle\\\"],[12],[1,\\\"\\\\n        Foo \\\"],[8,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"other-button\\\"],[12],[1,\\\"Click Me\\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popover\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.popover').isNotVisible();\n      await (0, _testHelpers.click)('#toggle');\n      assert.dom('.popover').isVisible();\n      await (0, _testHelpers.click)('#other-button');\n      assert.dom('.popover').isVisible();\n    });\n    (0, _qunit.test)('it accepts a heading', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <button>\n              Foo <UiPopover @title=\"Popover Title\">Hello World</UiPopover>\n            </button>\n          \n      */\n      {\n        \"id\": \"6M5bADnf\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[12],[1,\\\"\\\\n        Foo \\\"],[8,[39,0],null,[[\\\"@title\\\"],[\\\"Popover Title\\\"]],[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popover\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.popover').hasTagName('section');\n      assert.dom('.popover .popover-title').hasTagName('header').hasText('Popover Title');\n    });\n    (0, _qunit.test)('it manages focus as though it were inline with its trigger', async function (assert) {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <a href=\"#\">Other focus target A</a>\n      \n            <UiButton @variant=\"primary\" id=\"trigger\">\n              Log In\n              <UiPopover @title=\"Please Login to Your Account to Continue\" @renderInPlace={{this.renderInPlace}}>\n                <label for=\"username\">Username</label>\n                <input type=\"text\" id=\"username\" />\n      \n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" />\n      \n                <button type=\"button\" id=\"submitLogin\">Login</button>\n              </UiPopover>\n            </UiButton>\n      \n            <a href=\"#\" id=\"alternateFocusB\">Other focus target B</a>\n          \n      */\n      {\n        \"id\": \"jBz1hpkd\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,3],[14,6,\\\"#\\\"],[12],[1,\\\"Other focus target A\\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[8,[39,0],[[24,1,\\\"trigger\\\"]],[[\\\"@variant\\\"],[\\\"primary\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        Log In\\\\n        \\\"],[8,[39,1],null,[[\\\"@title\\\",\\\"@renderInPlace\\\"],[\\\"Please Login to Your Account to Continue\\\",[30,0,[\\\"renderInPlace\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          \\\"],[10,\\\"label\\\"],[14,\\\"for\\\",\\\"username\\\"],[12],[1,\\\"Username\\\"],[13],[1,\\\"\\\\n          \\\"],[10,\\\"input\\\"],[14,1,\\\"username\\\"],[14,4,\\\"text\\\"],[12],[13],[1,\\\"\\\\n\\\\n          \\\"],[10,\\\"label\\\"],[14,\\\"for\\\",\\\"password\\\"],[12],[1,\\\"Password\\\"],[13],[1,\\\"\\\\n          \\\"],[10,\\\"input\\\"],[14,1,\\\"password\\\"],[14,4,\\\"password\\\"],[12],[13],[1,\\\"\\\\n\\\\n          \\\"],[10,\\\"button\\\"],[14,1,\\\"submitLogin\\\"],[14,4,\\\"button\\\"],[12],[1,\\\"Login\\\"],[13],[1,\\\"\\\\n        \\\"]],[]]]]],[1,\\\"\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n\\\\n      \\\"],[10,3],[14,6,\\\"#\\\"],[14,1,\\\"alternateFocusB\\\"],[12],[1,\\\"Other focus target B\\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-button\\\",\\\"ui-popover\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n\n      // See https://github.com/emberjs/ember-test-helpers/issues/738\n      // Some keyboard interaction are particularly difficult to fake with Javascript,\n      // and tabbing through focusable elements is one of them. For this, we only\n      // _really_ want to make sure that focus gets wrapped between first <-> last\n      // elements in the modal. Going out on a limb here that the browser is capable\n      // of handing everything in-between.\n\n      assert.dom('.popover').isNotVisible();\n      await (0, _testHelpers.click)('#trigger');\n      assert.dom('.popover').isVisible();\n      assert.dom('#trigger').isFocused();\n      await (0, _testHelpers.triggerKeyEvent)('#trigger', 'keydown', 'Tab');\n      assert.dom('.popover button[aria-label=\"Close\"]').isFocused();\n      await (0, _testHelpers.focus)('.popover #submitLogin');\n      await (0, _testHelpers.triggerKeyEvent)('.popover', 'keydown', 'Tab');\n      assert.dom('#alternateFocusB').isFocused();\n      await (0, _testHelpers.triggerKeyEvent)('#alternateFocusB', 'keydown', 'Tab', {\n        shiftKey: true\n      });\n      assert.dom('.popover #submitLogin').isFocused();\n      await (0, _testHelpers.focus)('.popover button[aria-label=\"Close\"]');\n      await (0, _testHelpers.triggerKeyEvent)('.popover', 'keydown', 'Tab', {\n        shiftKey: true\n      });\n      assert.dom('#trigger').isFocused();\n    });\n    (0, _qunit.test)('it can be closed with its own close button', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <button id=\"toggle\">\n              Foo <UiPopover>Hello World</UiPopover>\n            </button>\n          \n      */\n      {\n        \"id\": \"72wdRlGw\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"toggle\\\"],[12],[1,\\\"\\\\n        Foo \\\"],[8,[39,0],null,null,[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popover\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.popover').isNotVisible();\n      await (0, _testHelpers.click)('#toggle');\n      assert.dom('.popover').isVisible();\n      await (0, _testHelpers.click)('.popover button[aria-label=\"Close\"]');\n      assert.dom('.popover').isNotVisible();\n      assert.dom('#toggle').isFocused();\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-popper-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/lookup-component\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _lookupComponent) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\",0,\"dummy/tests/helpers/lookup-component\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-popper', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.afterEach(async function () {\n      // Some tests scroll around so this ensures things always get put back.\n      // @ts-expect-error The root testing element will always have a parent\n      await (0, _testHelpers.scrollTo)((0, _testHelpers.getRootElement)().parentElement, 0, 0);\n    });\n    (0, _qunit.test)('it generates a PopperJS instance', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <div id=\"original-container\">\n              <UiPopper @popperTarget=\"#target-btn\" @id=\"test-popper\">\n                Hello World\n              </UiPopper>\n            </div>\n      \n            <button id=\"target-btn\">A Button</button>\n          \n      */\n      {\n        \"id\": \"iYqf4IF8\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,0],[14,1,\\\"original-container\\\"],[12],[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@popperTarget\\\",\\\"@id\\\"],[\\\"#target-btn\\\",\\\"test-popper\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          Hello World\\\\n        \\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"target-btn\\\"],[12],[1,\\\"A Button\\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popper\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('#test-popper').isVisible();\n      assert.dom('#test-popper').hasText('Hello World');\n      assert.dom('#test-popper').hasAttribute('data-popper-placement', 'bottom');\n      assert.notEqual((0, _testHelpers.find)('#test-popper')?.parentNode, (0, _testHelpers.find)('#original-container'), 'The popper has been moved out of its original parent node');\n    });\n    (0, _qunit.test)('it can be rendered where it was defined', async function (assert) {\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <div id=\"original-container\">\n              <UiPopper @popperTarget=\"#target-btn\" @id=\"test-popper\" @renderInPlace={{true}}>\n                Hello World\n              </UiPopper>\n            </div>\n      \n            <button id=\"target-btn\">A Button</button>\n          \n      */\n      {\n        \"id\": \"uMqxiTl9\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,0],[14,1,\\\"original-container\\\"],[12],[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@popperTarget\\\",\\\"@id\\\",\\\"@renderInPlace\\\"],[\\\"#target-btn\\\",\\\"test-popper\\\",true]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          Hello World\\\\n        \\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"target-btn\\\"],[12],[1,\\\"A Button\\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popper\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual((0, _testHelpers.find)('#test-popper')?.parentNode, (0, _testHelpers.find)('#original-container'), \"The popper's current parent is its original parent node\");\n    });\n    (0, _qunit.test)('it will create an id for the positioned content if not provided', async function (assert) {\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiPopper @popperTarget=\"#target-btn\" @class=\"test-popper\">Hello World</UiPopper>\n            <button id=\"target-btn\">A Button</button>\n          \n      */\n      {\n        \"id\": \"sxbxpt16\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@popperTarget\\\",\\\"@class\\\"],[\\\"#target-btn\\\",\\\"test-popper\\\"]],[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"target-btn\\\"],[12],[1,\\\"A Button\\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popper\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.test-popper').hasAttribute('id', /.+-popper/);\n    });\n    (0, _qunit.test)('it has several target-finding strategies', async function (assert) {\n      this.set('popperTarget', '#target-btn');\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <div id=\"original-container\">\n              <UiPopper @popperTarget={{this.popperTarget}} @class=\"test-popper\">Hello World</UiPopper>\n            </div>\n      \n            <button id=\"target-btn\">A Button</button>\n            <button id=\"other-target\">Another Button</button>\n          \n      */\n      {\n        \"id\": \"Wc5ZSSa8\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,0],[14,1,\\\"original-container\\\"],[12],[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@popperTarget\\\",\\\"@class\\\"],[[30,0,[\\\"popperTarget\\\"]],\\\"test-popper\\\"]],[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"target-btn\\\"],[12],[1,\\\"A Button\\\"],[13],[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"other-target\\\"],[12],[1,\\\"Another Button\\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popper\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const popperId = (0, _testHelpers.find)('.test-popper')?.getAttribute('id')?.replace('-popper', '');\n      const instance = (0, _lookupComponent.default)(this, popperId);\n      assert.strictEqual(instance.realPopperTarget, (0, _testHelpers.find)('#target-btn'));\n      this.set('popperTarget', (0, _testHelpers.find)('#other-target'));\n      await (0, _testHelpers.settled)();\n      assert.strictEqual(instance.realPopperTarget, (0, _testHelpers.find)('#other-target'));\n      this.set('popperTarget', undefined);\n      await (0, _testHelpers.settled)();\n      assert.strictEqual(instance.realPopperTarget, (0, _testHelpers.find)('#original-container'));\n    });\n    (0, _qunit.test)('it can be dynamically configured', async function (assert) {\n      this.set('handlePopperUpdate', undefined);\n      this.set('placement', 'bottom');\n      this.set('renderInPlace', false);\n      this.set('enabled', true);\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <div id=\"original-container\">\n              <UiPopper\n                      @popperTarget=\"#target-btn\"\n                      @id=\"test-popper\"\n                      @renderInPlace={{this.renderInPlace}}\n                      @placement={{this.placement}}\n                      @enabled={{this.enabled}}\n                      @onUpdate={{this.handlePopperUpdate}}\n              >\n                Hello World\n              </UiPopper>\n            </div>\n      \n            <button id=\"target-btn\" style=\"margin-top: 50px; margin-left: 50px;\">A Button</button>\n          \n      */\n      {\n        \"id\": \"pP9BSK6+\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,0],[14,1,\\\"original-container\\\"],[12],[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@popperTarget\\\",\\\"@id\\\",\\\"@renderInPlace\\\",\\\"@placement\\\",\\\"@enabled\\\",\\\"@onUpdate\\\"],[\\\"#target-btn\\\",\\\"test-popper\\\",[30,0,[\\\"renderInPlace\\\"]],[30,0,[\\\"placement\\\"]],[30,0,[\\\"enabled\\\"]],[30,0,[\\\"handlePopperUpdate\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n          Hello World\\\\n        \\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n\\\\n      \\\"],[10,\\\"button\\\"],[14,1,\\\"target-btn\\\"],[14,5,\\\"margin-top: 50px; margin-left: 50px;\\\"],[12],[1,\\\"A Button\\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-popper\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('#test-popper').isVisible();\n      assert.dom('#test-popper').hasAttribute('data-popper-placement', 'bottom');\n      this.set('placement', 'right');\n      await (0, _testHelpers.settled)();\n      assert.dom('#test-popper').hasAttribute('data-popper-placement', 'right');\n      assert.notEqual((0, _testHelpers.find)('#test-popper')?.parentNode, (0, _testHelpers.find)('#original-container'), 'The popper has been moved out of its original parent node');\n      this.set('renderInPlace', true);\n      await (0, _testHelpers.settled)();\n      assert.strictEqual((0, _testHelpers.find)('#test-popper')?.parentNode, (0, _testHelpers.find)('#original-container'), \"The popper's current parent is its original parent node\");\n      this.set('enabled', false);\n      await (0, _testHelpers.settled)();\n      assert.dom('#test-popper').exists();\n      assert.dom('#test-popper').isNotVisible();\n      assert.dom('#test-popper').doesNotHaveAttribute('data-popper-placement');\n      assert.dom('#test-popper').hasAttribute('data-popper-disabled');\n      assert.dom('#test-popper').hasStyle({\n        display: 'none'\n      });\n      let onUpdateCount = 0;\n      this.set('enabled', true);\n      this.set('placement', 'top');\n      this.set('renderInPlace', false);\n      this.set('handlePopperUpdate', () => {\n        if (onUpdateCount < 2) {\n          assert.step('onUpdate');\n        }\n\n        // This could wind up getting called a lot depending on a ton of factors\n        // that PopperJS deems relevant. Don't care about all of the calls, just\n        // the couple expected ones.\n        onUpdateCount += 1;\n      });\n      await (0, _testHelpers.settled)();\n      assert.dom('#test-popper').isVisible();\n      assert.dom('#test-popper').doesNotHaveAttribute('data-popper-disabled');\n      assert.dom('#test-popper').hasAttribute('data-popper-placement', 'top');\n\n      // @ts-expect-error The root testing element will always have a parent\n      await (0, _testHelpers.scrollTo)((0, _testHelpers.getRootElement)().parentElement, 0, 30);\n      await (0, _testHelpers.settled)();\n\n      // Two calls are expected - the first will happen as a result of the popper\n      // being enabled and its layout getting calculated. The second will be due\n      // to the scroll event that just occurred.\n      assert.verifySteps(['onUpdate', 'onUpdate']);\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-progress-bar-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@nsf-open/ember-ui-foundation/lib/ProgressManager\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _ProgressManager) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\",0,\"@nsf-open/ember-ui-foundation/lib/ProgressManager\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-progress-bar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it displays a navigable chevron bar', async function (assert) {\n      const manager = new _ProgressManager.default([{\n        label: 'Step A',\n        indeterminate: true\n      }, {\n        label: 'Step B'\n      }, {\n        label: 'Step C',\n        complete: true\n      }]);\n      this.set('manager', manager);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiProgressBar @manager={{this.manager}} />\n      */\n      {\n        \"id\": \"QZ5my2c9\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@manager\\\"],[[30,0,[\\\"manager\\\"]]]],null]],[],false,[\\\"ui-progress-bar\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const chevron1 = 'ol.progress-chevrons li:nth-child(1)';\n      const chevron2 = 'ol.progress-chevrons li:nth-child(2)';\n      const chevron3 = 'ol.progress-chevrons li:nth-child(3)';\n      function shouldHaveClass(selector, classNames) {\n        classNames.forEach(function (name) {\n          assert.dom(selector).hasClass(name);\n        });\n      }\n      function shouldNotHaveClass(selector, classNames) {\n        classNames.forEach(function (name) {\n          assert.dom(selector).doesNotHaveClass(name);\n        });\n      }\n      shouldHaveClass(chevron1, ['chevron', 'active', 'indeterminate']);\n      shouldNotHaveClass(chevron1, ['complete', 'incomplete', 'inactive', 'prev-active', 'past-active', 'next-active', 'future-active']);\n      shouldHaveClass(chevron2, ['chevron', 'inactive', 'incomplete', 'prev-active', 'past-active']);\n      shouldNotHaveClass(chevron2, ['complete', 'indeterminate', 'active', 'next-active', 'future-active']);\n      shouldHaveClass(chevron3, ['chevron', 'inactive', 'complete', 'past-active']);\n      shouldNotHaveClass(chevron3, ['incomplete', 'indeterminate', 'active', 'prev-active', 'next-active', 'future-active']);\n      assert.dom(`${chevron1} a`).doesNotExist();\n      assert.dom(`${chevron2} a`).exists();\n      assert.dom(`${chevron3} a`).doesNotExist();\n      await (0, _testHelpers.click)(`${chevron2} a`);\n      shouldHaveClass(chevron1, ['chevron', 'inactive', 'indeterminate', 'next-active', 'future-active']);\n      shouldNotHaveClass(chevron1, ['complete', 'incomplete', 'active', 'prev-active', 'past-active']);\n      shouldHaveClass(chevron2, ['chevron', 'active', 'incomplete']);\n      shouldNotHaveClass(chevron2, ['complete', 'inactive', 'prev-active', 'past-active', 'next-active', 'future-active']);\n      shouldHaveClass(chevron3, ['chevron', 'inactive', 'complete', 'prev-active', 'past-active']);\n      shouldNotHaveClass(chevron3, ['incomplete', 'indeterminate', 'active', 'next-active', 'future-active']);\n      assert.dom(`${chevron1} a`).exists();\n      assert.dom(`${chevron2} a`).doesNotExist();\n      assert.dom(`${chevron3} a`).doesNotExist();\n      manager.getStepAt(1)?.markComplete();\n      await (0, _testHelpers.settled)();\n      assert.dom(chevron2).hasClass('complete');\n      assert.dom(chevron2).doesNotHaveClass('incomplete');\n      assert.dom(`${chevron1} a`).exists();\n      assert.dom(`${chevron2} a`).doesNotExist();\n      assert.dom(`${chevron3} a`).exists();\n      await (0, _testHelpers.click)(`${chevron3} a`);\n      shouldHaveClass(chevron1, ['chevron', 'inactive', 'indeterminate', 'future-active']);\n      shouldNotHaveClass(chevron1, ['complete', 'incomplete', 'active', 'prev-active', 'past-active', 'next-active']);\n      shouldHaveClass(chevron2, ['chevron', 'inactive', 'complete', 'next-active', 'future-active']);\n      shouldNotHaveClass(chevron2, ['incomplete', 'active', 'prev-active', 'past-active']);\n      shouldHaveClass(chevron3, ['chevron', 'active', 'complete']);\n      shouldNotHaveClass(chevron3, ['incomplete', 'indeterminate', 'inactive', 'prev-active', 'past-active', 'next-active', 'future-active']);\n    });\n    (0, _qunit.test)('it optionally prefixes chevrons with numbers', async function (assert) {\n      const manager = new _ProgressManager.default([{\n        label: 'Step A'\n      }, {\n        label: 'Step B'\n      }]);\n      this.set('manager', manager);\n      this.set('number', false);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiProgressBar @manager={{this.manager}} @number={{this.number}} />\n      */\n      {\n        \"id\": \"l16Wk7x8\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@manager\\\",\\\"@number\\\"],[[30,0,[\\\"manager\\\"]],[30,0,[\\\"number\\\"]]]],null]],[],false,[\\\"ui-progress-bar\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const chevron1 = 'ol.progress-chevrons li:nth-child(1) .content';\n      const chevron2 = 'ol.progress-chevrons li:nth-child(2) .content';\n      assert.dom(`${chevron1} span:nth-child(1)`).hasClass('hidden-md-up');\n      assert.dom(`${chevron1} span:nth-child(1)`).hasText('1.');\n      assert.dom(`${chevron1} span:nth-child(2)`).hasText('Step A');\n      assert.dom(`${chevron2} span:nth-child(1)`).hasClass('hidden-md-up');\n      assert.dom(`${chevron2} span:nth-child(1)`).hasText('2.');\n      assert.dom(`${chevron2} span:nth-child(2)`).hasText('Step B');\n      this.set('number', true);\n      assert.dom(`${chevron1} span:nth-child(1)`).doesNotHaveClass('hidden-md-up');\n      assert.dom(`${chevron2} span:nth-child(1)`).doesNotHaveClass('hidden-md-up');\n    });\n    (0, _qunit.test)('it optionally spans the whole width of its parent container', async function (assert) {\n      const manager = new _ProgressManager.default([{\n        label: 'Step A'\n      }, {\n        label: 'Step B'\n      }]);\n      this.set('manager', manager);\n      this.set('compact', true);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiProgressBar @manager={{this.manager}} @compact={{this.compact}} />\n      */\n      {\n        \"id\": \"8eRcD4q3\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@manager\\\",\\\"@compact\\\"],[[30,0,[\\\"manager\\\"]],[30,0,[\\\"compact\\\"]]]],null]],[],false,[\\\"ui-progress-bar\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('ol.progress-chevrons').hasClass('progress-chevrons-compact');\n      this.set('compact', false);\n      assert.dom('ol.progress-chevrons').doesNotHaveClass('progress-chevrons-compact');\n    });\n    (0, _qunit.test)('it optionally displays checkmarks at the end of completed steps', async function (assert) {\n      const manager = new _ProgressManager.default([{\n        label: 'Step A',\n        indeterminate: true\n      }, {\n        label: 'Step B',\n        complete: true\n      }, {\n        label: 'Step C'\n      }]);\n      this.set('manager', manager);\n      this.set('checkmark', false);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiProgressBar @manager={{this.manager}} @checkmark={{this.checkmark}} />\n      */\n      {\n        \"id\": \"cPu2Xiii\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@manager\\\",\\\"@checkmark\\\"],[[30,0,[\\\"manager\\\"]],[30,0,[\\\"checkmark\\\"]]]],null]],[],false,[\\\"ui-progress-bar\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const chevron1 = 'ol.progress-chevrons li:nth-child(1) .content';\n      const chevron2 = 'ol.progress-chevrons li:nth-child(2) .content';\n      const chevron3 = 'ol.progress-chevrons li:nth-child(3) .content';\n      assert.dom(`${chevron1} span:nth-child(3)`).doesNotExist();\n      assert.dom(`${chevron2} span:nth-child(3)`).doesNotExist();\n      assert.dom(`${chevron3} span:nth-child(3)`).doesNotExist();\n      this.set('checkmark', true);\n      assert.dom(`${chevron1} span:nth-child(3)`).hasClass('fa-fw');\n      assert.dom(`${chevron1} span:nth-child(3)`).hasClass('fa-check');\n      assert.dom(`${chevron2} span:nth-child(3)`).hasClass('fa-fw');\n      assert.dom(`${chevron2} span:nth-child(3)`).hasClass('fa-check');\n      assert.dom(`${chevron3} span:nth-child(3)`).hasClass('fa-fw');\n      assert.dom(`${chevron3} span:nth-child(3)`).doesNotHaveClass('fa-check');\n      manager.getStepAt(2)?.markComplete();\n      await (0, _testHelpers.settled)();\n      assert.dom(`${chevron3} span:nth-child(3)`).hasClass('fa-check');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-sorter-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-sorter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    const recordSet = [{\n      firstName: 'Herbert',\n      lastName: 'Labadie'\n    }, {\n      firstName: 'Caleb',\n      lastName: 'Welch'\n    }, {\n      firstName: 'Lila',\n      lastName: 'Yundt'\n    }, {\n      firstName: 'Brittany',\n      lastName: 'Kuhic'\n    }, {\n      firstName: 'Terence',\n      lastName: 'Brakus'\n    }, {\n      firstName: 'Iris',\n      lastName: 'Feil'\n    }, {\n      firstName: 'Homer',\n      lastName: 'Dietrich'\n    }, {\n      firstName: 'Stacy',\n      lastName: 'Dietrich'\n    }, {\n      firstName: 'Karla',\n      lastName: 'Dietrich'\n    }, {\n      firstName: 'Clifton',\n      lastName: 'Koelpin'\n    }, {\n      firstName: 'Olive',\n      lastName: 'Abernathy'\n    }, {\n      firstName: 'Debra',\n      lastName: 'Feil'\n    }, {\n      firstName: 'Melody',\n      lastName: 'Kreiger'\n    }, {\n      firstName: 'Belinda',\n      lastName: 'Emard'\n    }, {\n      firstName: 'Lyle',\n      lastName: 'Halvorson'\n    }];\n    async function renderComponent() {\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiSorter @records={{this.recordSet}} as |Sorter|>\n              <p class=\"text-right\">{{Sorter.description}}</p>\n      \n              <table class=\"table table-striped table-condensed\">\n                <thead>\n                  <tr>\n                    <Sorter.Criterion\n                      @sortOn=\"firstName\"\n                      @name={{this.firstNameDisplayName}}\n                      @direction={{this.firstNameSortDirection}}\n                      @subSortOn={{this.firstNameSubSortOn}}\n                      @subSortDirection={{this.firstNameSubSortDirection}}\n                    as |Criterion|>\n                      <th onclick={{Criterion.cycleDirection}} aria-sort=\"{{Criterion.direction}}\">\n                          {{if Criterion.index (concat Criterion.index '. ')}}\n                          First Name\n                          <UiIcon @name={{Criterion.iconClass}} />\n                      </th>\n                    </Sorter.Criterion>\n      \n                    <Sorter.Criterion\n                      @sortOn=\"lastName\"\n                      @name={{this.lastNameDisplayName}}\n                      @direction={{this.lastNameSortDirection}}\n                      @subSortOn={{this.lastNameSubSortOn}}\n                      @subSortDirection={{this.lastNameSubSortDirection}}\n                    as |Criterion|>\n                      <th onclick={{Criterion.cycleDirection}} aria-sort=\"{{Criterion.direction}}\">\n                        {{if Criterion.index (concat Criterion.index '. ')}}\n                        Last Name\n                        <UiIcon @name={{Criterion.iconClass}} />\n                      </th>\n                    </Sorter.Criterion>\n                  </tr>\n                </thead>\n      \n                  <tbody>\n                  {{#each Sorter.sortedRecords as |record|}}\n                      <tr>\n                          <td>{{record.firstName}}</td>\n                          <td>{{record.lastName}}</td>\n                      </tr>\n                  {{/each}}\n                  </tbody>\n              </table>\n            </UiSorter>\n          \n      */\n      {\n        \"id\": \"y8KN2v0l\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@records\\\"],[[30,0,[\\\"recordSet\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[10,2],[14,0,\\\"text-right\\\"],[12],[1,[30,1,[\\\"description\\\"]]],[13],[1,\\\"\\\\n\\\\n        \\\"],[10,\\\"table\\\"],[14,0,\\\"table table-striped table-condensed\\\"],[12],[1,\\\"\\\\n          \\\"],[10,\\\"thead\\\"],[12],[1,\\\"\\\\n            \\\"],[10,\\\"tr\\\"],[12],[1,\\\"\\\\n              \\\"],[8,[30,1,[\\\"Criterion\\\"]],null,[[\\\"@sortOn\\\",\\\"@name\\\",\\\"@direction\\\",\\\"@subSortOn\\\",\\\"@subSortDirection\\\"],[\\\"firstName\\\",[30,0,[\\\"firstNameDisplayName\\\"]],[30,0,[\\\"firstNameSortDirection\\\"]],[30,0,[\\\"firstNameSubSortOn\\\"]],[30,0,[\\\"firstNameSubSortDirection\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n                \\\"],[10,\\\"th\\\"],[15,\\\"onclick\\\",[30,2,[\\\"cycleDirection\\\"]]],[15,\\\"aria-sort\\\",[29,[[30,2,[\\\"direction\\\"]]]]],[12],[1,\\\"\\\\n                    \\\"],[1,[52,[30,2,[\\\"index\\\"]],[28,[37,2],[[30,2,[\\\"index\\\"]],\\\". \\\"],null]]],[1,\\\"\\\\n                    First Name\\\\n                    \\\"],[8,[39,3],null,[[\\\"@name\\\"],[[30,2,[\\\"iconClass\\\"]]]],null],[1,\\\"\\\\n                \\\"],[13],[1,\\\"\\\\n              \\\"]],[2]]]]],[1,\\\"\\\\n\\\\n              \\\"],[8,[30,1,[\\\"Criterion\\\"]],null,[[\\\"@sortOn\\\",\\\"@name\\\",\\\"@direction\\\",\\\"@subSortOn\\\",\\\"@subSortDirection\\\"],[\\\"lastName\\\",[30,0,[\\\"lastNameDisplayName\\\"]],[30,0,[\\\"lastNameSortDirection\\\"]],[30,0,[\\\"lastNameSubSortOn\\\"]],[30,0,[\\\"lastNameSubSortDirection\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n                \\\"],[10,\\\"th\\\"],[15,\\\"onclick\\\",[30,3,[\\\"cycleDirection\\\"]]],[15,\\\"aria-sort\\\",[29,[[30,3,[\\\"direction\\\"]]]]],[12],[1,\\\"\\\\n                  \\\"],[1,[52,[30,3,[\\\"index\\\"]],[28,[37,2],[[30,3,[\\\"index\\\"]],\\\". \\\"],null]]],[1,\\\"\\\\n                  Last Name\\\\n                  \\\"],[8,[39,3],null,[[\\\"@name\\\"],[[30,3,[\\\"iconClass\\\"]]]],null],[1,\\\"\\\\n                \\\"],[13],[1,\\\"\\\\n              \\\"]],[3]]]]],[1,\\\"\\\\n            \\\"],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n\\\\n            \\\"],[10,\\\"tbody\\\"],[12],[1,\\\"\\\\n\\\"],[42,[28,[37,5],[[28,[37,5],[[30,1,[\\\"sortedRecords\\\"]]],null]],null],null,[[[1,\\\"                \\\"],[10,\\\"tr\\\"],[12],[1,\\\"\\\\n                    \\\"],[10,\\\"td\\\"],[12],[1,[30,4,[\\\"firstName\\\"]]],[13],[1,\\\"\\\\n                    \\\"],[10,\\\"td\\\"],[12],[1,[30,4,[\\\"lastName\\\"]]],[13],[1,\\\"\\\\n                \\\"],[13],[1,\\\"\\\\n\\\"]],[4]],null],[1,\\\"            \\\"],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"Sorter\\\",\\\"Criterion\\\",\\\"Criterion\\\",\\\"record\\\"],false,[\\\"ui-sorter\\\",\\\"if\\\",\\\"concat\\\",\\\"ui-icon\\\",\\\"each\\\",\\\"-track-array\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n    }\n    function tableCell(row, col) {\n      return `table tbody tr:nth-child(${row}) td:nth-child(${col})`;\n    }\n    function tableHeader(col) {\n      return `table thead tr th:nth-child(${col})`;\n    }\n    (0, _qunit.test)('it sorts an array', async function (assert) {\n      this.set('recordSet', recordSet);\n      this.set('firstNameSortDirection', 'none');\n      this.set('lastNameSortDirection', 'none');\n      await renderComponent();\n\n      // With no sorting in place, the table should show everything in\n      // exactly the order provided\n      assert.dom('p').hasText('No sorting has been applied');\n      assert.dom(tableHeader(1)).hasText('First Name').hasAria('sort', 'none');\n      assert.dom(`${tableHeader(1)} .fa`).hasClass('fa-sort');\n      assert.dom(tableHeader(2)).hasText('Last Name').hasAria('sort', 'none');\n      assert.dom(`${tableHeader(2)} .fa`).hasClass('fa-sort');\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom(tableCell(1, 1)).hasText('Herbert');\n      assert.dom(tableCell(15, 2)).hasText('Halvorson');\n\n      // Ascending first name\n      await (0, _testHelpers.click)(tableHeader(1));\n      assert.dom('p').hasText('Sorted on First Name ascending');\n      assert.dom(tableHeader(1)).hasText('1. First Name').hasAria('sort', 'ascending');\n      assert.dom(`${tableHeader(1)} .fa`).hasClass('fa-sort-asc');\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom(tableCell(1, 1)).hasText('Belinda');\n      assert.dom(tableCell(15, 2)).hasText('Brakus');\n\n      // Descending first name\n      await (0, _testHelpers.click)(tableHeader(1));\n      assert.dom('p').hasText('Sorted on First Name descending');\n      assert.dom(tableHeader(1)).hasText('1. First Name').hasAria('sort', 'descending');\n      assert.dom(`${tableHeader(1)} .fa`).hasClass('fa-sort-desc');\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom(tableCell(1, 1)).hasText('Terence');\n      assert.dom(tableCell(15, 2)).hasText('Emard');\n\n      // Back to default\n      await (0, _testHelpers.click)(tableHeader(1));\n      assert.dom('p').hasText('No sorting has been applied');\n      assert.dom(tableHeader(1)).hasText('First Name').hasAria('sort', 'none');\n      assert.dom(`${tableHeader(1)} .fa`).hasClass('fa-sort');\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom(tableCell(1, 1)).hasText('Herbert');\n      assert.dom(tableCell(15, 2)).hasText('Halvorson');\n\n      // Time to try two active sorters\n      await (0, _testHelpers.click)(tableHeader(2));\n      assert.dom('p').hasText('Sorted on Last Name ascending');\n      await (0, _testHelpers.click)(tableHeader(2));\n      assert.dom(tableCell(11, 1)).hasText('Homer');\n      assert.dom(tableCell(11, 2)).hasText('Dietrich');\n      assert.dom(tableCell(12, 1)).hasText('Stacy');\n      assert.dom(tableCell(12, 2)).hasText('Dietrich');\n      assert.dom(tableCell(13, 1)).hasText('Karla');\n      assert.dom(tableCell(13, 2)).hasText('Dietrich');\n      await (0, _testHelpers.click)(tableHeader(1));\n      assert.dom('p').hasText('Sorted on Last Name descending, First Name ascending');\n      assert.dom(tableHeader(1)).hasText('2. First Name');\n      assert.dom(tableHeader(2)).hasText('1. Last Name');\n      assert.dom(tableCell(11, 1)).hasText('Homer');\n      assert.dom(tableCell(11, 2)).hasText('Dietrich');\n      assert.dom(tableCell(12, 1)).hasText('Karla');\n      assert.dom(tableCell(12, 2)).hasText('Dietrich');\n      assert.dom(tableCell(13, 1)).hasText('Stacy');\n      assert.dom(tableCell(13, 2)).hasText('Dietrich');\n      await (0, _testHelpers.click)(tableHeader(2));\n      assert.dom('p').hasText('Sorted on First Name ascending');\n      assert.dom(tableHeader(1)).hasText('1. First Name');\n    });\n    (0, _qunit.test)('sorts can be configured when the component is initialized', async function (assert) {\n      this.set('recordSet', recordSet);\n      this.set('firstNameSortDirection', 'none');\n      this.set('lastNameSortDirection', 'descending');\n      await renderComponent();\n      assert.dom('p').hasText('Sorted on Last Name descending');\n      assert.dom(tableHeader(2)).hasText('1. Last Name').hasAria('sort', 'descending');\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom(tableCell(1, 1)).hasText('Lila');\n      assert.dom(tableCell(15, 2)).hasText('Abernathy');\n    });\n    (0, _qunit.test)('sub-sorting can be configured', async function (assert) {\n      this.set('recordSet', recordSet);\n      this.set('firstNameSortDirection', 'none');\n      this.set('lastNameSortDirection', 'none');\n      this.set('lastNameSubSortOn', 'firstName');\n      await renderComponent();\n      assert.dom('p').hasText('No sorting has been applied');\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom(tableCell(1, 1)).hasText('Herbert');\n      assert.dom(tableCell(15, 2)).hasText('Halvorson');\n\n      // Ascending first name\n      await (0, _testHelpers.click)(tableHeader(2));\n      assert.dom(tableCell(3, 1)).hasText('Homer');\n      assert.dom(tableCell(3, 2)).hasText('Dietrich');\n      assert.dom(tableCell(4, 1)).hasText('Karla');\n      assert.dom(tableCell(4, 2)).hasText('Dietrich');\n      assert.dom(tableCell(5, 1)).hasText('Stacy');\n      assert.dom(tableCell(5, 2)).hasText('Dietrich');\n      await (0, _testHelpers.click)(tableHeader(2));\n      assert.dom(tableCell(11, 1)).hasText('Stacy');\n      assert.dom(tableCell(11, 2)).hasText('Dietrich');\n      assert.dom(tableCell(12, 1)).hasText('Karla');\n      assert.dom(tableCell(12, 2)).hasText('Dietrich');\n      assert.dom(tableCell(13, 1)).hasText('Homer');\n      assert.dom(tableCell(13, 2)).hasText('Dietrich');\n    });\n    (0, _qunit.test)('sub-sorting can be pinned in a specific direction', async function (assert) {\n      this.set('recordSet', recordSet);\n      this.set('firstNameSortDirection', 'none');\n      this.set('lastNameSortDirection', 'none');\n      this.set('lastNameSubSortOn', 'firstName');\n      this.set('lastNameSubSortDirection', 'ascending');\n      await renderComponent();\n      assert.dom('p').hasText('No sorting has been applied');\n      assert.dom('table tbody tr').exists({\n        count: 15\n      });\n      assert.dom(tableCell(1, 1)).hasText('Herbert');\n      assert.dom(tableCell(15, 2)).hasText('Halvorson');\n\n      // Ascending first name\n      await (0, _testHelpers.click)(tableHeader(2));\n      assert.dom(tableCell(3, 1)).hasText('Homer');\n      assert.dom(tableCell(3, 2)).hasText('Dietrich');\n      assert.dom(tableCell(4, 1)).hasText('Karla');\n      assert.dom(tableCell(4, 2)).hasText('Dietrich');\n      assert.dom(tableCell(5, 1)).hasText('Stacy');\n      assert.dom(tableCell(5, 2)).hasText('Dietrich');\n      await (0, _testHelpers.click)(tableHeader(2));\n      assert.dom(tableCell(11, 1)).hasText('Homer');\n      assert.dom(tableCell(11, 2)).hasText('Dietrich');\n      assert.dom(tableCell(12, 1)).hasText('Karla');\n      assert.dom(tableCell(12, 2)).hasText('Dietrich');\n      assert.dom(tableCell(13, 1)).hasText('Stacy');\n      assert.dom(tableCell(13, 2)).hasText('Dietrich');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-stepflow-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/define-component\", \"dummy/tests/helpers/lookup-component\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _defineComponent, _lookupComponent) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\",0,\"dummy/tests/helpers/define-component\",0,\"dummy/tests/helpers/lookup-component\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-stepflow', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('component:test-component-a', (0, _defineComponent.default)('step-a', (0, _templateFactory.createTemplateFactory)(\n      /*\n        The First Step\n      */\n      {\n        \"id\": \"eLuvroT7\",\n        \"block\": \"[[[1,\\\"The First Step\\\"]],[],false,[]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      })));\n      this.owner.register('component:test-component-b', (0, _defineComponent.default)('step-b', (0, _templateFactory.createTemplateFactory)(\n      /*\n        The Penultimate Step\n      */\n      {\n        \"id\": \"kvzlmhXd\",\n        \"block\": \"[[[1,\\\"The Penultimate Step\\\"]],[],false,[]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      })));\n      this.owner.register('component:test-component-c', (0, _defineComponent.default)('step-c', (0, _templateFactory.createTemplateFactory)(\n      /*\n        The Final Step\n      */\n      {\n        \"id\": \"MR8DvtjX\",\n        \"block\": \"[[[1,\\\"The Final Step\\\"]],[],false,[]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      })));\n    });\n    (0, _qunit.test)('it exposes additional properties to components that it renders', async function (assert) {\n      const progressData = {\n        content: 'Hello World'\n      };\n      this.set('data', progressData);\n      this.set('steps', [{\n        label: 'Step A',\n        component: 'test-component-a'\n      }]);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiStepflow @id=\"stepflow\" @steps={{this.steps}} @data={{this.data}} />\n      */\n      {\n        \"id\": \"Z3aYlHq8\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@id\\\",\\\"@steps\\\",\\\"@data\\\"],[\\\"stepflow\\\",[30,0,[\\\"steps\\\"]],[30,0,[\\\"data\\\"]]]],null]],[],false,[\\\"ui-stepflow\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const flow = (0, _lookupComponent.default)(this, 'stepflow');\n      const stepA = (0, _lookupComponent.default)(this, 'step-a');\n      assert.strictEqual(stepA.progressManager, flow.manager);\n      assert.strictEqual(stepA.progressItem, flow.manager.getStepAt(0));\n      assert.strictEqual(stepA.progressData, progressData);\n    });\n    (0, _qunit.test)('it displays a navigable set of components', async function (assert) {\n      this.set('steps', [{\n        label: 'Step A',\n        component: 'test-component-a',\n        indeterminate: true\n      }, {\n        label: 'Step B',\n        component: 'test-component-b',\n        indeterminate: true\n      }, {\n        label: 'Step C',\n        title: 'Final Step',\n        component: 'test-component-c',\n        indeterminate: true\n      }]);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiStepflow @steps={{this.steps}} />\n      */\n      {\n        \"id\": \"K07szCSz\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@steps\\\"],[[30,0,[\\\"steps\\\"]]]],null]],[],false,[\\\"ui-stepflow\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('ol.progress-chevrons li').exists({\n        count: 3\n      });\n      assert.dom('ol.progress-chevrons li:first-child').hasClass('active');\n      assert.dom('.panel header').hasText('Step A');\n      assert.dom('.panel-body').hasText('The First Step');\n      assert.dom('[data-test-id=\"next-btn\"]').isEnabled();\n      assert.dom('[data-test-id=\"next-btn\"]').hasText('Next');\n      await (0, _testHelpers.click)('[data-test-id=\"next-btn\"]');\n      assert.dom('ol.progress-chevrons li:nth-child(2)').hasClass('active');\n      assert.dom('.panel header').hasText('Step B');\n      assert.dom('.panel-body').hasText('The Penultimate Step');\n      assert.dom('[data-test-id=\"previous-btn\"]').isEnabled();\n      assert.dom('[data-test-id=\"previous-btn\"]').hasText('Previous');\n      await (0, _testHelpers.click)('[data-test-id=\"next-btn\"]');\n      assert.dom('ol.progress-chevrons li:nth-child(3)').hasClass('active');\n      assert.dom('.panel header').hasText('Final Step');\n      assert.dom('.panel-body').hasText('The Final Step');\n      assert.dom('[data-test-id=\"next-btn\"]').doesNotExist();\n      assert.dom('[data-test-id=\"complete-btn\"]').isEnabled();\n      assert.dom('[data-test-id=\"complete-btn\"]').hasText('Submit');\n    });\n    (0, _qunit.test)('it displays a navigable button bar', async function (assert) {\n      this.set('steps', [{\n        label: 'Step A',\n        component: 'test-component-a',\n        indeterminate: true\n      }, {\n        label: 'Step B',\n        component: 'test-component-b'\n      }, {\n        label: 'Step C',\n        component: 'test-component-c'\n      }]);\n      this.set('handleComplete', () => assert.step('Complete'));\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        <UiStepflow\n                    @steps={{this.steps}}\n                    @testId=\"stepflow\"\n                    @onCompleteStepFlow={{action this.handleComplete}}\n            />\n      */\n      {\n        \"id\": \"jieRbcyo\",\n        \"block\": \"[[[8,[39,0],null,[[\\\"@steps\\\",\\\"@testId\\\",\\\"@onCompleteStepFlow\\\"],[[30,0,[\\\"steps\\\"]],\\\"stepflow\\\",[28,[37,1],[[30,0],[30,0,[\\\"handleComplete\\\"]]],null]]],null]],[],false,[\\\"ui-stepflow\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const prevBtn = '[data-test-id=\"stepflow-navigation\"] [data-test-id=\"previous-btn\"]';\n      const nextBtn = '[data-test-id=\"stepflow-navigation\"] [data-test-id=\"next-btn\"]';\n      const saveBtn = '[data-test-id=\"stepflow-navigation\"] [data-test-id=\"complete-btn\"]';\n      assert.dom(nextBtn).isVisible();\n      assert.dom(nextBtn).isEnabled();\n      assert.dom(prevBtn).doesNotExist();\n      assert.dom(saveBtn).doesNotExist();\n      await (0, _testHelpers.click)(nextBtn);\n      assert.dom(nextBtn).isVisible();\n      assert.dom(nextBtn).isDisabled();\n      assert.dom(prevBtn).isVisible();\n      assert.dom(prevBtn).isEnabled();\n      assert.dom(saveBtn).doesNotExist();\n      const stepB = (0, _lookupComponent.default)(this, 'step-b');\n      stepB.progressItem.markComplete();\n      await (0, _testHelpers.settled)();\n      assert.dom(nextBtn).isEnabled();\n      stepB.progressItem.markIncomplete();\n      await (0, _testHelpers.settled)();\n      assert.dom(nextBtn).isDisabled();\n      stepB.progressItem.markComplete();\n      await (0, _testHelpers.settled)();\n      await (0, _testHelpers.click)(nextBtn);\n      assert.dom(saveBtn).isVisible();\n      assert.dom(saveBtn).isDisabled();\n      assert.dom(prevBtn).isVisible();\n      assert.dom(prevBtn).isEnabled();\n      assert.dom(nextBtn).doesNotExist();\n      await (0, _testHelpers.click)(prevBtn);\n      assert.dom(nextBtn).isVisible();\n      assert.dom(nextBtn).isEnabled();\n      assert.dom(prevBtn).isVisible();\n      assert.dom(prevBtn).isEnabled();\n      assert.dom(saveBtn).doesNotExist();\n      await (0, _testHelpers.click)(prevBtn);\n      assert.dom(nextBtn).isVisible();\n      assert.dom(nextBtn).isEnabled();\n      assert.dom(prevBtn).doesNotExist();\n      assert.dom(saveBtn).doesNotExist();\n      await (0, _testHelpers.click)(nextBtn);\n      await (0, _testHelpers.click)(nextBtn);\n      const stepC = (0, _lookupComponent.default)(this, 'step-c');\n      stepC.progressItem.markComplete();\n      await (0, _testHelpers.settled)();\n      assert.dom(saveBtn).isEnabled();\n      await (0, _testHelpers.click)(saveBtn);\n      assert.verifySteps(['Complete']);\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-tabs-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-tabs', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders multiple tabs', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiTabs data-test-tabs as |tabs|>\n              <tabs.Option>Tab A</tabs.Option>\n              <tabs.Option @text=\"Tab B\" />\n            </UiTabs>\n          \n      */\n      {\n        \"id\": \"c93uNubR\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],[[24,\\\"data-test-tabs\\\",\\\"\\\"]],null,[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,null,[[\\\"default\\\"],[[[[1,\\\"Tab A\\\"]],[]]]]],[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,[[\\\"@text\\\"],[\\\"Tab B\\\"]],null],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"tabs\\\"],false,[\\\"ui-tabs\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      function testTab(element, text) {\n        assert.dom(element).isVisible();\n        assert.dom(element).hasAttribute('data-test-id', 'tabs-option');\n        assert.dom(element).hasAttribute('role', 'presentation');\n        assert.dom('a', element).hasClass('btn-tab');\n        assert.dom('a', element).hasAttribute('href', '#');\n        assert.dom('a', element).hasAttribute('role', 'tab');\n        assert.dom('a', element).hasText(text);\n      }\n      const el = (0, _testHelpers.find)('[data-test-tabs]') ?? undefined;\n      assert.dom(el).hasClass('nav');\n      assert.dom(el).hasClass('nav-tabs');\n      assert.dom(el).hasAttribute('role', 'tablist');\n      testTab(el?.querySelector('li:nth-child(1)') ?? undefined, 'Tab A');\n      testTab(el?.querySelector('li:nth-child(2)') ?? undefined, 'Tab B');\n    });\n    (0, _qunit.test)('it transitions active state between tabs', async function (assert) {\n      // Using only clicks\n      this.set('handleTabChange', function (newTabValue) {\n        assert.step(newTabValue);\n      });\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiTabs data-test-tabs @onChange={{action this.handleTabChange}} as |tabs|>\n              <tabs.Option @value=\"A\">Tab A</tabs.Option>\n              <tabs.Option @value=\"B\" @text=\"Tab B\" />\n            </UiTabs>\n          \n      */\n      {\n        \"id\": \"JakI/uwq\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],[[24,\\\"data-test-tabs\\\",\\\"\\\"]],[[\\\"@onChange\\\"],[[28,[37,1],[[30,0],[30,0,[\\\"handleTabChange\\\"]]],null]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,[[\\\"@value\\\"],[\\\"A\\\"]],[[\\\"default\\\"],[[[[1,\\\"Tab A\\\"]],[]]]]],[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,[[\\\"@value\\\",\\\"@text\\\"],[\\\"B\\\",\\\"Tab B\\\"]],null],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"tabs\\\"],false,[\\\"ui-tabs\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('li:nth-child(1) a').doesNotHaveClass('active');\n      assert.dom('li:nth-child(2) a').doesNotHaveClass('active');\n\n      // Change selected value to \"B\" by clicking on it\n      await (0, _testHelpers.click)('li:nth-child(2) a');\n      assert.dom('li:nth-child(1) a').doesNotHaveClass('active');\n      assert.dom('li:nth-child(2) a').hasClass('active');\n\n      // Change selected value to \"A\" by clicking on it\n      await (0, _testHelpers.click)('li:nth-child(1) a');\n      assert.dom('li:nth-child(1) a').hasClass('active');\n      assert.dom('li:nth-child(2) a').doesNotHaveClass('active');\n      assert.verifySteps(['B', 'A']);\n\n      // Using both clicks and set()\n      this.set('selected', 'A');\n\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiTabs data-test-tabs @selected={{this.selected}} @onChange={{action this.handleTabChange}} as |tabs|>\n              <tabs.Option @value=\"A\">Tab A</tabs.Option>\n              <tabs.Option @value=\"B\" @text=\"Tab B\" />\n            </UiTabs>\n          \n      */\n      {\n        \"id\": \"jwWNo7az\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],[[24,\\\"data-test-tabs\\\",\\\"\\\"]],[[\\\"@selected\\\",\\\"@onChange\\\"],[[30,0,[\\\"selected\\\"]],[28,[37,1],[[30,0],[30,0,[\\\"handleTabChange\\\"]]],null]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,[[\\\"@value\\\"],[\\\"A\\\"]],[[\\\"default\\\"],[[[[1,\\\"Tab A\\\"]],[]]]]],[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,[[\\\"@value\\\",\\\"@text\\\"],[\\\"B\\\",\\\"Tab B\\\"]],null],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"tabs\\\"],false,[\\\"ui-tabs\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('li:nth-child(1) a').hasClass('active');\n      assert.dom('li:nth-child(2) a').doesNotHaveClass('active');\n\n      // Change selected value to \"B\" by clicking on it\n      await (0, _testHelpers.click)('li:nth-child(2) a');\n\n      // Ensure that multiple clicks on the same tab don't result in multiple onChange calls\n      await (0, _testHelpers.click)('li:nth-child(2) a');\n      assert.dom('li:nth-child(1) a').doesNotHaveClass('active');\n      assert.dom('li:nth-child(2) a').hasClass('active');\n\n      // Change selected value back to \"A\"\n      this.set('selected', 'A');\n      assert.dom('li:nth-child(1) a').hasClass('active');\n      assert.dom('li:nth-child(2) a').doesNotHaveClass('active');\n\n      // Ensure that multiple sets of the same value don't result in multiple onChange calls\n      this.set('selected', 'A');\n      assert.verifySteps(['B', 'A']);\n    });\n    (0, _qunit.test)('the active tab can be changed via keyboard', async function (assert) {\n      // language=Handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiTabs data-test-tabs @selected=\"A\" as |tabs|>\n              <tabs.Option @value=\"A\">Tab A</tabs.Option>\n              <tabs.Option @value=\"B\">Tab B</tabs.Option>\n              <tabs.Option @value=\"C\">Tab C</tabs.Option>\n            </UiTabs>\n          \n      */\n      {\n        \"id\": \"XiAZTY4Q\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],[[24,\\\"data-test-tabs\\\",\\\"\\\"]],[[\\\"@selected\\\"],[\\\"A\\\"]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,[[\\\"@value\\\"],[\\\"A\\\"]],[[\\\"default\\\"],[[[[1,\\\"Tab A\\\"]],[]]]]],[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,[[\\\"@value\\\"],[\\\"B\\\"]],[[\\\"default\\\"],[[[[1,\\\"Tab B\\\"]],[]]]]],[1,\\\"\\\\n        \\\"],[8,[30,1,[\\\"Option\\\"]],null,[[\\\"@value\\\"],[\\\"C\\\"]],[[\\\"default\\\"],[[[[1,\\\"Tab C\\\"]],[]]]]],[1,\\\"\\\\n      \\\"]],[1]]]]],[1,\\\"\\\\n    \\\"]],[\\\"tabs\\\"],false,[\\\"ui-tabs\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('li:nth-child(1) a').hasClass('active');\n      await (0, _testHelpers.focus)('li:nth-child(1) a');\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-tabs]', 'keyup', 'ArrowRight');\n      assert.dom('li:nth-child(2) a').isFocused();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-tabs]', 'keyup', 'ArrowRight');\n      assert.dom('li:nth-child(3) a').isFocused();\n      await (0, _testHelpers.click)('li:nth-child(3) a');\n      assert.dom('li:nth-child(3) a').hasClass('active');\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-tooltip-attachment-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-tooltip-attachment', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it attaches event listeners to its parent element', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <button>\n              Foo <UiTooltipAttachment @testId=\"tip\">Hello World</UiTooltipAttachment>\n            </button>\n          \n      */\n      {\n        \"id\": \"svdB9Fgv\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"button\\\"],[12],[1,\\\"\\\\n        Foo \\\"],[8,[39,0],null,[[\\\"@testId\\\"],[\\\"tip\\\"]],[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-tooltip-attachment\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const overlay = (0, _testHelpers.find)('.tooltip[data-test-id=\"tip\"]');\n      assert.dom('button').hasAttribute('aria-labelledby', overlay.id);\n      assert.dom('.tooltip[data-test-id=\"tip\"]').isNotVisible();\n      await (0, _testHelpers.focus)('button');\n      assert.dom('.tooltip[data-test-id=\"tip\"]').isVisible();\n      assert.dom('.tooltip[data-test-id=\"tip\"]').hasText('Hello World');\n      await (0, _testHelpers.blur)('button');\n      assert.dom('.tooltip[data-test-id=\"tip\"]').isNotVisible();\n    });\n  });\n});","define(\"dummy/tests/integration/components/ui-tooltip-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Component | ui-tooltip', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it is shown on mouseenter, and hidden on mouseleave', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <div style=\"margin-top: 50px; text-align: center;\">\n              <UiTooltip @testId=\"tip\">Hello World</UiTooltip>\n            </div>\n          \n      */\n      {\n        \"id\": \"sNX/CM+l\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,0],[14,5,\\\"margin-top: 50px; text-align: center;\\\"],[12],[1,\\\"\\\\n        \\\"],[8,[39,0],null,[[\\\"@testId\\\"],[\\\"tip\\\"]],[[\\\"default\\\"],[[[[1,\\\"Hello World\\\"]],[]]]]],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-tooltip\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const trigger = (0, _testHelpers.find)('[data-test-id=\"tip\"]:not(.tooltip)');\n      const overlay = (0, _testHelpers.find)('.tooltip[data-test-id=\"tip\"]');\n      assert.dom(trigger).isVisible();\n      assert.dom(trigger).hasClass('fa-question-circle');\n      assert.dom(trigger).hasAttribute('aria-labelledby', overlay.id);\n      assert.dom(overlay).isNotVisible();\n      await (0, _testHelpers.triggerEvent)(trigger, 'mouseenter');\n      assert.dom(overlay).isVisible();\n      assert.dom(overlay).hasText('Hello World');\n      await (0, _testHelpers.triggerEvent)(trigger, 'mouseleave');\n      assert.dom(overlay).isNotVisible();\n    });\n    (0, _qunit.test)('it accepts onShow, onShown, onHide, and onHidden actions', async function (assert) {\n      this.set('actionCallback', function (name) {\n        assert.step(name);\n      });\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiTooltip\n              @testId=\"tip\"\n              @onShow={{action this.actionCallback \"onShow\"}}\n              @onShown={{action this.actionCallback \"onShown\"}}\n              @onHide={{action this.actionCallback \"onHide\"}}\n              @onHidden={{action this.actionCallback \"onHidden\"}}\n            >\n              Hello World\n            </UiTooltip>\n          \n      */\n      {\n        \"id\": \"UTVb6asx\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@testId\\\",\\\"@onShow\\\",\\\"@onShown\\\",\\\"@onHide\\\",\\\"@onHidden\\\"],[\\\"tip\\\",[28,[37,1],[[30,0],[30,0,[\\\"actionCallback\\\"]],\\\"onShow\\\"],null],[28,[37,1],[[30,0],[30,0,[\\\"actionCallback\\\"]],\\\"onShown\\\"],null],[28,[37,1],[[30,0],[30,0,[\\\"actionCallback\\\"]],\\\"onHide\\\"],null],[28,[37,1],[[30,0],[30,0,[\\\"actionCallback\\\"]],\\\"onHidden\\\"],null]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        Hello World\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-tooltip\\\",\\\"action\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      await (0, _testHelpers.triggerEvent)('span[data-test-id=\"tip\"]', 'mouseenter');\n      await (0, _testHelpers.triggerEvent)('span[data-test-id=\"tip\"]', 'mouseleave');\n      assert.verifySteps(['onShow', 'onShown', 'onHide', 'onHidden']);\n    });\n    (0, _qunit.test)('it allows its maximum width to be customized', async function (assert) {\n      this.set('maxWidth', undefined);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <UiTooltip @testId=\"tip\" @maxWidth={{this.maxWidth}}>\n              Hello World\n            </UiTooltip>\n          \n      */\n      {\n        \"id\": \"+1U0p+QF\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[8,[39,0],null,[[\\\"@testId\\\",\\\"@maxWidth\\\"],[\\\"tip\\\",[30,0,[\\\"maxWidth\\\"]]]],[[\\\"default\\\"],[[[[1,\\\"\\\\n        Hello World\\\\n      \\\"]],[]]]]],[1,\\\"\\\\n    \\\"]],[],false,[\\\"ui-tooltip\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('.tooltip[data-test-id=\"tip\"] .tooltip-inner').doesNotHaveAttribute('style');\n      this.set('maxWidth', 100);\n      assert.dom('.tooltip[data-test-id=\"tip\"] .tooltip-inner').hasAttribute('style', 'max-width: 100px;');\n      this.set('maxWidth', '150');\n      assert.dom('.tooltip[data-test-id=\"tip\"] .tooltip-inner').hasAttribute('style', 'max-width: 150px;');\n      this.set('maxWidth', '200px');\n      assert.dom('.tooltip[data-test-id=\"tip\"] .tooltip-inner').hasAttribute('style', 'max-width: 200px;');\n    });\n  });\n});","define(\"dummy/tests/integration/helpers/in-array-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@ember/array\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _array) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\",0,\"@ember/array\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Integration | Helpers | in-array', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it determines whether a value is within an array', async function (assert) {\n      this.set('targetArray', undefined);\n      this.set('searchValue', undefined);\n\n      // language=handlebars\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            {{#if (in-array this.targetArray this.searchValue)}}\n                <p>In Array</p>\n            {{else}}\n                <p>Not In Array</p>\n            {{/if}}\n          \n      */\n      {\n        \"id\": \"n318W4z1\",\n        \"block\": \"[[[1,\\\"\\\\n\\\"],[41,[28,[37,1],[[30,0,[\\\"targetArray\\\"]],[30,0,[\\\"searchValue\\\"]]],null],[[[1,\\\"          \\\"],[10,2],[12],[1,\\\"In Array\\\"],[13],[1,\\\"\\\\n\\\"]],[]],[[[1,\\\"          \\\"],[10,2],[12],[1,\\\"Not In Array\\\"],[13],[1,\\\"\\\\n\\\"]],[]]],[1,\\\"    \\\"]],[],false,[\\\"if\\\",\\\"in-array\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.dom('p').hasText('Not In Array');\n      const targetArray = (0, _array.A)([1, 2, 3]);\n      this.set('targetArray', targetArray);\n      assert.dom('p').hasText('Not In Array');\n      this.set('searchValue', 3);\n      assert.dom('p').hasText('In Array');\n      this.set('searchValue', 4);\n      assert.dom('p').hasText('Not In Array');\n      targetArray.pushObject(4);\n      await (0, _testHelpers.settled)();\n      assert.dom('p').hasText('In Array');\n      targetArray.removeObject(2);\n      await (0, _testHelpers.settled)();\n      assert.dom('p').hasText('In Array');\n      targetArray.removeObject(4);\n      await (0, _testHelpers.settled)();\n      assert.dom('p').hasText('Not In Array');\n    });\n  });\n});","define(\"dummy/tests/integration/helpers/perform-unlinked-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@nsf-open/ember-ui-foundation/helpers/perform-unlinked\", \"ember-concurrency\", \"ember-concurrency-ts\"], function (_qunit, _emberQunit, _testHelpers, _performUnlinked, _emberConcurrency, _emberConcurrencyTs) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"@nsf-open/ember-ui-foundation/helpers/perform-unlinked\",0,\"ember-concurrency\",0,\"ember-concurrency-ts\"eaimeta@70e063a35619d71f\n  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n  (0, _qunit.module)('Integration | Helpers | perform-unlinked', function (hooks) {\n    var _class;\n    (0, _emberQunit.setupTest)(hooks);\n    let TaskSandbox = (_class = class TaskSandbox {\n      *parentTask(assert) {\n        yield (0, _performUnlinked.performUnlinkedHelper)([(0, _emberConcurrencyTs.taskFor)(this.childTask), assert])();\n        yield (0, _emberConcurrencyTs.taskFor)(this.childTask).perform(assert);\n      }\n      *childTask(assert) {\n        yield (0, _emberConcurrency.timeout)(20);\n        assert.step('task');\n      }\n    }, (_applyDecoratedDescriptor(_class.prototype, \"parentTask\", [_emberConcurrency.task], Object.getOwnPropertyDescriptor(_class.prototype, \"parentTask\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"childTask\", [_emberConcurrency.task], Object.getOwnPropertyDescriptor(_class.prototype, \"childTask\"), _class.prototype)), _class);\n    (0, _qunit.test)('it creates a closure that runs a concurrency task that not linked to its parent', async function (assert) {\n      assert.expect(2);\n      const sandbox = new TaskSandbox();\n\n      // Start parentTask but don't await its completion.\n      const task = (0, _emberConcurrencyTs.taskFor)(sandbox.parentTask).perform(assert);\n\n      // Wait until we are well into the execution of childTask, but before step() is asserted.\n      await (0, _emberConcurrency.timeout)(10);\n\n      // Cancel parentTask. The running childTask instance should continue on.\n      await task.cancel();\n\n      // Wait for everything to finish.\n      await (0, _testHelpers.settled)();\n      assert.verifySteps(['task']);\n    });\n    (0, _qunit.test)('it only accepts concurrency tasks', function (assert) {\n      assert.throws(function () {\n        // @ts-expect-error - purposefully passing in the wrong type of argument for testing\n        (0, _performUnlinked.performUnlinkedHelper)(['foo'])();\n      });\n    });\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"dummy/app\",0,\"dummy/config/environment\",0,\"qunit\",0,\"@ember/test-helpers\",0,\"qunit-dom\",0,\"ember-qunit\"eaimeta@70e063a35619d71f\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define(\"dummy/tests/unit/aria-attributes-test\", [\"qunit\", \"@nsf-open/ember-ui-foundation/utils/aria\"], function (_qunit, _aria) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"@nsf-open/ember-ui-foundation/utils/aria\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Unit | Util | ARIA Attributes', function () {\n    (0, _qunit.test)('it can add, retrieve the value of, and remove attributes from an HTMLElement', function (assert) {\n      const element = document.createElement('div');\n      assert.deepEqual((0, _aria.getAriaAttributeValues)(element, 'aria-describedby'), []);\n      (0, _aria.addAriaAttribute)(element, 'aria-describedby', 'id-1');\n      assert.deepEqual((0, _aria.getAriaAttributeValues)(element, 'aria-describedby'), ['id-1']);\n      (0, _aria.addAriaAttribute)(element, 'describedby', 'id-2');\n      assert.deepEqual((0, _aria.getAriaAttributeValues)(element, 'describedby'), ['id-1', 'id-2']);\n      (0, _aria.removeAriaAttribute)(element, 'aria-describedby', 'id-1');\n      assert.deepEqual((0, _aria.getAriaAttributeValues)(element, 'describedby'), ['id-2']);\n      (0, _aria.removeAriaAttribute)(element, 'describedby', 'id-2');\n      assert.deepEqual((0, _aria.getAriaAttributeValues)(element, 'describedby'), []);\n    });\n  });\n});","define(\"dummy/tests/unit/computed-macros-test\", [\"qunit\", \"@ember/object\", \"@nsf-open/ember-ui-foundation/utils\"], function (_qunit, _object, _utils) {\n  \"use strict\";\n\n  var _dec, _class, _descriptor;\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"@ember/object\",0,\"@nsf-open/ember-ui-foundation/utils\"eaimeta@70e063a35619d71f\n  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n  function _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n  function _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n  let TestClass = (_dec = (0, _utils.listenTo)('sourceValue', 'A Default Value'), (_class = class TestClass {\n    constructor() {\n      _initializerDefineProperty(this, \"listenerValue\", _descriptor, this);\n      _defineProperty(this, \"sourceValue\", 'Hello World');\n    }\n  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"listenerValue\", [_dec], {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    initializer: null\n  })), _class));\n  (0, _qunit.module)('Unit | Util | computed-macros', function () {\n    (0, _qunit.test)('@listenTo macro', function (assert) {\n      const testClass = new TestClass();\n      assert.strictEqual(testClass.sourceValue, 'Hello World', 'source value is correct');\n      assert.strictEqual(testClass.listenerValue, 'Hello World', 'listener value is correct');\n      (0, _object.set)(testClass, 'sourceValue', undefined);\n      assert.strictEqual(testClass.listenerValue, 'A Default Value', 'listener value expresses its default when source is undefined');\n      (0, _object.set)(testClass, 'sourceValue', 'FooBar');\n      assert.strictEqual(testClass.sourceValue, 'FooBar', 'source value is correct');\n      assert.strictEqual(testClass.listenerValue, 'FooBar', 'listener value is correct after source change');\n      (0, _object.set)(testClass, 'listenerValue', 'Baz');\n      assert.strictEqual(testClass.sourceValue, 'FooBar', 'source value is correct after listener change');\n      assert.strictEqual(testClass.listenerValue, 'Baz', 'listener value is correct after deviating from source');\n      (0, _object.set)(testClass, 'sourceValue', '1001');\n      assert.strictEqual(testClass.sourceValue, '1001', 'source value is correct');\n      assert.strictEqual(testClass.listenerValue, '1001', 'listener value snaps back to source when source is updated');\n    });\n  });\n});","define(\"dummy/tests/unit/extract-error-messages-test\", [\"qunit\", \"@nsf-open/ember-ui-foundation/utils\", \"@ember/template\"], function (_qunit, _utils, _template) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"@nsf-open/ember-ui-foundation/utils\",0,\"@ember/template\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Unit | Util | extract-error-messages', function () {\n    (0, _qunit.test)('it reduces a variety of input arguments to a string array', function (assert) {\n      assert.strictEqual((0, _utils.extractErrorMessages)(undefined), undefined, 'undefined returns undefined');\n      assert.strictEqual((0, _utils.extractErrorMessages)(null), undefined, 'null returns undefined');\n      assert.strictEqual((0, _utils.extractErrorMessages)([]), undefined, 'empty array returns undefined');\n      assert.deepEqual((0, _utils.extractErrorMessages)('Hello World'), ['Hello World'], 'string returns string array');\n      assert.deepEqual((0, _utils.extractErrorMessages)(['Hello', 'World']), ['Hello', 'World'], 'string array returns string array');\n      assert.deepEqual((0, _utils.extractErrorMessages)(new Error('Hello World')), ['Hello World'], 'Error instance returns string array');\n      assert.deepEqual((0, _utils.extractErrorMessages)({\n        errors: {\n          foo: 'bar'\n        }\n      }), undefined, 'object with errors prop that is not an array or string returns undefined');\n      assert.deepEqual((0, _utils.extractErrorMessages)({\n        errors: []\n      }), undefined, 'object with empty errors array returns undefined');\n      assert.deepEqual((0, _utils.extractErrorMessages)({\n        errors: ['Hello', 'World']\n      }), ['Hello', 'World'], 'object with errors array returns string array');\n      assert.deepEqual((0, _utils.extractErrorMessages)({\n        error: 'Hello World'\n      }), ['Hello World'], 'object with error string returns string array');\n      const safeTestString = (0, _template.htmlSafe)('Hello World');\n      assert.true((0, _template.isHTMLSafe)((0, _utils.extractErrorMessages)(safeTestString)?.[0]), 'htmlSafe string returns htmlSafe string array');\n      assert.true((0, _template.isHTMLSafe)((0, _utils.extractErrorMessages)([safeTestString])?.[0]), 'htmlSafe string array returns htmlSafe string array');\n      assert.true((0, _template.isHTMLSafe)((0, _utils.extractErrorMessages)({\n        errors: [safeTestString]\n      })?.[0]), 'object with errors htmlSafe string array returns htmlSafe string array');\n      assert.true((0, _template.isHTMLSafe)((0, _utils.extractErrorMessages)({\n        error: safeTestString\n      })?.[0]), 'object with error htmlSafe string returns htmlSafe string array');\n    });\n  });\n});","define(\"dummy/tests/unit/font-awesome-test\", [\"qunit\", \"@nsf-open/ember-ui-foundation/utils\"], function (_qunit, _utils) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"@nsf-open/ember-ui-foundation/utils\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Unit | Util | font-awesome', function () {\n    (0, _qunit.test)('it applies the \"fa-\" prefix to one or more strings as required', function (assert) {\n      assert.strictEqual((0, _utils.buildFaClassNameString)('fa-foo'), 'fa fa-foo');\n      assert.strictEqual((0, _utils.buildFaClassNameString)('foo'), 'fa fa-foo');\n      assert.strictEqual((0, _utils.buildFaClassNameString)('fa-foo bar'), 'fa fa-foo fa-bar');\n      assert.strictEqual((0, _utils.buildFaClassNameString)('fa-foo fa-bar'), 'fa fa-foo fa-bar');\n      assert.strictEqual((0, _utils.buildFaClassNameString)('fa-foo', 'bar'), 'fa fa-foo fa-bar');\n      assert.strictEqual((0, _utils.buildFaClassNameString)('fa-foo', 'fa-bar'), 'fa fa-foo fa-bar');\n      assert.strictEqual((0, _utils.buildFaClassNameString)(['foo', 'bar']), 'fa fa-foo fa-bar');\n      assert.strictEqual((0, _utils.buildFaClassNameString)(['fa-foo', 'bar']), 'fa fa-foo fa-bar');\n      assert.strictEqual((0, _utils.buildFaClassNameString)(['fa-foo', 'fa-bar']), 'fa fa-foo fa-bar');\n      assert.strictEqual((0, _utils.buildFaClassNameString)(['foo', '', 'bar']), 'fa fa-foo fa-bar');\n\n      // @ts-expect-error - testing for invalid arguments\n      assert.strictEqual((0, _utils.buildFaClassNameString)(['foo', undefined, 'bar']), 'fa fa-foo fa-bar');\n    });\n  });\n});","define(\"dummy/tests/unit/key-navigator-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@nsf-open/ember-ui-foundation/utils\", \"@nsf-open/ember-ui-foundation/constants\", \"@nsf-open/ember-ui-foundation/utils/key-navigator\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _utils, _constants, _keyNavigator) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\",0,\"@nsf-open/ember-ui-foundation/utils\",0,\"@nsf-open/ember-ui-foundation/constants\",0,\"@nsf-open/ember-ui-foundation/utils/key-navigator\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Unit | Util | key-navigator', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it will determine the previous/next element in a sequence', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ul id=\"list\">\n              <li><button id=\"btn-a\">Item A</button></li>\n              <li><button id=\"btn-b\">Item B</button></li>\n              <li><button id=\"btn-c\">Item C</button></li>\n              <li><button id=\"btn-d\">Item D</button></li>\n            </ul>\n          \n      */\n      {\n        \"id\": \"mg7cnge9\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"ul\\\"],[14,1,\\\"list\\\"],[12],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,\\\"button\\\"],[14,1,\\\"btn-a\\\"],[12],[1,\\\"Item A\\\"],[13],[13],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,\\\"button\\\"],[14,1,\\\"btn-b\\\"],[12],[1,\\\"Item B\\\"],[13],[13],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,\\\"button\\\"],[14,1,\\\"btn-c\\\"],[12],[1,\\\"Item C\\\"],[13],[13],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,\\\"button\\\"],[14,1,\\\"btn-d\\\"],[12],[1,\\\"Item D\\\"],[13],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual(undefined, (0, _utils.keyNavigator)(undefined, '#list button', _constants.KeyCodes.Escape), 'unrecognized keycodes are ignored');\n      assert.strictEqual(undefined, (0, _utils.keyNavigator)(undefined, '#foo-bar .baz', _constants.KeyCodes.ArrowDown), 'with no selections possible, undefined is returned');\n      assert.strictEqual((0, _testHelpers.find)('#btn-a'), (0, _utils.keyNavigator)(undefined, (0, _testHelpers.findAll)('#list button'), _constants.KeyCodes.ArrowDown), 'It accepts an array of HTMLElements');\n      assert.strictEqual((0, _testHelpers.find)('#btn-a'), (0, _utils.keyNavigator)(undefined, '#list button', _constants.KeyCodes.ArrowDown), '#btn-a chosen with ArrowDown');\n      assert.strictEqual((0, _testHelpers.find)('#btn-a'), (0, _utils.keyNavigator)(undefined, '#list button', _constants.KeyCodes.ArrowRight), '#btn-a chosen with ArrowRight');\n      assert.strictEqual((0, _testHelpers.find)('#btn-d'), (0, _utils.keyNavigator)(undefined, '#list button', _constants.KeyCodes.ArrowUp), '#btn-d chosen with ArrowUp');\n      assert.strictEqual((0, _testHelpers.find)('#btn-d'), (0, _utils.keyNavigator)(undefined, '#list button', _constants.KeyCodes.ArrowLeft), '#btn-d chosen with ArrowLeft');\n      assert.strictEqual((0, _testHelpers.find)('#btn-c'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-b'), '#list button', _constants.KeyCodes.ArrowDown), '#btn-c chosen with ArrowDown (#btn-b was previous)');\n      assert.strictEqual((0, _testHelpers.find)('#btn-c'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-b'), '#list button', _constants.KeyCodes.ArrowRight), '#btn-c chosen with ArrowRight (#btn-b was previous)');\n      assert.strictEqual((0, _testHelpers.find)('#btn-b'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-c'), '#list button', _constants.KeyCodes.ArrowUp), '#btn-b chosen with ArrowUp (#btn-c was previous)');\n      assert.strictEqual((0, _testHelpers.find)('#btn-b'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-c'), '#list button', _constants.KeyCodes.ArrowLeft), '#btn-b chosen with ArrowLeft (#btn-c was previous)');\n      assert.strictEqual((0, _testHelpers.find)('#btn-a'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-c'), '#list button', _constants.KeyCodes.Home), '#btn-c chosen with Home');\n      assert.strictEqual((0, _testHelpers.find)('#btn-d'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-b'), '#list button', _constants.KeyCodes.End), '#btn-d chosen with End');\n      assert.strictEqual((0, _testHelpers.find)('#btn-d'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-a'), '#list button', _constants.KeyCodes.ArrowUp), '#btn-d chosen with ArrowUp (#btn-a was previous, wrapAround enabled)');\n      assert.strictEqual((0, _testHelpers.find)('#btn-a'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-d'), '#list button', _constants.KeyCodes.ArrowDown), '#btn-a chosen with ArrowDown (#btn-d was previous, wrapAround enabled)');\n      assert.strictEqual((0, _testHelpers.find)('#btn-a'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-a'), '#list button', _constants.KeyCodes.ArrowUp, {\n        wrapAround: false\n      }), '#btn-d chosen with ArrowUp (#btn-a was previous, wrapAround disabled)');\n      assert.strictEqual((0, _testHelpers.find)('#btn-d'), (0, _utils.keyNavigator)((0, _testHelpers.find)('#btn-d'), '#list button', _constants.KeyCodes.ArrowDown, {\n        wrapAround: false\n      }), '#btn-a chosen with ArrowDown (#btn-d was previous, wrapAround disabled)');\n    });\n    (0, _qunit.test)('it can determine the \"current\" element from a variety of possible inputs', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ul id=\"list\">\n              <li><button id=\"btn-a\">Item A</button></li>\n              <li><button id=\"btn-b\">Item B</button></li>\n              <li><button id=\"btn-c\">Item C</button></li>\n              <li><button id=\"btn-d\">Item D</button></li>\n            </ul>\n          \n      */\n      {\n        \"id\": \"mg7cnge9\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,\\\"ul\\\"],[14,1,\\\"list\\\"],[12],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,\\\"button\\\"],[14,1,\\\"btn-a\\\"],[12],[1,\\\"Item A\\\"],[13],[13],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,\\\"button\\\"],[14,1,\\\"btn-b\\\"],[12],[1,\\\"Item B\\\"],[13],[13],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,\\\"button\\\"],[14,1,\\\"btn-c\\\"],[12],[1,\\\"Item C\\\"],[13],[13],[1,\\\"\\\\n        \\\"],[10,\\\"li\\\"],[12],[10,\\\"button\\\"],[14,1,\\\"btn-d\\\"],[12],[1,\\\"Item D\\\"],[13],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      assert.strictEqual(undefined, (0, _keyNavigator.getCurrentElement)(undefined, []), 'undefined returns undefined');\n      assert.strictEqual(undefined, (0, _keyNavigator.getCurrentElement)(null, []), 'null returns undefined');\n\n      // @ts-expect-error - passing incorrect type on purpose\n      assert.strictEqual(undefined, (0, _keyNavigator.getCurrentElement)(10, []), 'unrecognized type returns undefined');\n      assert.strictEqual((0, _testHelpers.find)('#btn-b'), (0, _keyNavigator.getCurrentElement)('#btn-b', []), 'string selector returns HTMLElement');\n      assert.strictEqual(undefined, (0, _keyNavigator.getCurrentElement)('#btn-e', []), 'string selector returns undefined');\n      assert.strictEqual((0, _testHelpers.find)('#btn-c'), (0, _keyNavigator.getCurrentElement)((0, _testHelpers.find)('#btn-c'), []), 'HTMLElement returns HTMLElement');\n      assert.strictEqual((0, _testHelpers.find)('#btn-d'), (0, _keyNavigator.getCurrentElement)(elements => elements.pop(), (0, _testHelpers.findAll)('#list button')), 'function returns HTMLElement');\n    });\n    (0, _qunit.test)('its default filter correctly removes objects it thinks should not be selectable', function (assert) {\n      assert.false(\n      // @ts-expect-error - passing incorrect type on purpose\n      (0, _keyNavigator.shouldInclude)(null), 'things that are not HTMLElement instances are not included');\n      const elementA = document.createElement('div');\n      elementA.ariaDisabled = 'true';\n      assert.false((0, _keyNavigator.shouldInclude)(elementA), 'elements with ariaDisabled=\"true\" are not included');\n      const elementB = document.createElement('div');\n      elementB.ariaHidden = 'true';\n      assert.false((0, _keyNavigator.shouldInclude)(elementB), 'elements with ariaHidden=\"true\" are not included');\n      const elementC = document.createElement('div');\n      elementC.hidden = true;\n      assert.false((0, _keyNavigator.shouldInclude)(elementC), 'elements with hidden=true are not included');\n      const elementD = document.createElement('div');\n      elementD.classList.add('disabled');\n      assert.false((0, _keyNavigator.shouldInclude)(elementD), 'elements with a class name \"disabled\" are not included');\n      const elementE = document.createElement('div');\n      elementE.ariaDisabled = 'false';\n      elementE.ariaHidden = 'false';\n      elementE.hidden = false;\n      elementE.classList.add('foo');\n      assert.true((0, _keyNavigator.shouldInclude)(elementE), 'other elements are included');\n      const elementF = document.createElement('div');\n      assert.true((0, _keyNavigator.shouldInclude)(elementF), 'other elements are included');\n    });\n  });\n});","define(\"dummy/tests/unit/kinda-looks-plural-test\", [\"qunit\", \"@nsf-open/ember-ui-foundation/utils\"], function (_qunit, _utils) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"@nsf-open/ember-ui-foundation/utils\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Unit | Util | kindaLooksPlural', function () {\n    (0, _qunit.test)('it identifies things that might need to be pluralized in the english language', function (assert) {\n      assert.true((0, _utils.kindaLooksPlural)(0), 'The number zero is plural');\n      assert.false((0, _utils.kindaLooksPlural)(1), 'The number one is singular');\n      assert.true((0, _utils.kindaLooksPlural)(2), 'The number two is plural');\n      assert.true((0, _utils.kindaLooksPlural)('0'), 'The string zero is plural');\n      assert.false((0, _utils.kindaLooksPlural)('1'), 'The string one is singular');\n      assert.true((0, _utils.kindaLooksPlural)('2'), 'The string two is plural');\n      assert.false((0, _utils.kindaLooksPlural)('dog'), 'The string \"dog\" is singular');\n      assert.true((0, _utils.kindaLooksPlural)('dogs'), 'The string \"dogs\" is already plural');\n      assert.false((0, _utils.kindaLooksPlural)('compass'), 'The string \"compass\" is singular');\n      assert.false((0, _utils.kindaLooksPlural)(null), 'The null value is not plural (this is the fallthrough case for anything that is not a string or number)');\n    });\n  });\n});","define(\"dummy/tests/unit/message-manager-test\", [\"qunit\", \"ember-qunit\", \"@nsf-open/ember-ui-foundation/lib/MessageManager\", \"@nsf-open/ember-ui-foundation/constants\"], function (_qunit, _emberQunit, _MessageManager, _constants) {\n  \"use strict\";\n\n  var _dec, _dec2, _class, _descriptor, _descriptor2;\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@nsf-open/ember-ui-foundation/lib/MessageManager\",0,\"@nsf-open/ember-ui-foundation/constants\"eaimeta@70e063a35619d71f\n  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n  function _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n  function _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n  let TestClass = (_dec = (0, _MessageManager.messageManager)(), _dec2 = (0, _MessageManager.messageManager)({\n    enableScrollTo: true\n  }), (_class = class TestClass {\n    constructor() {\n      _initializerDefineProperty(this, \"decoratorBuiltManager\", _descriptor, this);\n      _initializerDefineProperty(this, \"configuredDecoratorBuiltManager\", _descriptor2, this);\n    }\n  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"decoratorBuiltManager\", [_dec], {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    initializer: null\n  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"configuredDecoratorBuiltManager\", [_dec2], {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    initializer: null\n  })), _class));\n  (0, _qunit.module)('Unit | Lib | MessageManager', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('@messageManager decorator', function (assert) {\n      const testInstance = new TestClass();\n      assert.true(testInstance.decoratorBuiltManager instanceof _MessageManager.default);\n      assert.false(testInstance.decoratorBuiltManager.enableScrollTo);\n      assert.true(testInstance.configuredDecoratorBuiltManager instanceof _MessageManager.default);\n      assert.true(testInstance.configuredDecoratorBuiltManager.enableScrollTo);\n    });\n    (0, _qunit.test)('a single message can be added', async function (assert) {\n      const manager = new _MessageManager.default();\n      let messageId = manager.addMessage(_constants.AlertLevel.INFO, '');\n      assert.false(messageId, '');\n      messageId = manager.addMessage(_constants.AlertLevel.INFO, 'Message A');\n      assert.strictEqual(typeof messageId, 'string');\n      const group = manager.getGroup(_constants.AlertLevel.INFO);\n      const messageText = group ? [...group.messagesText.values()] : [];\n      assert.strictEqual(group?.name, _constants.AlertLevel.INFO);\n      assert.strictEqual(group?.messages.length, 1);\n      assert.deepEqual(messageText, ['Message A']);\n      assert.deepEqual(group?.messages?.[0], {\n        id: messageId,\n        message: 'Message A',\n        escapeHTML: true,\n        details: null,\n        detailsOpen: false\n      });\n      assert.true(manager.hasMessage('Message A', _constants.AlertLevel.INFO));\n      assert.true(manager.hasMessage('Message A'));\n    });\n    (0, _qunit.test)('adding a single message supports configurable options', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.enableDetails = true;\n      const messageId = manager.addMessage(_constants.AlertLevel.INFO, 'Message A', {\n        escape: false,\n        details: 'More Content'\n      });\n      assert.deepEqual(manager.getGroup(_constants.AlertLevel.INFO)?.messages?.[0], {\n        id: messageId,\n        message: 'Message A',\n        escapeHTML: false,\n        details: 'More Content',\n        detailsOpen: false\n      });\n    });\n    (0, _qunit.test)('multiple messages can be added in sequence', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.addMessage(_constants.AlertLevel.INFO, 'Message A');\n      manager.addMessage(_constants.AlertLevel.INFO, 'Message B');\n      const group = manager.getGroup(_constants.AlertLevel.INFO);\n      assert.strictEqual(group?.messages[0].message, 'Message A');\n      assert.strictEqual(group?.messages[1].message, 'Message B');\n      assert.true(manager.hasMessage('Message A'));\n      assert.true(manager.hasMessage('Message B'));\n      manager.addMessage(_constants.AlertLevel.INFO, 'Message C', {\n        clearPrior: true\n      });\n      assert.strictEqual(group?.messages[0].message, 'Message C');\n      assert.strictEqual(group?.messages.length, 1);\n      assert.false(manager.hasMessage('Message A'));\n      assert.false(manager.hasMessage('Message B'));\n      assert.true(manager.hasMessage('Message C'));\n    });\n    (0, _qunit.test)('multiple messages can be added in parallel', function (assert) {\n      const manager = new _MessageManager.default();\n      let messageIds = manager.addMessagesMany(_constants.AlertLevel.INFO, []);\n      assert.deepEqual(messageIds.map(id => typeof id), []);\n      messageIds = manager.addMessagesMany(_constants.AlertLevel.INFO, ['Message A', 'Message B']);\n      assert.deepEqual(messageIds.map(id => typeof id), ['string', 'string']);\n      const group = manager.getGroup(_constants.AlertLevel.INFO);\n      assert.strictEqual(group?.messages[0].message, 'Message A');\n      assert.strictEqual(group?.messages[1].message, 'Message B');\n      assert.true(manager.hasMessage('Message A'));\n      assert.true(manager.hasMessage('Message B'));\n    });\n    (0, _qunit.test)('adding multiple messages in parallel supports configurable options', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.enableDetails = true;\n      const messageIds = manager.addMessagesMany(_constants.AlertLevel.INFO, ['Message A', 'Message B'], {\n        escape: false\n      });\n      const group = manager.getGroup(_constants.AlertLevel.INFO);\n      assert.deepEqual(group?.messages?.[0], {\n        id: messageIds[0],\n        message: 'Message A',\n        escapeHTML: false,\n        details: null,\n        detailsOpen: false\n      });\n      assert.deepEqual(group?.messages?.[1], {\n        id: messageIds[1],\n        message: 'Message B',\n        escapeHTML: false,\n        details: null,\n        detailsOpen: false\n      });\n      manager.addMessagesMany(_constants.AlertLevel.INFO, ['Message C', 'Message D'], {\n        clearPrior: true\n      });\n      assert.false(manager.hasMessage('Message A'));\n      assert.false(manager.hasMessage('Message B'));\n      assert.strictEqual(group?.messages[0].message, 'Message C');\n      assert.strictEqual(group?.messages[1].message, 'Message D');\n    });\n    (0, _qunit.test)('a message can be removed via its id', function (assert) {\n      const manager = new _MessageManager.default();\n      const messageId = manager.addMessage(_constants.AlertLevel.INFO, 'Message A');\n      assert.true(manager.hasMessage('Message A'));\n      assert.false(manager.removeMessage(''));\n      assert.false(manager.removeMessage('nope'));\n      assert.true(manager.removeMessage(messageId));\n      assert.false(manager.hasMessage('Message A'));\n    });\n    (0, _qunit.test)('a message can be updated via its id', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.enableDetails = true;\n      const messageId = manager.addMessage(_constants.AlertLevel.INFO, 'Message A');\n      const group = manager.getGroup(_constants.AlertLevel.INFO);\n      assert.true(manager.hasMessage('Message A'), 'The manager has the message');\n      assert.strictEqual(group?.messages[0].details, null);\n      assert.false(manager.updateMessage('', 'Message B'), 'An id is required');\n      assert.false(manager.updateMessage('nope', 'Message B'), 'A valid id is required');\n      assert.true(manager.updateMessage(messageId, 'Message B', 'More Content'));\n      assert.strictEqual(group?.messages[0].details, 'More Content');\n      assert.false(manager.hasMessage('Message A'));\n      assert.true(manager.hasMessage('Message B'));\n    });\n    (0, _qunit.test)('whole message groups can be cleared of content', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.addMessage(_constants.AlertLevel.INFO, 'Info Message A');\n      manager.addMessage(_constants.AlertLevel.ERROR, 'Error Message A');\n      manager.addMessage(_constants.AlertLevel.WARNING, 'Warning Message A');\n      manager.addMessage(_constants.AlertLevel.SUCCESS, 'Success Message A');\n      manager.addMessage(_constants.AlertLevel.MUTED, 'Muted Message A');\n      const infoGroup = manager.getGroup(_constants.AlertLevel.INFO);\n      const errorGroup = manager.getGroup(_constants.AlertLevel.ERROR);\n      const warningGroup = manager.getGroup(_constants.AlertLevel.WARNING);\n      const successGroup = manager.getGroup(_constants.AlertLevel.SUCCESS);\n      const mutedGroup = manager.getGroup(_constants.AlertLevel.MUTED);\n      assert.strictEqual(infoGroup?.messages.length, 1);\n      assert.strictEqual(errorGroup?.messages.length, 1);\n      assert.strictEqual(warningGroup?.messages.length, 1);\n      assert.strictEqual(successGroup?.messages.length, 1);\n      assert.strictEqual(mutedGroup?.messages.length, 1);\n      manager.clear(_constants.AlertLevel.INFO);\n      assert.true(!!manager.getGroup(_constants.AlertLevel.INFO));\n      assert.true(manager.isEmpty(_constants.AlertLevel.INFO));\n      assert.false(manager.isEmpty(_constants.AlertLevel.ERROR));\n      assert.false(manager.isEmpty(_constants.AlertLevel.WARNING));\n      assert.false(manager.isEmpty(_constants.AlertLevel.SUCCESS));\n      assert.false(manager.isEmpty(_constants.AlertLevel.MUTED));\n      manager.clear([_constants.AlertLevel.ERROR, _constants.AlertLevel.WARNING]);\n      assert.true(!!manager.getGroup(_constants.AlertLevel.ERROR));\n      assert.true(!!manager.getGroup(_constants.AlertLevel.WARNING));\n      assert.true(manager.isEmpty(_constants.AlertLevel.ERROR));\n      assert.true(manager.isEmpty(_constants.AlertLevel.WARNING));\n      assert.false(manager.isEmpty(_constants.AlertLevel.SUCCESS));\n      assert.false(manager.isEmpty(_constants.AlertLevel.MUTED));\n      manager.clear();\n      assert.true(!!manager.getGroup(_constants.AlertLevel.SUCCESS));\n      assert.true(!!manager.getGroup(_constants.AlertLevel.MUTED));\n      assert.true(manager.isEmpty(_constants.AlertLevel.SUCCESS));\n      assert.true(manager.isEmpty(_constants.AlertLevel.MUTED));\n    });\n    (0, _qunit.test)('groups can be completely removed', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.addMessage(_constants.AlertLevel.INFO, 'Info Message A');\n      manager.addMessage(_constants.AlertLevel.ERROR, 'Error Message A');\n      assert.true(!!manager.getGroup(_constants.AlertLevel.INFO));\n      assert.true(!!manager.getGroup(_constants.AlertLevel.ERROR));\n      manager.removeGroup(_constants.AlertLevel.INFO);\n      assert.false(!!manager.getGroup(_constants.AlertLevel.INFO));\n      assert.true(!!manager.getGroup(_constants.AlertLevel.ERROR));\n    });\n    (0, _qunit.test)('groups can be queried for whether they are empty or not', function (assert) {\n      const manager = new _MessageManager.default();\n      assert.true(manager.isEmpty());\n      manager.addMessage(_constants.AlertLevel.INFO, 'Message A');\n      assert.false(manager.isEmpty());\n      assert.false(manager.isEmpty(_constants.AlertLevel.INFO));\n      assert.true(manager.isEmpty(_constants.AlertLevel.MUTED));\n    });\n    (0, _qunit.test)('the addMessages method can be used to create one or more messages', function (assert) {\n      const manager = new class TestMessageManager extends _MessageManager.default {\n        addMessage(groupName, message) {\n          let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          assert.step('addMessage');\n          assert.step(groupName);\n          assert.step(message);\n          return super.addMessage(groupName, message, options);\n        }\n        addMessagesMany(groupName, messages) {\n          let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          assert.step('addMessagesMany');\n          assert.step(groupName);\n          assert.step(messages.toString());\n          return super.addMessagesMany(groupName, messages, options);\n        }\n      }();\n      manager.addMessages(_constants.AlertLevel.INFO, 'Message A');\n      manager.addMessages(_constants.AlertLevel.ERROR, ['Message B', 'Message C']);\n      assert.verifySteps(['addMessage', _constants.AlertLevel.INFO, 'Message A', 'addMessagesMany', _constants.AlertLevel.ERROR, 'Message B,Message C', 'addMessage', _constants.AlertLevel.ERROR, 'Message B', 'addMessage', _constants.AlertLevel.ERROR, 'Message C']);\n    });\n    (0, _qunit.test)('the addSuccessMessages helper method adds messages to the success group', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.addSuccessMessages('Message A');\n      manager.addSuccessMessages(['Message B', 'Message C']);\n      const group = manager.getGroup(_constants.AlertLevel.SUCCESS);\n      const messages = group ? [...group.messagesText.values()] : [];\n      assert.deepEqual(messages, ['Message A', 'Message B', 'Message C']);\n    });\n    (0, _qunit.test)('the addErrorMessages helper method adds messages to the error group', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.addErrorMessages('Message A');\n      manager.addErrorMessages(['Message B', 'Message C']);\n      const group = manager.getGroup(_constants.AlertLevel.ERROR);\n      const messages = group ? [...group.messagesText.values()] : [];\n      assert.deepEqual(messages, ['Message A', 'Message B', 'Message C']);\n    });\n    (0, _qunit.test)('the addWarningMessages helper method adds messages to the warning group', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.addWarningMessages('Message A');\n      manager.addWarningMessages(['Message B', 'Message C']);\n      const group = manager.getGroup(_constants.AlertLevel.WARNING);\n      const messages = group ? [...group.messagesText.values()] : [];\n      assert.deepEqual(messages, ['Message A', 'Message B', 'Message C']);\n    });\n    (0, _qunit.test)('the addInfoMessages helper method adds messages to the informational group', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.addInfoMessages('Message A');\n      manager.addInfoMessages(['Message B', 'Message C']);\n      const group = manager.getGroup(_constants.AlertLevel.INFO);\n      const messages = group ? [...group.messagesText.values()] : [];\n      assert.deepEqual(messages, ['Message A', 'Message B', 'Message C']);\n    });\n    (0, _qunit.test)('the addMessagesByGroup helper method adds messages via an object whose keys are group names', function (assert) {\n      const manager = new _MessageManager.default();\n      manager.addMessagesByGroup({\n        success: 'Message A',\n        warning: ['Message B', 'Message C']\n      });\n      const successGroup = manager.getGroup(_constants.AlertLevel.SUCCESS);\n      const warningGroup = manager.getGroup(_constants.AlertLevel.WARNING);\n      let successMessages = successGroup ? [...successGroup.messagesText.values()] : [];\n      let warningMessages = warningGroup ? [...warningGroup.messagesText.values()] : [];\n      assert.deepEqual(successMessages, ['Message A']);\n      assert.deepEqual(warningMessages, ['Message B', 'Message C']);\n      manager.addMessagesByGroup({\n        errors: 'Message D'\n      }, {\n        clearPrior: true\n      });\n      const errorGroup = manager.getGroup(_constants.AlertLevel.ERROR);\n      const errorMessages = errorGroup ? [...errorGroup.messagesText.values()] : [];\n      successMessages = successGroup ? [...successGroup.messagesText.values()] : [];\n      warningMessages = warningGroup ? [...warningGroup.messagesText.values()] : [];\n      assert.deepEqual(successMessages, []);\n      assert.deepEqual(warningMessages, []);\n      assert.deepEqual(errorMessages, ['Message D']);\n    });\n    (0, _qunit.test)('the message helper method will add, update, or remove a message based on provided arguments', function (assert) {\n      const manager = new _MessageManager.default();\n      const messageId = manager.message({\n        message: 'Message A',\n        groupName: _constants.AlertLevel.INFO\n      });\n      assert.strictEqual(typeof messageId, 'string');\n      assert.true(manager.hasMessage('Message A', _constants.AlertLevel.INFO));\n      manager.message({\n        messageId,\n        message: 'Message B'\n      });\n      assert.false(manager.hasMessage('Message A', _constants.AlertLevel.INFO));\n      assert.true(manager.hasMessage('Message B', _constants.AlertLevel.INFO));\n      manager.message({\n        messageId\n      });\n      assert.false(manager.hasMessage('Message B', _constants.AlertLevel.INFO));\n    });\n  });\n});","define(\"dummy/tests/unit/optional-service-test\", [\"qunit\", \"ember-qunit\", \"@ember/service\", \"@nsf-open/ember-ui-foundation/utils\"], function (_qunit, _emberQunit, _service, _utils) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/service\",0,\"@nsf-open/ember-ui-foundation/utils\"eaimeta@70e063a35619d71f\n  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n  function _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n  function _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n  (0, _qunit.module)('Unit | Util | optionalService', function (hooks) {\n    var _dec, _class, _descriptor, _descriptor2;\n    (0, _emberQunit.setupTest)(hooks);\n    let TestService = (_dec = (0, _utils.optionalService)(), (_class = class TestService extends _service.default {\n      constructor() {\n        super(...arguments);\n        _initializerDefineProperty(this, \"router\", _descriptor, this);\n        _initializerDefineProperty(this, \"doesNotExist\", _descriptor2, this);\n      }\n    }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"router\", [_service.inject], {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      initializer: null\n    }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"doesNotExist\", [_dec], {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      initializer: null\n    })), _class));\n    hooks.beforeEach(function () {\n      this.owner.register('service:test-service', TestService);\n    });\n    (0, _qunit.test)('it does not throw an exception when the service does not exist', function (assert) {\n      const testService = this.owner.lookup('service:test-service');\n      const routerService = this.owner.lookup('service:router');\n      assert.strictEqual(testService.router, routerService, 'The router service does exist as expected');\n      assert.strictEqual(testService.doesNotExist, undefined, 'The \"doesNotExist\" service does not exist, and no exception was raised');\n    });\n  });\n});","define(\"dummy/tests/unit/outside-click-handler-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@nsf-open/ember-ui-foundation/utils/outside-click\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _outsideClick) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"ember-cli-htmlbars\",0,\"@nsf-open/ember-ui-foundation/utils/outside-click\"eaimeta@70e063a35619d71f\n  (0, _qunit.module)('Unit | Util | outside-click-handler', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it creates a listener that only fires when click happen outside of a given element', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <div id=\"outer\">\n              <div id=\"target\">\n                <div id=\"inner\"></div>\n              </div>\n            </div>\n          \n      */\n      {\n        \"id\": \"n3lrCPF4\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,0],[14,1,\\\"outer\\\"],[12],[1,\\\"\\\\n        \\\"],[10,0],[14,1,\\\"target\\\"],[12],[1,\\\"\\\\n          \\\"],[10,0],[14,1,\\\"inner\\\"],[12],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const listener = (0, _outsideClick.createOutsideClickListener)(null, (0, _testHelpers.find)('#target'), function (event) {\n        const eventTarget = event.target;\n        assert.step(eventTarget.id);\n      });\n      await (0, _testHelpers.click)('#outer');\n      await (0, _testHelpers.click)('#target');\n      await (0, _testHelpers.click)('#inner');\n      await (0, _testHelpers.click)('#target');\n      await (0, _testHelpers.click)('#outer');\n      (0, _outsideClick.removeOutsideClickListener)(listener);\n      await (0, _testHelpers.click)('#outer');\n      await (0, _testHelpers.click)('#target');\n      await (0, _testHelpers.click)('#inner');\n      assert.verifySteps(['outer', 'outer']);\n    });\n    (0, _qunit.test)('it accepts multiple elements that must all be outside of the click hierarchy', async function (assert) {\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <div id=\"outer\">\n              <div id=\"target1\">\n                <div id=\"inner1\"></div>\n              </div>\n              <div id=\"target2\">\n                <div id=\"inner2\"></div>\n              </div>\n            </div>\n          \n      */\n      {\n        \"id\": \"5ZAPP+5u\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[10,0],[14,1,\\\"outer\\\"],[12],[1,\\\"\\\\n        \\\"],[10,0],[14,1,\\\"target1\\\"],[12],[1,\\\"\\\\n          \\\"],[10,0],[14,1,\\\"inner1\\\"],[12],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n        \\\"],[10,0],[14,1,\\\"target2\\\"],[12],[1,\\\"\\\\n          \\\"],[10,0],[14,1,\\\"inner2\\\"],[12],[13],[1,\\\"\\\\n        \\\"],[13],[1,\\\"\\\\n      \\\"],[13],[1,\\\"\\\\n    \\\"]],[],false,[]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      const target1 = (0, _testHelpers.find)('#target1');\n      const target2 = (0, _testHelpers.find)('#target2');\n      const listener = (0, _outsideClick.createOutsideClickListener)(null, [target1, target2], function (event) {\n        const eventTarget = event.target;\n        assert.step(eventTarget.id);\n      });\n      await (0, _testHelpers.click)('#outer');\n      await (0, _testHelpers.click)('#target1');\n      await (0, _testHelpers.click)('#inner1');\n      await (0, _testHelpers.click)('#target1');\n      await (0, _testHelpers.click)('#target2');\n      await (0, _testHelpers.click)('#inner2');\n      await (0, _testHelpers.click)('#target2');\n      await (0, _testHelpers.click)('#outer');\n      (0, _outsideClick.removeOutsideClickListener)(listener);\n      await (0, _testHelpers.click)('#outer');\n      await (0, _testHelpers.click)('#target1');\n      await (0, _testHelpers.click)('#target2');\n      await (0, _testHelpers.click)('#inner1');\n      await (0, _testHelpers.click)('#inner2');\n      assert.verifySteps(['outer', 'outer']);\n    });\n  });\n});","define(\"dummy/tests/unit/progress-manager-test\", [\"qunit\", \"@nsf-open/ember-ui-foundation/lib/ProgressManager\", \"@nsf-open/ember-ui-foundation/lib/ProgressItem\"], function (_qunit, _ProgressManager, _ProgressItem) {\n  \"use strict\";\n\n  var _dec, _class, _descriptor;\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"@nsf-open/ember-ui-foundation/lib/ProgressManager\",0,\"@nsf-open/ember-ui-foundation/lib/ProgressItem\"eaimeta@70e063a35619d71f\n  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n  function _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n  function _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n  let TestClass = (_dec = (0, _ProgressManager.progressManager)([{\n    label: 'Step A',\n    component: 'test-component-a'\n  }]), (_class = class TestClass {\n    constructor() {\n      _initializerDefineProperty(this, \"decoratorBuiltManager\", _descriptor, this);\n    }\n  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"decoratorBuiltManager\", [_dec], {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    initializer: null\n  })), _class));\n  (0, _qunit.module)('Unit | Lib | ProgressManager', function () {\n    (0, _qunit.test)('@stepFlowManager decorator', function (assert) {\n      assert.true(new TestClass().decoratorBuiltManager instanceof _ProgressManager.default);\n    });\n    (0, _qunit.test)('the manager creates StepFlowItem instances from basic definitions', function (assert) {\n      const manager = new _ProgressManager.default([{\n        label: 'Step A',\n        component: 'test-component-a'\n      }, {\n        label: 'Step B',\n        component: 'test-component-b',\n        title: 'Step 2'\n      }, {\n        label: 'Step C',\n        component: 'test-component-c',\n        title: 'Step 3',\n        indeterminate: true\n      }, {\n        label: 'Step D',\n        component: 'test-component-d',\n        title: 'Step 4',\n        complete: true\n      }]);\n      const stepA = manager.getStepAt(0);\n      const stepB = manager.getStepAt(1);\n      const stepC = manager.getStepAt(2);\n      const stepD = manager.getStepAt(3);\n      assert.strictEqual(manager.totalStepCount, 4);\n      assert.strictEqual(stepA?.label, 'Step A');\n      assert.strictEqual(stepA?.component, 'test-component-a');\n      assert.strictEqual(stepB?.label, 'Step B');\n      assert.strictEqual(stepB?.component, 'test-component-b');\n      assert.strictEqual(stepB?.title, 'Step 2');\n      assert.strictEqual(stepC?.label, 'Step C');\n      assert.strictEqual(stepC?.component, 'test-component-c');\n      assert.strictEqual(stepC?.title, 'Step 3');\n      assert.true(stepC?.indeterminate);\n      assert.strictEqual(stepD?.label, 'Step D');\n      assert.strictEqual(stepD?.component, 'test-component-d');\n      assert.strictEqual(stepD?.title, 'Step 4');\n      assert.true(stepD?.complete);\n    });\n    (0, _qunit.test)('additional steps can be added to the manager', function (assert) {\n      const manager = new _ProgressManager.default([{\n        label: 'Step A',\n        component: 'test-component-a'\n      }]);\n      assert.strictEqual(manager.totalStepCount, 1);\n      const stepA = manager.getStepAt(0);\n      assert.strictEqual(stepA?.label, 'Step A');\n      assert.strictEqual(stepA?.component, 'test-component-a');\n      manager.addStep({\n        label: 'Step B',\n        component: 'test-component-b',\n        title: 'Step 2'\n      });\n      manager.addStep(new _ProgressItem.default({\n        label: 'Step C',\n        component: 'test-component-c'\n      }, manager));\n      assert.throws(() => {\n        // @ts-expect-error - Intentionally passing in the wrong type of thing\n        manager.addStep('Hello World');\n      });\n      const stepB = manager.getStepAt(1);\n      assert.strictEqual(stepB?.label, 'Step B');\n      assert.strictEqual(stepB?.component, 'test-component-b');\n      const stepC = manager.getStepAt(2);\n      assert.strictEqual(stepC?.label, 'Step C');\n      assert.strictEqual(stepC?.component, 'test-component-c');\n    });\n    (0, _qunit.test)('steps can be navigated between', function (assert) {\n      const manager = new _ProgressManager.default([{\n        label: 'Step A',\n        component: 'test-component-a',\n        indeterminate: true\n      }, {\n        label: 'Step B',\n        component: 'test-component-b',\n        indeterminate: true\n      }, {\n        label: 'Step C',\n        component: 'test-component-c',\n        indeterminate: true\n      }, {\n        label: 'Step D',\n        component: 'test-component-d'\n      }]);\n      assert.strictEqual(manager.totalStepCount, 4);\n      assert.strictEqual(manager.completedStepCount, 3);\n      assert.strictEqual(manager.currentStepIndex, 0);\n      assert.false(manager.isComplete);\n      assert.false(manager.hasPreviousStep);\n      assert.true(manager.hasNextStep);\n      assert.strictEqual(manager.previousStep, undefined);\n      assert.strictEqual(manager.currentStep, manager.getStepAt(0));\n      assert.strictEqual(manager.nextStep, manager.getStepAt(1));\n      assert.false(manager.goToStep(-1));\n      assert.false(manager.goToStep(5));\n      manager.goToNextStep();\n      assert.strictEqual(manager.currentStepIndex, 1);\n      assert.true(manager.hasPreviousStep);\n      assert.true(manager.hasNextStep);\n      assert.strictEqual(manager.previousStep, manager.getStepAt(0));\n      assert.strictEqual(manager.nextStep, manager.getStepAt(2));\n      manager.goToStep(3);\n      assert.true(manager.hasPreviousStep);\n      assert.false(manager.hasNextStep);\n      assert.strictEqual(manager.previousStep, manager.getStepAt(2));\n      assert.strictEqual(manager.nextStep, undefined);\n    });\n    (0, _qunit.test)('the completed state of a ProgressItem can be toggled via updateCompleteState()', function (assert) {\n      const manager = new _ProgressManager.default([{\n        label: 'Step A',\n        component: 'test-component-a'\n      }]);\n      const stepA = manager.getStepAt(0);\n      assert.false(stepA?.isComplete);\n      stepA?.updateCompleteState(true);\n      assert.true(stepA?.isComplete);\n      stepA?.updateCompleteState({\n        isFormValid: false\n      });\n      assert.false(stepA?.isComplete);\n    });\n  });\n});","define(\"dummy/tests/unit/query-parser-test\", [\"@nsf-open/ember-ui-foundation/lib/QueryParser\", \"qunit\"], function (_QueryParser, _qunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"@nsf-open/ember-ui-foundation/lib/QueryParser\",0,\"qunit\"eaimeta@70e063a35619d71f\n  function getTokenRule(name) {\n    return _QueryParser.TokenRules.find(rule => rule.name === name);\n  }\n  function testOperation(assert, name, expect) {\n    const rule = _QueryParser.TokenRules.find(rule => rule.name === name);\n    for (let i = 0; i < expect.length; i += 1) {\n      const [testFn, left, right] = expect[i];\n      assert[testFn](rule.operation?.(left, right), `${rule.name}(${left}, ${right}); // ${testFn}`);\n    }\n  }\n  (0, _qunit.module)('Unit | Lib | QueryParser', function () {\n    // const recordA = {\n    //   name: 'John Doe',\n    //   isAdmin: false,\n    //   age: 42,\n    //   expiration: null,\n    //   permissions: ['read', 'write'],\n    //   nickname: 'Goose',\n    // };\n    //\n    // const recordB = {\n    //   name: 'Jane Dae',\n    //   isAdmin: true,\n    //   age: 34,\n    //   permissions: ['log'],\n    //   nickname: 'Maverick',\n    // };\n    //\n    // const recordC = {\n    //   name: 'Tom John',\n    //   isAdmin: true,\n    //   age: '34',\n    //   expiration: '01/01/1970',\n    //   nickname: 'Tom John',\n    // };\n    //\n    // const recordSet = [recordA, recordB, recordC];\n\n    // test('it creates a filter function based on a crafted string query', function (assert) {\n    //   assert.expect(21);\n    //\n    //   const parser = new QueryParser();\n    //\n    //   function testQuery(query: string, expect: unknown[]) {\n    //     assert.deepEqual(\n    //       recordSet.filter(parser.evaluate(query)),\n    //       expect,\n    //       `The query - ${query} - returned ${expect.length} record(s)`\n    //     );\n    //   }\n    //\n    //   assert.throws(() => parser.evaluate(''), 'It throws on an empty string');\n    //   assert.throws(() => parser.evaluate('name EQU'), 'It throws on an incomplete query');\n    //   assert.throws(\n    //     () => parser.evaluate('(name EQUALS \"Bob\"'),\n    //     'It throws on an unclosed parenthesis'\n    //   );\n    //\n    //   testQuery('foo EQUALS \"bar\"', []);\n    //   testQuery('foo EQUALS bar', [recordA, recordB, recordC]);\n    //   testQuery('name EQUALS nickname', [recordC]);\n    //   testQuery('name EQUALS \"John Doe\"', [recordA]);\n    //   testQuery('name STARTS WITH \"Jane\"', [recordB]);\n    //   testQuery('name ENDS WITH \"ohn\"', [recordC]);\n    //   testQuery('name INCLUDES \" D\"', [recordA, recordB]);\n    //   testQuery('permissions INCLUDES \"write\"', [recordA]);\n    //   testQuery('isAdmin EQUALS true', [recordB, recordC]);\n    //   testQuery('isAdmin EQUALS false', [recordA]);\n    //   testQuery('expiration EQUALS null', [recordA]);\n    //   testQuery('expiration EQUALS undefined', [recordB]);\n    //   testQuery('age EQUALS 34', [recordB]);\n    //   testQuery('age EQUALS 34 OR age EQUALS 42', [recordA, recordB]);\n    //   testQuery('isAdmin EQUALS true AND name STARTS WITH \"Tom\"', [recordC]);\n    //   testQuery('(isAdmin EQUALS true)', [recordB, recordC]);\n    //   testQuery('(isAdmin EQUALS true) AND (name STARTS WITH \"Tom\")', [recordC]);\n    //   testQuery('(isAdmin EQUALS true AND name STARTS WITH \"Tom\") OR nickname EQUALS \"Maverick\"', [\n    //     recordB,\n    //     recordC,\n    //   ]);\n    // });\n\n    (0, _qunit.test)('AND operator', function (assert) {\n      assert.expect(4);\n      testOperation(assert, _QueryParser.TokenKeys.LogicalAnd, [['true', true, true], ['false', false, true], ['false', true, false], ['false', false, false]]);\n    });\n    (0, _qunit.test)('OR operator', function (assert) {\n      assert.expect(4);\n      testOperation(assert, _QueryParser.TokenKeys.LogicalOr, [['true', true, true], ['true', false, true], ['true', true, false], ['false', false, false]]);\n    });\n    (0, _qunit.test)('EQUALS comparison', function (assert) {\n      assert.expect(7);\n      testOperation(assert, _QueryParser.TokenKeys.EqualsComparison, [['true', 1, 1], ['true', 'a', 'a'], ['true', true, true], ['true', false, false], ['false', 1, 2], ['false', 'a', 'b'], ['false', true, false]]);\n    });\n    (0, _qunit.test)('DOES NOT EQUAL comparison', function (assert) {\n      assert.expect(7);\n      testOperation(assert, _QueryParser.TokenKeys.NotEqualToComparison, [['false', 1, 1], ['false', 'a', 'a'], ['false', true, true], ['false', false, false], ['true', 1, 2], ['true', 'a', 'b'], ['true', true, false]]);\n    });\n    (0, _qunit.test)('STARTS WITH comparison', function (assert) {\n      const rule = getTokenRule(_QueryParser.TokenKeys.StartsWithComparison);\n      assert.true(rule.operation?.('Hello World', 'Hello'));\n      assert.false(rule.operation?.('Hello World', 'World'));\n      assert.false(rule.operation?.('Hello World', 1));\n      assert.false(rule.operation?.(1, 'Hello'));\n      assert.false(rule.operation?.(1, 1));\n    });\n    (0, _qunit.test)('DOES NOT START WITH comparison', function (assert) {\n      const rule = getTokenRule(_QueryParser.TokenKeys.DoesNotStartWithComparison);\n      assert.true(rule.operation?.('Hello World', 'World'));\n      assert.false(rule.operation?.('Hello World', 'Hello'));\n      assert.false(rule.operation?.('Hello World', 1));\n      assert.false(rule.operation?.(1, 'Hello'));\n      assert.false(rule.operation?.(1, 1));\n    });\n    (0, _qunit.test)('ENDS WITH comparison', function (assert) {\n      const rule = getTokenRule(_QueryParser.TokenKeys.EndsWithComparison);\n      assert.true(rule.operation?.('Hello World', 'World'));\n      assert.false(rule.operation?.('Hello World', 'Hello'));\n      assert.false(rule.operation?.('Hello World', 1));\n      assert.false(rule.operation?.(1, 'Hello'));\n      assert.false(rule.operation?.(1, 1));\n    });\n    (0, _qunit.test)('DOES NOT END WITH comparison', function (assert) {\n      const rule = getTokenRule(_QueryParser.TokenKeys.DoesNotEndWithComparison);\n      assert.true(rule.operation?.('Hello World', 'Hello'));\n      assert.false(rule.operation?.('Hello World', 'World'));\n      assert.false(rule.operation?.('Hello World', 1));\n      assert.false(rule.operation?.(1, 'Hello'));\n      assert.false(rule.operation?.(1, 1));\n    });\n    (0, _qunit.test)('INCLUDES comparison', function (assert) {\n      const rule = getTokenRule(_QueryParser.TokenKeys.IncludesComparison);\n      assert.true(rule.operation?.('Hello World', 'llo W'));\n      assert.true(rule.operation?.(['Hello', 'World'], 'World'));\n      assert.false(rule.operation?.('Hello World', 'Foo'));\n      assert.false(rule.operation?.(['Hello', 'World'], 'Bar'));\n      assert.false(rule.operation?.('Hello World', 1));\n      assert.false(rule.operation?.(1, 'Hello'));\n      assert.false(rule.operation?.(1, 1));\n    });\n    (0, _qunit.test)('DOES NOT INCLUDE comparison', function (assert) {\n      const rule = getTokenRule(_QueryParser.TokenKeys.DoesNotIncludeComparison);\n      assert.true(rule.operation?.('Hello World', 'Foo'));\n      assert.true(rule.operation?.(['Hello', 'World'], 'Bar'));\n      assert.false(rule.operation?.('Hello World', 'llo W'));\n      assert.false(rule.operation?.(['Hello', 'World'], 'World'));\n      assert.false(rule.operation?.('Hello World', 1));\n      assert.false(rule.operation?.(1, 'Hello'));\n      assert.false(rule.operation?.(1, 1));\n    });\n    (0, _qunit.test)('IS LESS THAN comparison', function (assert) {\n      const rule = getTokenRule(_QueryParser.TokenKeys.IsLessThanComparison);\n      assert.true(rule.operation?.(1, 2));\n      assert.false(rule.operation?.(2, 1));\n      assert.false(rule.operation?.('foo', 2));\n      assert.false(rule.operation?.(1, 'bar'));\n      assert.false(rule.operation?.('foo', 'bar'));\n    });\n    (0, _qunit.test)('IS GREATER THAN comparison', function (assert) {\n      const rule = getTokenRule(_QueryParser.TokenKeys.IsGreaterThanComparison);\n      assert.true(rule.operation?.(2, 1));\n      assert.false(rule.operation?.(1, 2));\n      assert.false(rule.operation?.('foo', 2));\n      assert.false(rule.operation?.(1, 'bar'));\n      assert.false(rule.operation?.('foo', 'bar'));\n    });\n    (0, _qunit.test)('tokenize()', function (assert) {\n      const parser = new _QueryParser.default();\n      function testTokenizer(query, expected) {\n        const tokens = parser.tokenize(query);\n        assert.deepEqual(tokens.map(item => item.name), expected, expected.join(' -> '));\n        return tokens;\n      }\n      testTokenizer('name EQUALS \"Bob\"', [_QueryParser.TokenKeys.ColumnIdentifier, _QueryParser.TokenKeys.EqualsComparison, _QueryParser.TokenKeys.StringLiteral]);\n      testTokenizer('(name EQUALS \"Bob\")', [_QueryParser.TokenKeys.LeftParen, _QueryParser.TokenKeys.ColumnIdentifier, _QueryParser.TokenKeys.EqualsComparison, _QueryParser.TokenKeys.StringLiteral, _QueryParser.TokenKeys.RightParen]);\n      testTokenizer('age DOES NOT EQUAL 42', [_QueryParser.TokenKeys.ColumnIdentifier, _QueryParser.TokenKeys.NotEqualToComparison, _QueryParser.TokenKeys.NumberLiteral]);\n      testTokenizer('age DOES NOT EQUAL 42', [_QueryParser.TokenKeys.ColumnIdentifier, _QueryParser.TokenKeys.NotEqualToComparison, _QueryParser.TokenKeys.NumberLiteral]);\n    });\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljplNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxznivltrvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjpTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}